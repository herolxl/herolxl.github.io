<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>hero的博客</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>hero</name>
    </author>
    <updated>2021-11-19T06:30:36.000Z</updated>
    <entry>
        <id>http://example.com/2021/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</id>
        <title>数据结构需要注意的点</title>
        <link rel="alternate" href="http://example.com/2021/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/"/>
        <content type="html">&lt;h1 id=&#34;绪论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绪论&#34;&gt;#&lt;/a&gt; 绪论&lt;/h1&gt;
&lt;h2 id=&#34;基本概念和术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念和术语&#34;&gt;#&lt;/a&gt; 基本概念和术语&lt;/h2&gt;
&lt;h3 id=&#34;数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据&#34;&gt;#&lt;/a&gt; 数据&lt;/h3&gt;
&lt;p&gt;​    数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序是被和处理的符号的集合。&lt;/p&gt;
&lt;h3 id=&#34;数据元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据元素&#34;&gt;#&lt;/a&gt; 数据元素&lt;/h3&gt;
&lt;p&gt;​     数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个人的话剧遇上年度可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。&lt;/p&gt;
&lt;h3 id=&#34;数据对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据对象&#34;&gt;#&lt;/a&gt; 数据对象&lt;/h3&gt;
&lt;p&gt;​     数据对象是具有相同性质的数据元素的集合，是数据的一个子集。&lt;/p&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型&#34;&gt;#&lt;/a&gt; 数据类型&lt;/h3&gt;
&lt;p&gt;​     数据类型是一个值的集合和定义在此集合上的一组操作的总称。&lt;br&gt;
​     1）原子类型：其值不可再分的数据类型。&lt;br&gt;
​     2) 结构类型：其值可以再分解为若干成分的数据类型。&lt;br&gt;
​     3）抽象数据类型：抽象数据组织与之相关的操作。&lt;/p&gt;
&lt;h3 id=&#34;数据结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构&#34;&gt;#&lt;/a&gt; 数据结构&lt;/h3&gt;
&lt;p&gt;​     数据结构是相互之间存在一种或多种特定关系的数据元素的集合。在任何问题中数据元素都不是孤立的，它们之间存在着某种关系，这种数据元素相互之间的关系成为结构。数据结构包括三方面的内容：逻辑结构，存储结构和数据的运算。&lt;br&gt;
​     一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。&lt;/p&gt;
&lt;h2 id=&#34;数据结构三要素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据结构三要素&#34;&gt;#&lt;/a&gt; 数据结构三要素&lt;/h2&gt;
&lt;h3 id=&#34;数据的逻辑结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的逻辑结构&#34;&gt;#&lt;/a&gt; 数据的逻辑结构&lt;/h3&gt;
&lt;p&gt;​     逻辑结构是指数据元素之间的逻辑关系，从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210329104558981.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 集合：结构中的数据元素除同属于一个集合之外，没有别的关系。
 线性结构：结构中的数据元素之间只存在一对一的关系。
 树形结构：结构中的数据元素之间存在一对多的关系。
 图状结构或网状结构：结构中的数据元素之间存在多对多的关系。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数据的存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的存储结构&#34;&gt;#&lt;/a&gt; 数据的存储结构&lt;/h3&gt;
&lt;p&gt;​     存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构，他包括数据元素的表示和关系的表示。数据的存储结构是用计算机语言实现的逻辑结构，它依赖于计算机语言，数据的存储结构主要有顺序存储、链式存储、索引存储和散列存储。&lt;br&gt;
​     1）顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。其优点是可以实现随机存取，每个元素占用最少的存储空间。缺点是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。&lt;br&gt;
​     2）链式存储。不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针表示元素之间的逻辑关系。其优点是不会出现碎片现象，能充分利用存储空间，缺点是每个元素因存储指针而占用额外的存储空间，且只能实现顺序存取。&lt;br&gt;
​     3) 索引存储。在存储元素信息的同时还建立了附加的索引表，索引表中的每项称为索引项，索引项的一般形式是（关键字，地址）。其优点是检索速度快，缺点是附加的索引表额外占用存储空间，修改索引表也花费较多的时间。&lt;br&gt;
​     4) 散列存储。根据元素的关键字直接计算出该元素的存储地址，又称哈希存储，其优点是检索，增加和删除节点的操作都很快，缺点是若散列函数不好，可能会出现冲突。&lt;/p&gt;
&lt;h3 id=&#34;数据的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据的运算&#34;&gt;#&lt;/a&gt; 数据的运算&lt;/h3&gt;
&lt;p&gt;​     施加在数据上的运算包括运算的定义和实现，运算的定义是针对逻辑结构的，指出运算的功能，运算的实现是针对存储结构的，指出运算的具体操作步骤。&lt;/p&gt;
&lt;h2 id=&#34;算法的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算法的基本概念&#34;&gt;#&lt;/a&gt; 算法的基本概念&lt;/h2&gt;
&lt;p&gt;​     算法是对特定问题求解步骤的一种描述，它是指令的序列，其中的每条指令表示一个或多个操作。而且算法还有以下 5 个重要特性。&lt;br&gt;
​     有穷性：一个算法必须执行有穷步之后结束，且每一步都可在有穷时间内完成。&lt;br&gt;
​     确定性：算法中每条指令都必须有确切的含义，对于相同的水只能得出相同的输出。&lt;br&gt;
​     可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。&lt;br&gt;
​     输入：一个算法有零个或多个输入，这些输入取自某个特定的对象的集合。&lt;br&gt;
​     输出：一个算法有一个或多个输出，这些输出是与输入有某种特定关系的量。&lt;br&gt;
​     通常一个优秀算法应考虑一下目标：&lt;br&gt;
​     正确性：算法应能够正确解决问题。&lt;br&gt;
​     可读性：算法应具有良好的可读性，以便人民理解。&lt;br&gt;
​     效率与低存储量需求：效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，这两者都与问题的规模有关。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119151040856.png&#34; alt=&#34;image-20211119151040856&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;线性表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性表&#34;&gt;#&lt;/a&gt; 线性表&lt;/h1&gt;
&lt;p&gt;线性表的顺序存储结构是一种&lt;strong&gt;随机存取（读写）&lt;strong&gt;的存储结构，不是顺序存取的存储结构，是&lt;/strong&gt;顺序存储&lt;/strong&gt;的村树结构&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119151605513.png&#34; alt=&#34;image-20211119151605513&#34;&gt;&lt;/p&gt;
&lt;p&gt;即使带头尾指针，循环单链表页&lt;strong&gt;不好删除最后一个节点&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;栈和队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈和队列&#34;&gt;#&lt;/a&gt; 栈和队列&lt;/h1&gt;
&lt;p&gt;n 个不同元素进栈，出栈可能为&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119152212184.png&#34; alt=&#34;image-20211119152212184&#34;&gt;&lt;/p&gt;
&lt;p&gt;在用单链表实现队列时，&lt;strong&gt;队头设在链表的表头位置&lt;/strong&gt;（存疑，王道这么说的）&lt;/p&gt;
&lt;h2 id=&#34;栈在表达式中求值的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈在表达式中求值的应用&#34;&gt;#&lt;/a&gt; 栈在表达式中求值的应用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;中缀表达式&lt;/strong&gt;：A+B*（C-D）-E/F&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后缀表达式&lt;/strong&gt;：ABCD-*+EF/-&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中缀转后缀&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​	1. 直接做题可以构造树，并后序遍历就是后缀表示了&lt;/p&gt;
&lt;p&gt;​	2. 用两个栈，并设置符号优先级&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;执行函数时，局部变量一般采用栈结构&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;特殊矩阵压缩存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊矩阵压缩存储&#34;&gt;#&lt;/a&gt; 特殊矩阵压缩存储&lt;/h2&gt;
&lt;p&gt;原矩阵下标从 1 开始，目的矩阵下标从 0 开始&lt;/p&gt;
&lt;h3 id=&#34;对称矩阵可以直接用三角矩阵包括&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对称矩阵可以直接用三角矩阵包括&#34;&gt;#&lt;/a&gt; 对称矩阵 (可以直接用三角矩阵包括)&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i(i-1)/2+j-1 (i&amp;gt;=j)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.85396em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;j(j-1)/2+i-1(i&amp;lt;j)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.74285em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;三角矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三角矩阵&#34;&gt;#&lt;/a&gt; 三角矩阵&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;下三角按行&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i(i-1)/2+j-1(i&amp;gt;=j)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.85396em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n(n+1)/2(i&amp;lt;j)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上三角按行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(i-1)(2n-i+2)+(j-i)(i&amp;lt;=j)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.74285em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n(n+1)/2(i&amp;gt;j)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;三对称矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三对称矩阵&#34;&gt;#&lt;/a&gt; 三对称矩阵&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;k=2i+j-3
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.74285em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.85396em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串&#34;&gt;#&lt;/a&gt; 串&lt;/h1&gt;
&lt;h2 id=&#34;串的存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#串的存储结构&#34;&gt;#&lt;/a&gt; 串的存储结构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定长顺序存储&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;堆分配存储表示&lt;/strong&gt;：c 语言中存在一个称为堆的自由存储区&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;块链存储表示&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;kmp算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kmp算法&#34;&gt;#&lt;/a&gt; KMP 算法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;kmp 的进一步优化&lt;/strong&gt;：忘记了感觉以下这个例子：主串（abaabaabca）子串（abaabc）&lt;/p&gt;
&lt;p&gt;忘记了就做几道题压压惊&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211119205311817.png&#34; alt=&#34;image-20211119205311817&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;树与二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树与二叉树&#34;&gt;#&lt;/a&gt; 树与二叉树&lt;/h1&gt;
&lt;p&gt;树的路径长度时从树根道每个节点的路径长度的总和&lt;/p&gt;
&lt;p&gt;非空二叉树的叶子节点数等于度为 2 的节点数 + 1&lt;/p&gt;
&lt;p&gt;度为 2 的有序树不是二叉树&lt;/p&gt;
&lt;h2 id=&#34;线索二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线索二叉树&#34;&gt;#&lt;/a&gt; 线索二叉树&lt;/h2&gt;
&lt;h3 id=&#34;建立线索2叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立线索2叉树&#34;&gt;#&lt;/a&gt; 建立线索 2 叉树&lt;/h3&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;InThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ThreadTree &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;p，ThreadTree &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;pre&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;inrhread&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; lchild&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;pre&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;lchild &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			p&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;lchild &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pre&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			p&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;ltag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pre&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;z&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; pre&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;rchild&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			pre&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;rchild &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			pre&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;rtag &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		pre &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; p&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token function&#34;&gt;InThread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;rchild&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pre&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;森林可以 0 棵树   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后序线索二叉树不能有效解决寻找后继&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先序线索二叉树不能有效解决寻找前驱&lt;/strong&gt;（需要栈的支持）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后序树不能完整遍历&lt;/strong&gt;（需要栈的支持）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;树的先根遍历&lt;/strong&gt;与&lt;strong&gt;二叉树的先序遍历&lt;/strong&gt;一样，&lt;strong&gt;森林先序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;树的后根遍历与二叉树的中序遍历一样，&lt;strong&gt;森林中序&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2021-11-19T06:30:36.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/17/%E5%BA%94%E7%94%A8%E5%B1%82/</id>
        <title>应用层</title>
        <link rel="alternate" href="http://example.com/2021/11/17/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
        <content type="html">&lt;h1 id=&#34;网络应用模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络应用模型&#34;&gt;#&lt;/a&gt; 网络应用模型&lt;/h1&gt;
&lt;h2 id=&#34;客户服务器模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户服务器模型&#34;&gt;#&lt;/a&gt; 客户 / 服务器模型&lt;/h2&gt;
&lt;p&gt;在 C/S 模型中，客户是服务请求方，服务器是服务提供方。网络中各计算机的&lt;strong&gt;地位不平等&lt;/strong&gt;，服务器可以通过对用户权限的限制来达到管理客户机的目的，使它们不能随意存储／删除数据，或进行其他受限的网络活动。而客户机相互之间不直接进行通信，可扩展性不佳。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;客户端面向用户，服务器面向任务&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;cs模型主要应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cs模型主要应用&#34;&gt;#&lt;/a&gt; C/S 模型主要应用&lt;/h3&gt;
&lt;p&gt;客户 / 服务器模型的应用：Web、文件传输协议（FTP）、远程登录和电子邮件。&lt;/p&gt;
&lt;h2 id=&#34;p2p模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p模型&#34;&gt;#&lt;/a&gt; P2P 模型&lt;/h2&gt;
&lt;h3 id=&#34;p2p模型概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p模型概述&#34;&gt;#&lt;/a&gt; P2P 模型概述&lt;/h3&gt;
&lt;p&gt;在 P2P 模型中，各计算机没有固定的客户和服务器划分，任意一对计算机 —— 称为 ** 对等方 **(Peer)，&lt;strong&gt;直接相互通信&lt;/strong&gt;。每个结点既作为客户访问其他结点的资源，也作为服务器提供资源给其他结点访问。P2P 的应用：PPlive、Bittorrent 和电驴。&lt;/p&gt;
&lt;h3 id=&#34;p2p模型的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p2p模型的优缺点&#34;&gt;#&lt;/a&gt; P2P 模型的优缺点&lt;/h3&gt;
&lt;p&gt;​	P2P 模型的优点：减轻了服务器的计算压力，消除了对某个服务器的完全依赖，提高了系统效率和资源利用率。多个客户机之间可以直接共享文档，可扩展性好，网络健壮性强，单个结点的失效不会影响其他部分的结点。&lt;br&gt;
​    P2P 模型的缺点：占用较多的内存影响整机速度，P2P 下载会对硬盘造成较大的损伤，是网络变得非常拥堵。因此，各大 isp（互联网服务提供商，如电信网通等）通常都对 P2P 应用持反对态度。&lt;/p&gt;
&lt;h1 id=&#34;域名系统dns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名系统dns&#34;&gt;#&lt;/a&gt; 域名系统（DNS）&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ranbow&#34;&gt;Internet 上提供客户访问的主机不一定要有域名，多个域名可以指向同一台主机（主机有多个 IP 地址，在不同网段），一个域名可以指向多个主机（为了负载均衡）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;域名系统 (DNS) 是因特网使用的命名系统， 用来把便于人们记忆的具有特定含义的主机名（如 www.cskaoya &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL24uY29t&#34;&gt;n.com&lt;/span&gt;) 转换为便于机器处理的 IP 地址，&lt;strong&gt;DNS 系统采用 客户／服务器模型，协议运行在 UDP 之上，使用 53 号端口&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;域名规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名规则&#34;&gt;#&lt;/a&gt; 域名规则&lt;/h3&gt;
&lt;p&gt;（1）&lt;strong&gt;标号中的英文不区分大小写&lt;/strong&gt;。&lt;br&gt;
（2）标号中除连字符（－）外不能使用其他的标点符号。&lt;br&gt;
（3）每个标号不超过 63 个字符，多标号组成的完整域名最长不超过 255 个字符。&lt;br&gt;
（4）级别最低的域名写在最左边，级别最高的顶级域名写在最右边。&lt;/p&gt;
&lt;h3 id=&#34;顶级域名分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶级域名分类&#34;&gt;#&lt;/a&gt; 顶级域名分类&lt;/h3&gt;
&lt;p&gt;国家顶级域名 (nTLD)：国家和某些地区的域名， 如 “.cn &amp;quot;表示中 国， ＂．us&amp;quot; 表示美国， ＂．uk&amp;quot; 表示英国 。&lt;br&gt;
顶级域名分类 通用顶级域名 (gTLD)：常见的有 “.com” （公司）、 “.net”（网络服务机构）、 “org”（非营利性组织）和 “.gov”（国家 或政府部门）等。&lt;br&gt;
基础结构域名：这种顶级域名只有一个 arpa，用于反向域名解析，因此又称反向域名。&lt;/p&gt;
&lt;h2 id=&#34;域名服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名服务器&#34;&gt;#&lt;/a&gt; 域名服务器&lt;/h2&gt;
&lt;p&gt;因特网的域名系统被设计成一个联机分布式的数据库系统，并采用&lt;strong&gt;客户／服务器模型&lt;/strong&gt;。&lt;br&gt;
&lt;strong&gt;根域名服务器&lt;/strong&gt;：是最高层次的域名服务器，所有的根域名服务器都知道所有的顶级域名服务器的 IP 地址。&lt;br&gt;
&lt;strong&gt;顶级域名服务器&lt;/strong&gt;：负责管理在该顶级域名服务器注册的所有二级域名，收到 DNS 查询请求时，就给出相应的回答（可能是最后的结果，也可能是下一步应当查找的域名服务器的 IP 地址）。&lt;br&gt;
&lt;strong&gt;授权域名服务器&lt;/strong&gt;（权限域名服务器）：每台主机都必须在授权域名服务器处登记，授权域名服务器总能将其管辖的主机名转换为该主机的 IP 地址。&lt;br&gt;
&lt;strong&gt;本地域名服务器&lt;/strong&gt;：当一台主机发出 DNS 查询请求时 ，这个查询请求报文 就发送给该主机的本地域名服务器，每个因特网服务提供者 (ISP)，或一所大学，甚至一 所大学中的各个系，都可以拥有一个本地域名服务器。&lt;/p&gt;
&lt;h2 id=&#34;域名解析过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名解析过程&#34;&gt;#&lt;/a&gt; 域名解析过程&lt;/h2&gt;
&lt;p&gt;域名解析就是指把域名映射成为 IP 地址或把 IP 地址映射成域名的过程。前者称为正向解析。后者称为反向解析。域名解析有两种方式递归查询和递归与迭代相结合的查询。&lt;/p&gt;
&lt;h3 id=&#34;查询方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询方式&#34;&gt;#&lt;/a&gt; 查询方式&lt;/h3&gt;
&lt;p&gt;递归查询：该方法给根域名服务造成的负载过大，所以在实际中几乎不使用。&lt;br&gt;
归与迭代相结合的查询：主机向本地域名服务器的查询采用的是递归查询，本地域名服务器向根域名服务器的查询采用迭代查询。&lt;/p&gt;
&lt;h3 id=&#34;域名解析过程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域名解析过程-2&#34;&gt;#&lt;/a&gt; 域名解析过程&lt;/h3&gt;
&lt;p&gt;客户机向其本地域名服务器发出 DNS 请求报文，本地域名服务器收到请求后，查询本地缓存，若没有该记录，则以 DNS 客户的身份向根域名服务器发出解析请求，根域名服务器收到请求后，判断该域名属于域，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1kbnMtNHcyZTE4ZG94ZjY0Yzh4bWxkMzAxYTA1emtuNmJ5ZHcxczZmLmNvbQ==&#34;&gt;将对应的顶级域名服务器 dns.com&lt;/span&gt; 的 IP 地址返回给本地域名服务器，本地域名服务器向顶级域名服务器 dns.com 发出解析请求报文，顶级域名服务器 dns.com 收到请求后，判断该域名属于 abc.com 域，因此将对应的授权域名服务器 dns.abc.com 的 IP 地址返回给本地域名服务器，本地域名服务器向授权域名服务器 dns.abc.com 发起解析请求报文，授权域名服务器 dns.abc.com 收到请求后，将查询结果返回给本地域名服务器，本地域名服务器将查询结果保存到本地缓存，同时返回给客户机。&lt;br&gt;
为了提高 DNS 的查询效率，减少因特网上的 DNS 查询报文数量，在域名服务器中广泛的使用了高速缓存，&lt;strong&gt;但是因为主机名和 IP 地址之间的映射不是永久的，所以 DNS 服务器将在一段时间后丢弃高速缓存中的信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;域名解析过程可能会访问多个权限域名服务器（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5hYmMueHl6LmNvbQ==&#34;&gt;www.abc.xyz.com&lt;/span&gt;，就需要访问两个权限域名服务器）&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;文件传输协议ftp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件传输协议ftp&#34;&gt;#&lt;/a&gt; 文件传输协议（FTP）&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;控制信息使外带传送的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;FTP 不适合在两个计算机之间共享读写信息&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;ftp的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ftp的工作原理&#34;&gt;#&lt;/a&gt; FTP 的工作原理&lt;/h2&gt;
&lt;p&gt;文件传输协议（FTP）是因特网上使用的最广泛的文件传输协议。FTP 提供交互式的访问，&lt;strong&gt;允许客户指明文件的类型与格式，并允许文件具有存取权限&lt;/strong&gt;，它屏蔽了各计算机系统的细节，因而适合于在异构网络中的任意计算机之间传送文件。&lt;strong&gt;FTP 采用客户／服务器的工作方式，它使用 TCP 可靠的传输服务&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ftp功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ftp功能&#34;&gt;#&lt;/a&gt; FTP 功能&lt;/h3&gt;
&lt;p&gt;（1）&lt;strong&gt;提供不同种类主机系统（硬、软件体系等都可以不同）之间的文件传输能力&lt;/strong&gt;。&lt;br&gt;
（2）以用户权限管理的方式提供用户对远程 FTP 服务器上的文件管理能力。&lt;br&gt;
（3）以匿名 FTP 的方式提供公用文件共享的能力。&lt;/p&gt;
&lt;h3 id=&#34;ftp工作步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ftp工作步骤&#34;&gt;#&lt;/a&gt; FTP 工作步骤&lt;/h3&gt;
&lt;p&gt;FTP 的服务进程由两大部分组成，一个是&lt;strong&gt;主进程&lt;/strong&gt;负责接收新的请求，另外有若干&lt;strong&gt;从属进程&lt;/strong&gt;负责处理单个请求。其工作步骤如下：&lt;br&gt;
（1）打开熟知端口 21 （控制端口），使客户进程能够连接上。&lt;br&gt;
（2）等待客户进程方连接请求。&lt;br&gt;
（3）启动从属进程来处理客户进程发来的请求，进程与从属进程并发执行，从属进程对客户进程的请求处理完毕后即终止。&lt;br&gt;
（4）回到等待状态，继续接收其他客户进程的请求。&lt;/p&gt;
&lt;h2 id=&#34;控制连接与数据连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制连接与数据连接&#34;&gt;#&lt;/a&gt; 控制连接与数据连接&lt;/h2&gt;
&lt;p&gt;FTP 在工作时使用两个并行的 TCP 连接，一个是控制连接（端口号 21），一个是数据连接（端口号为 20）。使用两个不同的端口号可以使协议更加简单和更容易实现。&lt;/p&gt;
&lt;h3 id=&#34;控制连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制连接&#34;&gt;#&lt;/a&gt; 控制连接&lt;/h3&gt;
&lt;p&gt;服务器监听 21 号端口，等待客户连接，建立在这个端口上的连接称为控制连接。控制连接（端口号 21) 控制连接用来传输控制信息（如连接请求、 传送请求等），并且控制信息都以 7 位 ASCII 格式传送。&lt;strong&gt;控制连接在整个会话期间一直保持打开状态&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;数据连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据连接&#34;&gt;#&lt;/a&gt; 数据连接&lt;/h3&gt;
&lt;p&gt;服务器端的控制进程在接收到 FTP 客户发来的文件传输请求后就创建数据传送进程和数据连接。&lt;strong&gt;传送完毕后关闭数据传送连接，并结束运行&lt;/strong&gt;。&lt;br&gt;
数据连接有两种传输模式：主动模式 PORT（端口号 20，服务器到客户）和被动模式 PASV（端口号随机 &amp;gt; 1024，客户到服务器）&lt;/p&gt;
&lt;h1 id=&#34;电子邮件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电子邮件&#34;&gt;#&lt;/a&gt; 电子邮件&lt;/h1&gt;
&lt;h2 id=&#34;电子邮件系统组成结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电子邮件系统组成结构&#34;&gt;#&lt;/a&gt; 电子邮件系统组成结构&lt;/h2&gt;
&lt;p&gt;一个电子邮件系统应具有三个最主要的组成构件：&lt;br&gt;
用户代理 (UA)：用户与电子邮件系统的接口。&lt;br&gt;
邮件服务器：它的功能是发送和接收邮件，同时还要向发信人报告邮件发送情况。&lt;br&gt;
邮件发送协议和读取协议：邮件发送协议用于用户代理向邮件服务器发送邮件或在邮件服务器之间发送邮件。如&lt;strong&gt; SMTP 协议&lt;/strong&gt;：邮件发送协议用于用户代理向邮件服务器发送邮件或在邮件服务器之间发送邮件。&lt;strong&gt;POP3&lt;/strong&gt;: 邮件读取协议用于用户代理从邮件服务器读取邮件。&lt;/p&gt;
&lt;h2 id=&#34;电子邮件收发过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电子邮件收发过程&#34;&gt;#&lt;/a&gt; 电子邮件收发过程&lt;/h2&gt;
&lt;p&gt;发信人调用用户代理来撰写和编辑要发送的邮件。用户代理用 SMTP 把邮件传送给发送方邮件服务器。&lt;/p&gt;
&lt;p&gt;发送方邮件服务器将邮件放入邮件缓存队列中，等待发送。&lt;/p&gt;
&lt;p&gt;运行在发送方邮件服务器的 SMTP 客户进程，发现邮件缓存中有待发送的邮件，就向运行在接收方邮件服务器的 SMTP 服务器进程发起建立 TCP 连接。&lt;/p&gt;
&lt;p&gt;TCP 连接建立后，SMTP 客户进程开始向远程 SMTP 服务器进程发送邮件。当所有待发送邮件发完后，SMTP 就关闭所建立的 TCP 连接。&lt;/p&gt;
&lt;p&gt;运行在接收方邮件服务器中的 SMTP 服务器进程收到邮件后，将邮件放入收信人的用户 邮箱，等待收信人在方便时进行读取，收信人打算收信时，调用用户代理，使用 POP3（或 IMAP) 协议将自己的邮件从接收方 邮件服务器的用户邮箱中取回（如果邮箱中有来信的话）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210221093855288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;电子邮件格式与mime&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电子邮件格式与mime&#34;&gt;#&lt;/a&gt; 电子邮件格式与 MIME&lt;/h2&gt;
&lt;h3 id=&#34;电子邮件格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#电子邮件格式&#34;&gt;#&lt;/a&gt; 电子邮件格式&lt;/h3&gt;
&lt;p&gt;to 是必需的关键字，后面填入一个或多个收件人的电子邮件地址。&lt;br&gt;
Subject 是可选关键字，是邮件的主题，反映了邮件的主要内容。&lt;br&gt;
From 是必填的关键字，但它通常由邮件系统自动填入。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmFiY0Bjc2thb3lhbi5jb20=&#34;&gt;abc@cskaoyan.com&lt;/span&gt;，收件人游戏名 @邮件服务器所在主机域名，在整个因特网上是唯一的&lt;/p&gt;
&lt;h3 id=&#34;多用途网际邮件扩充mime&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多用途网际邮件扩充mime&#34;&gt;#&lt;/a&gt; 多用途网际邮件扩充（MIME）&lt;/h3&gt;
&lt;p&gt;SMTP 只能传送一定长度的 ASCII 码，许多其他非英语国家的文字（如中文）就无法传送无法传送可执行文件及其他二进制对象。MIME 使得可以继续使用目前的格式，增加了邮件主体的结构，并定义了传送非 ASCII 码的编码规则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MIME 内容：&lt;/strong&gt;&lt;br&gt;
（1）5 个新的邮件首部字段，包括 MIME 版本、类型。&lt;br&gt;
（2）定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。&lt;br&gt;
（3）定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。&lt;/p&gt;
&lt;h2 id=&#34;smtp和pop3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#smtp和pop3&#34;&gt;#&lt;/a&gt; SMTP 和 POP3&lt;/h2&gt;
&lt;h3 id=&#34;简单邮件传输协议smtp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单邮件传输协议smtp&#34;&gt;#&lt;/a&gt; 简单邮件传输协议 (SMTP)&lt;/h3&gt;
&lt;p&gt;简单邮件传输协议 (SMTP) 是一种提供可靠且有效的电子邮件传输的协议，它控制两个相互通信的 SMTP 进程交换信息使用客户／服务器方式，发送邮件的 SMTP 进程是 SMTP 客户，而负责接收邮件的 SMTP 进程是 SMTP 服务器，SMTP 使用的是 TCP 连接，端口号为 25。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SMTP 通信分为以下三个阶段：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;连接建立&lt;/strong&gt;：&lt;br&gt;
发件人的邮件发送到发送方邮件服务器的邮件缓存中后，SMTP 客户就每隔一段时间对邮件缓存扫描一次。如果发现有邮件，就使用 SMTP 的熟知端口号 (25) 与接收方邮件服务器的 SMTP 服务器建立 TCP 连接，SMTP 不使用中间邮件服务器。TCP 连接总是在发送方和接收方这两个邮件服务器之间直接建立。&lt;br&gt;
（2）&lt;strong&gt;邮件传送&lt;/strong&gt;：连接建立后，就可开始传送邮件，邮件的传送从 MAIL 命令开始，MAIL 命令后面有发件人的地址，SMTP 服务器已准备好接收邮件，则回答 250 OK，接着 SMTP 客户端发送一个或多个 RCPT（收件人 recipient 的缩写）命令，RCPT 命令的作用 先弄清接收方系统是否己做好接收邮件的准备，然后才发送邮件，避免浪费通信资源。获得 OK 的回答后，客户端就使用 DATA 命令，表示要开始传输邮件的内容。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2021022109425857.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）&lt;strong&gt;连接释放&lt;/strong&gt;：邮件发送完毕后，SMTP 客户应发送 QUIT 命令，SMTP 服务器返回的信息是 &lt;strong&gt;221（服务关闭）&lt;/strong&gt;，表示 SMTP 同意释放 TCP 连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单邮件传输协议 (SMTP) 的缺点：&lt;/strong&gt;&lt;br&gt;
（1）SMTP 不能传送可执行文件或者其他二进制对象。&lt;br&gt;
（2）&lt;strong&gt;SMTP 仅限于传送 7 位 ASCII 码，不能传送其他非英语国家的文字&lt;/strong&gt;。&lt;br&gt;
（3）SMTP 服务器会拒绝超过一定长度的邮件。&lt;/p&gt;
&lt;h3 id=&#34;pop3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pop3&#34;&gt;#&lt;/a&gt; POP3&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;也是基于 ASCII 码的，登录到服务器后，发送的密码不加秘&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;邮局协议 (POP) 是 个非常简单但功能有限的邮件读取协议，现在使用的是它的第 3 个版本 POP3，当用户读取邮件时，用 户代理向邮件服务器发出请求，拉取用户邮箱中的邮件，使用客户／服务器的工作方式，POP3 在传输层使用 TCP，&lt;strong&gt;端口号为 110.POP3 有两个工作方式 “下载并保留” 和 “下载并删除”&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;因特网报文存取协议imap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因特网报文存取协议imap&#34;&gt;#&lt;/a&gt; 因特网报文存取协议（IMAP）&lt;/h3&gt;
&lt;p&gt;IMAP 也是一个邮件接收协议，比 POP 复杂得多，&lt;strong&gt;它为用户提供了创建文件夹，在不同文件夹之间移动邮件及在远程文件夹中查询邮件的命令&lt;/strong&gt;，为此 IMAP 服务器维护了会话用户的状态信息。&lt;strong&gt;IMAP 的另一特性是允许用户代理只获取报文的某些部分&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;基于万维网的电子邮件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于万维网的电子邮件&#34;&gt;#&lt;/a&gt; 基于万维网的电子邮件&lt;/h3&gt;
&lt;p&gt;基于万维网的电子邮件的特点是：用户浏览器与 Hotmail 或 Gmail 的邮件服务器之间的邮件发送或接收使用 HTTP。在不同邮件服务器之间传送邮件时使用 SMTP。&lt;/p&gt;
&lt;h1 id=&#34;万维网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#万维网&#34;&gt;#&lt;/a&gt; 万维网&lt;/h1&gt;
&lt;p&gt;万维网是一个分布式、联机式的信息存储空间。在这个空间中，有用的事物称为资源，并由一个全域 “统一资源定位符” (URL) 标识。这些资源通过超文本传输协议 (HTTP) 传送给使用者，而后者通过单击链接来获取资源。&lt;/p&gt;
&lt;h3 id=&#34;万维网组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#万维网组成&#34;&gt;#&lt;/a&gt; 万维网组成&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;统一资源定位符&lt;/strong&gt;：负烹标识万维网上的各种文档，并使每个文档在整个万维网的范围内具有唯 — 的标识符 URL.&lt;br&gt;
&lt;strong&gt; 超文本传输协议 (HTTP)&lt;/strong&gt;：— 个应用层协议，它使用 TCP 连接进行可靠的传输，HTTP 是万维 mk 网客户程序和服务器程序之间交互所必须严格遵守的协议。&lt;br&gt;
&lt;strong&gt;超文本标记语言 (HTML)&lt;/strong&gt;：— 种文档结构的标记语言，它使用 — 些约定的标记对页面上 的各种信息 **（包括文字、 声音、 图像、 视频等）**、 格式进行描述。&lt;/p&gt;
&lt;h3 id=&#34;万维网的工作流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#万维网的工作流程&#34;&gt;#&lt;/a&gt; 万维网的工作流程&lt;/h3&gt;
&lt;p&gt;Web 用户使用浏览器（指定 URL) 与 Web 服务器建立连接，并发送浏览请求 Web 服务器把 URL 转换为文件路径，并返回信息给 Web 浏览器，通信完成后关闭连接。&lt;/p&gt;
&lt;h2 id=&#34;超文本传输协议http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超文本传输协议http&#34;&gt;#&lt;/a&gt; 超文本传输协议（HTTP）&lt;/h2&gt;
&lt;h3 id=&#34;超文本传输协议概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超文本传输协议概述&#34;&gt;#&lt;/a&gt; 超文本传输协议概述&lt;/h3&gt;
&lt;p&gt;HTTP 定义了浏览器（万维网客户进程）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。&lt;strong&gt;HTTP 是面向事务的应用层协议&lt;/strong&gt;，它规定了在浏览器和服务器之间的请求和响应的格式与规则，是万维网上能够可孔地交换文件的至要基础。&lt;/p&gt;
&lt;h3 id=&#34;http操作过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http操作过程&#34;&gt;#&lt;/a&gt; HTTP 操作过程&lt;/h3&gt;
&lt;p&gt;每个万维网站点都有一个服务器进程，它不断地监听 TCP 的端口 80（默认），当监听到连接请求后便与浏览器建立连接，TCP 连接建立后，浏览器就向服务器发送请求获取某个 Web 页面 的 HTTP 请求，服务器收到 HTTP 请求后，将构建所请求 Web 页的必需信息，并通过 HTTP 响应返回给浏览器浏览器再将信息进行解释， 然后将 Web 页显示给用户，最后释放 TCP 连接。&lt;br&gt;
&lt;strong&gt;用户单击鼠标后发生的时间顺序&lt;/strong&gt;：&lt;br&gt;
浏览器分析链接指向页面的 URL 。浏览器向 DNS 请求解析域名的 IP 地址。域名服务器 DNS 解析出 IP 地址，浏览器与该服务器建立 TCP 连接（默认端口号为 80) 浏览器发出 HTTP 请求：GET/chn/index.html ，服务器通过 HTTP 响应把文件 index.htm 发送给浏览器 T，CP 连接释放，浏览器解释文件 index.htm，并将 Web 页显示给用户。&lt;/p&gt;
&lt;h3 id=&#34;http特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http特点&#34;&gt;#&lt;/a&gt; HTTP 特点&lt;/h3&gt;
&lt;p&gt;（1）&lt;strong&gt;HTTP 是无状态的&lt;/strong&gt;，同一个客户第二次访问同一个服务器上的页面时，服务器的响应与第一次被访问时的相同。&lt;br&gt;
（2）HTTP 的无状态特性简化了服务器的设计，使服务器更容易支持大温并发的 HTTP 请求。&lt;br&gt;
（3）使用 Cookie 加数据库的方式来跟踪用户的活动。&lt;br&gt;
（4）HTTP 采用 TCP 作为运输层协议，保证了数据的可靠传输。&lt;br&gt;
（5）&lt;strong&gt;HTTP 既可以使用非持久连接，也可以使用持久连接 (HTTP/1.1 支持）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非持久连接&lt;/strong&gt;：每个网页元素对象（如 JPEG 图形、 Flash 等）的传输都需要单独建立一个 TCP 连接&lt;br&gt;
&lt;strong&gt;持久连接&lt;/strong&gt;：是指万维网服务器在发送响应后仍然保持这条连接，使同一个客户和服务器可以继续在这条连接上传送后续的 HTTP 请求与响应报文。&lt;br&gt;
持久连接还分为流水线和非流水线，非流水线：客户在收到前一个响应后才能发出下一个请求。流水线：客户每遇到一个对象引用 ，就立即发出一个请求。&lt;/p&gt;
&lt;h3 id=&#34;http报文结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http报文结构&#34;&gt;#&lt;/a&gt; HTTP 报文结构&lt;/h3&gt;
&lt;p&gt;HTTP 是面向文本的，HTTP 报文分为请求报文和响应报文。请求报文：从客户向服务器发送的请求报文。响应报文：从服务器到客户的回答。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210221114057219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法操作为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210221114207824.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态码&#34;&gt;#&lt;/a&gt; 状态码&lt;/h3&gt;
&lt;p&gt;1xx 表示通知信息的，如请求收到了或正在处理。&lt;br&gt;
2xx 表示成功，如接受或知道了。&lt;br&gt;
3xx 表示重定向，如要完成请求还必须采取进一步的行动。&lt;br&gt;
4xx 表示客户的差错，如请求中有错误的语法或不能完成。如：404.&lt;br&gt;
5xx 表示服务器的差错，如服务器失效无法完成请求&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117160518399.png&#34; alt=&#34;image-20211117160518399&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2021-11-17T02:23:14.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/16/%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
        <title>传输层</title>
        <link rel="alternate" href="http://example.com/2021/11/16/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
        <content type="html">&lt;h1 id=&#34;传输层提供的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层提供的服务&#34;&gt;#&lt;/a&gt; 传输层提供的服务&lt;/h1&gt;
&lt;h3 id=&#34;传输层的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输层的功能&#34;&gt;#&lt;/a&gt; 传输层的功能&lt;/h3&gt;
&lt;p&gt;​    （1）传输层提供了应用进程之间的逻辑通信（即端到端的通信）。&lt;br&gt;
​    （2）&lt;strong&gt;复用和分用。复用是指发送方不同的应用进程，都可使用同一个传输层协议传送数据。分用是指接收方的传输层在剥去报文的首部后，能够把这些数据正确交付到目的应用进程&lt;/strong&gt;。&lt;br&gt;
​    （3）传输层还要对收到的报文进行差错检测（首部和数据部分）而网络层只检查 IP 数据报的首部，不检验数据部分是否出错。&lt;br&gt;
​    （4）提供两种不同的传输协议，即面向连接的 TCP 和无连接的 UDP。而网络层无法同时实现两种协议（即在网络层要么只提供面向连接的服务，要么只提供无连接服务）。&lt;br&gt;
​    传输层向高层用户屏蔽低层网络核心的细节（如网络拓扑、路由协议等），使应用进程好像在两个传输层实体之间有一条端到端的逻辑通信信道。&lt;/p&gt;
&lt;h3 id=&#34;端口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口号&#34;&gt;#&lt;/a&gt; 端口号&lt;/h3&gt;
&lt;p&gt;应用进程通过进程号进行标识，端口号长度为 64bit，能够表示 65536（2^16）个不同的端口号。&lt;strong&gt;端口号只有本地意义，在因特网中不同计算机的相同端口是没有联系的&lt;/strong&gt;。根据端口号范围可将端口号分为两类：&lt;/p&gt;
&lt;p&gt;1）&lt;strong&gt;服务端使用的端口号&lt;/strong&gt;。它又分为两类，最重要的一类是熟知端口号，数值为 0~1023. 另一类是登记端口号。使用这类端口号必须在 IANA 登记，以防止重复。一些熟知端口号如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210220161438849.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端使用的端口号（49152~65535）又称短暂端口号（也称临时端口）&lt;/strong&gt;：这类端口号仅在客户进程运行时才动态地选择，通信结束后，刚用过的客户端口号就 不复存在，从而这个端口号就可供其他客户进程使用。&lt;/p&gt;
&lt;h3 id=&#34;tcpip协议栈的传输协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip协议栈的传输协议&#34;&gt;#&lt;/a&gt; TCP/IP 协议栈的传输协议&lt;/h3&gt;
&lt;p&gt;​    面向连接的传输控制协议 (TCP)：采用 TCP 时，传输层向上提供的是一条全双工的可靠逻辑信道。TCP 提供面向连接的可靠传输服务，主要适用于可靠性更重要的场合，如文件传输协议 (FTP)、超文本传输协议（HTTP）、远程登录（TELNET）等。但也增加了许多开销，如确认、流量控制、计时器及连接管理等。&lt;br&gt;
​    无连接的用户数据报协议 (UDP) ：采用 UDP 时，传输层向上提供的是一条不可靠的逻辑通道。远程主机的传输层收到 UDP 报文后，不需要给出任何确认。UDP 简单，执行速度比较快、实时性比较好。应用于小文件传送协议（TFTP）、DNS、SNMP 和实时传输协议（RTP）。&lt;/p&gt;
&lt;h3 id=&#34;ip数据报与udp数据报的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip数据报与udp数据报的区别&#34;&gt;#&lt;/a&gt; IP 数据报与 UDP 数据报的区别&lt;/h3&gt;
&lt;p&gt;​    IP 数据报在网络层要经过路由的存储转发。&lt;br&gt;
​    UDP 数据报在传输层的端到端的逻辑信道中传输，封装成 IP 数据报在网络层传输时，UDP 数据报的信息对路由是不可见的。&lt;/p&gt;
&lt;h3 id=&#34;tcp与网络层虚电路的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp与网络层虚电路的区别&#34;&gt;#&lt;/a&gt; TCP 与网络层虚电路的区别&lt;/h3&gt;
&lt;p&gt;​    TCP 报文段在传输层抽象的逻辑信道中传输，对路由器不可见。虚电路所经过的交换结点都必须保存虚电路状态信息。&lt;br&gt;
​    网络层若采用虚电路方式，则无法提供无连接服务，而传输层采用 TCP 不影晌网络层提供无连接服务。&lt;/p&gt;
&lt;h1 id=&#34;udp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp协议&#34;&gt;#&lt;/a&gt; UDP 协议&lt;/h1&gt;
&lt;p&gt;复用和分用以及差错检测（没有流量控制）&lt;/p&gt;
&lt;h3 id=&#34;udp的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp的特点&#34;&gt;#&lt;/a&gt; UDP 的特点&lt;/h3&gt;
&lt;p&gt;（1）UDP 常用于一次性传输较少数据的网络应用，如&lt;strong&gt; DNS、SNMP&lt;/strong&gt; 等。&lt;br&gt;
（2）UDP 提供尽最大努力的交付，即不保证可靠交付，所有维  护传输可靠性的工作需要用户在应用层来完成。&lt;br&gt;
（3）UDP 是&lt;strong&gt;面向报文&lt;/strong&gt;的，报文是 UDP 数据报处理的最小单位。&lt;/p&gt;
&lt;h3 id=&#34;udp的首部格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp的首部格式&#34;&gt;#&lt;/a&gt; UDP 的首部格式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;源端口&lt;/strong&gt;：源端口号。在需要对方回信时选用，不需要时可用全 0&lt;br&gt;
&lt;strong&gt; 目的端口&lt;/strong&gt;：这在终点交付报文时必须使用到。&lt;br&gt;
&lt;strong&gt;长度&lt;/strong&gt;：UDP 数据报的长度（包括首部和数据），其最小值是 8 （仅有首部）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;校验和&lt;/strong&gt;：该字段是可选的，当源主机不想计算校验和时，则直接令该字段为全 0，检测 UDP 数据报在传输中是否有错．有错就丢弃。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20190915204452321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW9tdWJhaQ==,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;udp校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udp校验&#34;&gt;#&lt;/a&gt; UDP 校验&lt;/h2&gt;
&lt;p&gt;UDP 的校验和只检查首部和数据部分。&lt;br&gt;
校验时，&lt;strong&gt;若 UDP 数据报部分的长度不是偶数个字节，则需填入个全 0 字节&lt;/strong&gt;。&lt;br&gt;
如果 UDP 校验和校验出 UDP 数据报是错误的，那么可以丢弃，也可以交付给上层，但是需要附上错误报告（不能直接交给上层）。&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;伪首部&lt;/strong&gt;，不仅可以检查源端口号、目的端口号和 UDP 用户数据报的数据部分还可以检查 IP 数据报的源 IP 地址和目的地址。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211116104339964.png&#34; alt=&#34;image-20211116104339964&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;tcp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp协议&#34;&gt;#&lt;/a&gt; TCP 协议&lt;/h1&gt;
&lt;p&gt;TCP 是在不可靠的 IP 层之上实现的可靠的数据传输协议，它主要解决传输的可靠、有序、 无丢失和不重复问题。&lt;/p&gt;
&lt;h2 id=&#34;tcp协议的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp协议的特点&#34;&gt;#&lt;/a&gt; TCP 协议的特点&lt;/h2&gt;
&lt;p&gt;（1）TCP 是面向连接的传输层协议。&lt;br&gt;
（2）每条 TCP 连接只能有两个端点，每条 TCP 连接只能是点对点的（一对一）。&lt;br&gt;
（3）TCP 提供可靠的交付服务，保证传送的数据无差值、部队是、不重复且有序。&lt;/p&gt;
&lt;p&gt;（4）TCP 提供&lt;strong&gt;全双工通信&lt;/strong&gt;，允许通信双方的应用进程在任何时候都能发送数据，为此 TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。&lt;br&gt;
（5）TCP 是面向字节流的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20140609125220296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTE5ODgxMDI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;TCP 报文段各字段的意义：&lt;br&gt;
源端口和目的端口字段：各占 2B，端口是运输层与应用层的版务接口，运输层的复用和分用功能都要通过端口实现。&lt;br&gt;
序号字段：占 4B, TCP 是面向字节流的（即 TCP 传送时是逐个字节传送的），所以 TCP 连接传送的数据流中的每个字节都编上一个序号。序号字段的值指的是本报文段所发送的数据的第一个字节的序号。&lt;br&gt;
确认号字段：占 4B，是期望收到对方的下一个报文段的数据的第一个字节的序号。&lt;br&gt;
数据偏移（即首部长度）：占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。&lt;br&gt;
保留字段：占 6 位，保留为今后使用。&lt;br&gt;
紧急位 URG: URG= 1 时，表明紧急指针字段有效。它告诉系统报文段中有紧急数据，应尽快传送（相当于高优先级的数据）。&lt;br&gt;
确认位 ACK：ACK=1 时确认号字段才有效，ACK=0 时，确认号无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1&lt;br&gt;
 推送位 PSH (Push) ：接收 TCP 收到 PSH=l 的报文段 ，就尽快地交付给接收应用进程 ，而不再等到整个缓存都填满后再向上交付&lt;br&gt;
复位位 RST (Reset) : RST=l 时，表明 TCP 连接中出现严重差错（如主机崩溃或其他原因），必须释放连接 ，然后再重新建立运输连接&lt;br&gt;
同步位 SYN: SYN=l 表示这是一个连接请求或连接接收报文&lt;br&gt;
终止位 FIN (Finish)：用来释放一个连接。 FIN= 1 表明 此报文段的发送方的数据已发送完毕，并要求释放传输连接&lt;br&gt;
窗口字段：占 2B，表示允许对方发送的数据量，单位为字节&lt;br&gt;
校验和：占 2B，校验和 字段检验的范圈包括首部 和数据两部分&lt;br&gt;
紧急指针字段：占 16 位，指出在本报文段中紧急数据共有多少字节（紧急数据 放在本报文段数据的最前面）&lt;br&gt;
选项字段：长度可变，TCP 最初只规定了一种选项，即最大报文段长度&lt;br&gt;
填充字段：使整个首部长度 是 4B 的整数倍&lt;/p&gt;
&lt;h2 id=&#34;tcp连接管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp连接管理&#34;&gt;#&lt;/a&gt; TCP 连接管理&lt;/h2&gt;
&lt;p&gt;TCP 连接的阶段分为三部分：&lt;strong&gt;连接建立、数据传送和连接释放&lt;/strong&gt;。TCP 连接的端点不是主机，不是主机的 IP 地址而是&lt;strong&gt;套接字&lt;/strong&gt;，每条 TCP 连接唯一地被通信的两个端点（即两个套接字）确定。&lt;/p&gt;
&lt;h3 id=&#34;连接的建立三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接的建立三次握手&#34;&gt;#&lt;/a&gt; 连接的建立（三次握手）&lt;/h3&gt;
&lt;p&gt;（1）客户机的 TCP 首先向服务器的 TCP 发送一个连接请求报文段 SYN=1,seq=x。&lt;br&gt;
（2）服务器的 TCP 收到连接请求拫文段后，如同意建立连接，就向客户机发回确认，并为该 TCP 连接分配 TCP 缓存和变量，SYN=1,ACK=1,ack=x+1,seq=y.&lt;br&gt;
（3）当客户机收到确认报文段后，还要向服务器给出确认，并且也要给该连接分配缓存和变量，ACK=1,seq=x+1,ack=y+1.（携带数据）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210220235256399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;连接已经建立时，再次建立会失败&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;syn洪泛攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#syn洪泛攻击&#34;&gt;#&lt;/a&gt; SYN 洪泛攻击&lt;/h3&gt;
&lt;p&gt;SYN 洪泛攻击发生在 OSI 第四层，这种方式利用 TCP 协议的特性，就是三次握手，攻击者发送 TCP SYN，SYN 是 TCP 三次握手中的第一个数据包，而当服务器返回 ACK 后，该攻击者就不对其进行再确认，那这个 TCP 连接就处千挂起状态 也就是所谓的半连接状态，服务器收不到再确认的话，还会重复发送 ACK 给攻击者。&lt;br&gt;
SYN 洪泛攻击会浪费服务器的资源，在服务器上，这些 TCP 连接会因为挂起状态而消耗 CPU 和内存，最后服务器可能死机。&lt;/p&gt;
&lt;h3 id=&#34;连接的释放四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接的释放四次挥手&#34;&gt;#&lt;/a&gt; 连接的释放（四次挥手）&lt;/h3&gt;
&lt;p&gt;（1）客户机向其 TCP 发送一个连接释放拫文段，并停止发送数据，主动关闭 TCP 连接，FIN=1,seq=u.&lt;br&gt;
（2）服务器收到连接释放报文段后即发出确认，ACK=1,seq=v,ack=u+1.&lt;br&gt;
（3）服务器通知客户端 TCP 释放连接，FIN=1,ACK=1,seq=w,ack=u+1.&lt;br&gt;
（4）客户机受到连接释放报文后，发出确认，ACK=1,seq=u+1，ack=w+1。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210220235307287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp可靠传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp可靠传输&#34;&gt;#&lt;/a&gt; TCP 可靠传输&lt;/h2&gt;
&lt;p&gt;TCP 首部的序号字段用来保证数据能有序提交给应用层 ，序号建立在传送的字节流之上 TCP 首部的确认号是期望收到对方的下一个报文段的数据的第一个字节的序号，TCP 默认使用累计确认 ，即 TCP 只确认数据流中至第一个丢失字节为止的字节。TCP 每发送一个报文段 ， 就对这个报文段设置一次计时器。计时器设置的至传时间到期但还未收到确认时，就要重传这一报文段。再次确认某个报文段的 ACK 而发送方先前已经收到过该报文段的确认，&lt;strong&gt;当收到对于某个报文段的，3 个冗余 ACK ， 可以认为该报文段已经丢失&lt;/strong&gt;。这时发送方可以立即对该报文执行重传。&lt;/p&gt;
&lt;h2 id=&#34;tcp流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp流量控制&#34;&gt;#&lt;/a&gt; TCP 流量控制&lt;/h2&gt;
&lt;p&gt;TCP 流量控制基于滑动窗口协议的流量控制机制。接收方根据自己接收缓存的大小 ，动态地调整发送方的发送窗口大小（接收窗口 rwnd) ，限制发送方向网络注入报文的速率发送方根据其对当前网络拥塞程序的估计而确定的窗口值 ，这称为拥塞窗口 cwnd 其大小与网络的带宽和时延有关。&lt;br&gt;
&lt;strong&gt;传输层与数据链路层的区别&lt;/strong&gt;：传输层的流量控制机制定义了端到端用户之间的流量控制，数据链路层的；流量控制机制定义了两个中间的相邻结点的流量控制。而且在传输层滑动窗口可以动态变化，数据链路层的滑动窗口不能动态变化。&lt;br&gt;
&lt;span class=&#34;rainbow&#34;&gt;滑动窗口过小，会产生过多的 ACK；滑动窗口过大，会使路由器变得拥挤，主机可能丢失分组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span ,rainbow&gt;发送窗口 = min {接受窗口，拥塞窗口 /}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;窗口值 1000=1000B&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp拥塞控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp拥塞控制&#34;&gt;#&lt;/a&gt; TCP 拥塞控制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;接收窗口 rwnd&lt;/strong&gt;：接收方根据目前接收缓存大小所许诺的最新窗口值 ， 反映接收方的容量&lt;br&gt;
&lt;strong&gt;拥塞窗口 cwnd&lt;/strong&gt; ：发送方根据自己估算的网络拥塞程度而设置的窗口值 ， 反映网络的当前容量&lt;/p&gt;
&lt;h3 id=&#34;实现机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现机制&#34;&gt;#&lt;/a&gt; 实现机制&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;慢开始&lt;/strong&gt;：每经过一个传输轮次（即往返时延 RTT)，拥塞窗口 cwnd 就会加倍令拥塞窗口 cwnd = 1 即 — 个最大报文段长度 MSS ， 每收到 — 个对新报文段的确认后 ， 将 cwnd 加 1 使分组注入网络的速率更加合理，慢开始一直把拥塞窗口 cwnd 增大到一个规定的慢开始门限 ssthresh （阈值），然后改用拥塞避免算法。&lt;br&gt;
&lt;strong&gt;拥塞避免&lt;/strong&gt;：发送端的拥塞窗口 cwnd 每经过一个往返时延 RTT 就增加一个 MSS 的大小，而不是加倍，cwnd 按线性规律缓慢增长（即加法增大），而当出现 — 次超时（网络拥塞） 时 ， 令慢开始门限 ssthresh 等于当前 cwnd 的 — 半（即乘法减小）。&lt;br&gt;
&lt;strong&gt;快重传&lt;/strong&gt;：当发送方连续收到三个重复的 ACK 报文时 ， 直接噩传对方尚未收到的报文段 ， 而不必等待那个报文段设置的重传计时器超时。&lt;br&gt;
&lt;strong&gt;快恢复&lt;/strong&gt;：发送端收到连续三个冗余 ACK （即重要确认）时 ， 执行 “乘法减小” 算法，把慢开始门限 ssthresh 设置为出现拥塞时发送方 cwnd 的一半。&lt;br&gt;
&lt;strong&gt;网络拥塞的处理&lt;/strong&gt;：发送方检测到超时事件的发生（未按时收到确认 ， 重传计时器超时），就要把慢开始门限 ssthresh 设置为出现拥塞时的发送方的 cwnd 值的一半（但不能小于 2) 然后把拥塞窗口 cwnd 重新设置为 L 执行慢开始算法。&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210220235137474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117101900954.png&#34; alt=&#34;image-20211117101900954&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117101938147.png&#34; alt=&#34;image-20211117101938147&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117102014708.png&#34; alt=&#34;image-20211117102014708&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117102030910.png&#34; alt=&#34;image-20211117102030910&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117102048486.png&#34; alt=&#34;image-20211117102048486&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211117102146824.png&#34; alt=&#34;image-20211117102146824&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2021-11-16T01:16:16.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/14/%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
        <title>网络层</title>
        <link rel="alternate" href="http://example.com/2021/11/14/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
        <content type="html">&lt;h2 id=&#34;网络层功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层功能&#34;&gt;#&lt;/a&gt; 网络层功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;异构网络互联&lt;/strong&gt;（数据链路层和物理层均不同）：物理层和数据链路层中继器只是扩大网络，不能网络互联&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟互联网络&lt;/strong&gt;（也称为逻辑互联网络）是指互联起来的各种物理网络的异构性本来是客观存在的但是通过 IP 就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。这种使用 IP 的虚拟互联网络可以简称为 IP 网络。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由与转发&lt;/strong&gt;：路由器连接的网络，网络层及以下可以不同，网络层以上必须相同&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt;：开环控制（静态），闭环控制（动态）&lt;/p&gt;
&lt;h2 id=&#34;ipv4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4&#34;&gt;#&lt;/a&gt; IPV4&lt;/h2&gt;
&lt;p&gt;IP 分组格式&lt;br&gt;
版本：4 位，指 IP 版本，目前广泛使用的版本号是 4&lt;br&gt;
 首部长度：占 4 位。 基本单位为 4B, 最大值为 60B (15&lt;em&gt;&lt;strong&gt;4B&lt;/strong&gt;) ，最常用的首部长度是 20B&lt;br&gt;
 总长度：占 16 位。 基本&lt;/em&gt;&lt;em&gt;单位为 1B&lt;/em&gt;* 指首部与数据之和的长度最大长度 65535B.&lt;br&gt;
 标识：占 16 位。 是 个计数器用千保证数据报片能够正确组装称为原来的数据报&lt;br&gt;
标志：占 3 位最低位 MF=l 代表分片 中间位 DF=0 代表可以分&lt;br&gt;
片偏移：占 13 位&lt;strong&gt;基本单位为 8B &lt;strong&gt;指出分片后，某片在 原分组中的相对位置。&lt;br&gt;
首部校验和：占 16 位 IP 数据报的首部校验和只校验分组的首部，而不校验数据部分。&lt;br&gt;
生存时间 TTL: 占 8 位保证分组不会在网络中循环&lt;/strong&gt;每次路由转发 TTL-1 当 TTL 为 0 丢弃该分组&lt;/strong&gt;。&lt;br&gt;
协议：占 8 位 指出该分组使用的协议 (&lt;strong&gt;6 为 TCP 协议 17 为 U DP 协议&lt;/strong&gt;）。&lt;br&gt;
源地址字段：占 4B 标识发送发的 IP 地址。&lt;br&gt;
目的地址字段：占 4B 标识接收方的 IP 地址。&lt;/p&gt;
&lt;h3 id=&#34;ip数据报分片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip数据报分片&#34;&gt;#&lt;/a&gt; IP 数据报分片&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;最大传送单元（MTU）&lt;/strong&gt;：一个链路层数据报所能承载在的最大数据量。以太网：1500B，广域网：一般不超过 576B.&lt;strong&gt;IP 数据报分片&lt;/strong&gt;：当数据报长度大于链路 MTU 时，就要对其进行分片传输。分片会在目的地进行组装，不会在中间路由处进行组装。&lt;/p&gt;
&lt;p&gt;标志位含义：&lt;strong&gt;MF (more fragment )&lt;/strong&gt; ：为 1 代表进行了分片。&lt;strong&gt;DF (don’t fragment)&lt;/strong&gt;：为 0 时才可以进行分片。&lt;/p&gt;
&lt;h3 id=&#34;网络层转发分组的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层转发分组的流程&#34;&gt;#&lt;/a&gt; 网络层转发分组的流程&lt;/h3&gt;
&lt;p&gt;(1) 直接交付&lt;/p&gt;
&lt;p&gt;（2）1 不成功，则间接交付&lt;/p&gt;
&lt;p&gt;（3）2 不成功，找特定路由（通常为了控制和测试网络，如&lt;strong&gt;域名服务器&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;（4）3 不成功，则交由默认路由（如&lt;strong&gt;互联网&lt;/strong&gt;）&lt;/p&gt;
&lt;h2 id=&#34;ipv4地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv4地址&#34;&gt;#&lt;/a&gt; IPV4 地址&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210219164153297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210219164231920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;网络地址转换nat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络地址转换nat&#34;&gt;#&lt;/a&gt; 网络地址转换（NAT）&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;普通路由器仅工作在网络层，NAT 路由器还要查看和转换传输层的端口号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;只有管理员能添加 NAT 表，在 NET 找不到对应端口后就要抛弃分组&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211114165914831.png&#34; alt=&#34;image-20211114165914831&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;子网划分与子网掩码cidr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子网划分与子网掩码cidr&#34;&gt;#&lt;/a&gt; 子网划分与子网掩码，CIDR&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;子网划分可平均划分，和变长划分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认路由，路由聚合可用于路由器表项合并&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子网不能全 0 和全 1，子网号全为 0 为本网络号，全为 1 为子网的广播地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用子网掩码的情况下：&lt;br&gt;
（1）一台主机设置 IP 地址的同时必须设置子网掩码。&lt;br&gt;
（2）同属于一个子网的所有主机及路由器的相应端口，必须设置相同的子网掩码。&lt;br&gt;
（3）路由表中必须包含有网络地址，子网掩码和下一跳地址。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;CIDR 把小的网络汇聚成大的网络&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构成超网&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最长前缀匹配&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;ip地址与硬件地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip地址与硬件地址&#34;&gt;#&lt;/a&gt; IP 地址与硬件地址&lt;/h4&gt;
&lt;p&gt;IP 地址是网络层使用的地址，它是分层次等级的。硬件地址是数据链路层使用的地址，它是平面式的。在网络层及网络层之上使用 IP 地址，IP 地址放在 IP 数据报的首部，而 MAC 地址放在 MAC 帧的首部，数据链路层看不见数据报分组中的 IP 地址。&lt;strong&gt;在网络层中的路由器相互传输时使用 IP 地址，当到达目标网络后，使用 MAC 地址查找目标物理主机&lt;/strong&gt;。（路由器由于互联多个网络，因此他不仅有多个 IP 地址，也有多个 MAC 地址。）&lt;/p&gt;
&lt;h4 id=&#34;地址解析协议arp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#地址解析协议arp&#34;&gt;#&lt;/a&gt; 地址解析协议（ARP）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;地址解析协议（ARP）实现了 IP 地址到 MAC 地址的映射&lt;/strong&gt;。每台主机都设有一个 ARP 高速缓存，用来存放本局域网上各主机和路由器的 IP 地址到 MAC 地址的映射表，称为 ARP 表。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;ARP 表上没有找到物理地址，目的 MAC 地址就用 ff-ff-ff-ff&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ARP 的 4 种典型情况总结如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）发送方是主机时，要把 IP 数据报发送到本网络上的另一台主机：这时用 ARP 找到目的主机的硬件地址&lt;br&gt;
（2）发送方是主机时，要把 IP 数据报发送到另一个网络上的一台主机 这时用 ARP 找到本网络上的一个路由器的硬件地址，剩下的工作由这个路由器来完成。&lt;br&gt;
（3）发送方是路由器时，要把 IP 数据报转发到本网络上的 — 台主机，这时用 ARP 找到目的主机的硬件地址&lt;br&gt;
（4）发送方是路由器时，要把 IP 数据报转发到本网络上的 — 台主机：这时用 ARP 找到本网络上的一个路由器的硬件地址，剩下的工作由这个路由器来完成。&lt;/p&gt;
&lt;h4 id=&#34;动态主机配置协议dhcp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态主机配置协议dhcp&#34;&gt;#&lt;/a&gt; 动态主机配置协议（DHCP）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;DHCP 是应用层协议，它是基于 UDP 的&lt;/strong&gt;。使用&lt;strong&gt;客户 / 服务器模式&lt;/strong&gt;，通过&lt;strong&gt;广播方式交互&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动态主机配置协议（DHCP）实现过程如下：&lt;br&gt;
（1）DHCP 客户机广播 “DHCP 发现” 消息，试图找到网络中的 DHCP 服务器，以便从 DHCP 服务器中获得一个 IP 地址。&lt;br&gt;
（2）DHCP 服务器收到 DHCP 发现 消息后，向网络中广播，DHCP 提供 “消息，其中包括提供 DHCP 客户机的 IP 地址和柜关配置信息。&lt;br&gt;
（3）DHCP 客户机收到 DHCP 提供消息，如果接收 DHCP 服务器所提供的相关参数，那么通过广播 DHCP 请求消息向 DHCP 服务器请求提供 IP 地址。&lt;br&gt;
（4）DHCP 服务器广播，DHCP 确认消息，将 IP 地址分配给 DHCP 客户机。&lt;br&gt;
DHCP 服务器分配给 DHCP 客户的 IP 地址是&lt;strong&gt;临时的&lt;/strong&gt;，因此 DHCP 客户只能在一段有限的时间内使用这个分配到的 IP 地址 DHCP 的客户端和服务器端需要通过广播方式来进行交互。&lt;/p&gt;
&lt;h4 id=&#34;网际控制报文协议icmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网际控制报文协议icmp&#34;&gt;#&lt;/a&gt; 网际控制报文协议（ICMP）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;ICMP 差错报告报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终点不可达&lt;/strong&gt;：当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。&lt;br&gt;
&lt;strong&gt;源点抑制&lt;/strong&gt;：当路由器或主机由于&lt;strong&gt;拥塞而丢弃数据&lt;/strong&gt;报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间超过&lt;/strong&gt;：当路由器收到生存时间 &lt;strong&gt;(TTL) 为零&lt;/strong&gt;的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。&lt;br&gt;
&lt;strong&gt;参数问题&lt;/strong&gt;：当路由器或目的主机收到的数据报的&lt;strong&gt;首部中有的字段的值不正确&lt;/strong&gt;时，就丢弃该数据报，并向源点发送参数问题报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;改变路由（重定向）&lt;/strong&gt;：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不应发送 ICMP 差错报告报文的情况有以下四种情况&lt;/strong&gt;：&lt;br&gt;
（1）对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。&lt;br&gt;
（2）对第 — 个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。&lt;/p&gt;
&lt;p&gt;（3）对具有组播地址的数据报都不发送 ICMP 差错报告报文。&lt;br&gt;
（4）对具有特殊地址（如 127.0.0.0 或 0.0.0.0) 的数据报不发送 ICMP 差错报告报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICMP 询问报文&lt;/strong&gt;有 4 种类型：回送请求和回答报文、时间戳请求和回答报文、掩码地址请求和回答报文、路由器询问和通告报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ICMP 常见的两个应用是分组网间探测 PING 和 Traceroute&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt; 分组网间探测 PING&lt;/strong&gt;（工作在应用层）：使用了 ICMP 回送请求和回答报文，用来测试两台主机之间的连通性。&lt;br&gt;
&lt;strong&gt;Traceroute&lt;/strong&gt;（在网络层）：使用了 ICMP 时间超过报文，用来跟踪分组经过的路由。&lt;/p&gt;
&lt;h2 id=&#34;ipv6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ipv6&#34;&gt;#&lt;/a&gt; IPV6&lt;/h2&gt;
&lt;p&gt;（1）&lt;strong&gt;更大的地址空间 IPv6 将地址从 IPv4 的 32 位增大到了 128 位&lt;/strong&gt;。&lt;br&gt;
（2）扩展的地址层次结构。&lt;br&gt;
（3）&lt;strong&gt;扩展首部&lt;/strong&gt;&lt;br&gt;
（4）改进的选项。&lt;br&gt;
（5）允许协议继续扩充。&lt;br&gt;
（6）支持&lt;strong&gt;即插即用&lt;/strong&gt;（即自动配置）。&lt;br&gt;
（7）支持资源的预分配。&lt;br&gt;
（8）&lt;strong&gt;IPv6 只有在包的源结点才能分片，是端到端的，传输路径中的路由器不能分片。&lt;/strong&gt;&lt;br&gt;
（9）&lt;strong&gt;IPv6 首部长度必须是 8B 的整数倍，而 IPv4 首部是 4B 的整数倍。&lt;/strong&gt;&lt;br&gt;
（10）增大了安全性。 身份验证和保密功能是 IPv6 的关键特征。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IPV6 地址缩写&lt;/strong&gt;：当 16 位域的开头由一些 0 时，可以采用一种缩写表示法，但在域中必须至少有一个数字。当有相继的 0 值域时，还可以进一部缩写，将这些域可以用双冒号进行缩写（::）.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;IPV6 数据报的目的地址可以是以下三种基本类型地址之一：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;单播&lt;/strong&gt;。单播就是传统的点对点通信。&lt;br&gt;
（2）&lt;strong&gt;多播&lt;/strong&gt;。多播是一点对多点的通信，分组被交付到一组计算机的每台计算机。&lt;br&gt;
（3）&lt;strong&gt;任播&lt;/strong&gt;。这是 IPV6 新增加的一种类型。任播的目的站是一组计算机，但数据报在交付时只交付其中的一台计算机，通常是距离最近的一台计算机。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;IPV4 向 IPV6 过渡可以采用双协议栈和隧道技术两种策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双协议栈&lt;/strong&gt;：双协议栈技术是指在一台设备上同时装有 IPV4 和 IPV6 协议栈，那么这台设备既能和 IPV4 网络通信，又能和 IPV6 网络通信。&lt;br&gt;
&lt;strong&gt;隧道技术&lt;/strong&gt;：将整个 IPv6 数据报封装到 IPv4 数据报的数据部分，使得 IPv6 数据报可以在 IPv4 网络的隧道中传输。&lt;/p&gt;
&lt;h2 id=&#34;路由协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由协议&#34;&gt;#&lt;/a&gt; 路由协议&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;自治系统（AS）&lt;/strong&gt;：单一技术管理下的一组路由器，这些路由器使用一种 AS 内部的路由选择协议和共同度量来确定分组在该 AS 内的路由。同时还使用一种 AS 之间的路由选择协议来确定分组在 AS 之间的路由。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;内部网关协议(IGP，域内路由选择，AS内）:在一个自治系统内部使用的路由选择协议，目前这类路由选择协议使用得最多，如RIP和OSPF.
外部网关协议(EGP，域间路由选择，AS外）:源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时需要使用一种协议将路由选择信息传递到另一个自治系统中。目前使用最多的外部网关协议是BGP-4.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;路由信息协议rip应用层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由信息协议rip应用层&#34;&gt;#&lt;/a&gt; 路由信息协议（RIP）（应用层）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路由信息协议（RIP）&lt;/strong&gt;：内部网关协议 (IGP) 中最先得到广泛应用的协议。RIP 是一种分布式的，基于距离向量的路由选择协议，其最大的优点就是简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RIP 的规定：&lt;/strong&gt;&lt;br&gt;
1. 网络中的每个路由器都要维护从他自身到其他每个目的网络的距离记录。&lt;br&gt;
2. 距离也称跳数，规定从一个路由器到直接连接网络的距离（跳数）为 1。&lt;br&gt;
3.RIP 认为好的路由就是它通过的路由器的数目少，即优先选择跳数小的路径。&lt;br&gt;
4.&lt;strong&gt;RIP 允许一条路径最多只能包含 15 个路由器，因此距离等于 16 时，它表示网络不可达&lt;/strong&gt;。&lt;br&gt;
5.RIP 默认在任意两个使用 RIP 的路由器&lt;strong&gt;每 30 秒广播 — 次&lt;/strong&gt; RIP 路由更新信息，以便自动建立并维护路由表，&lt;strong&gt;超过 180 秒没收到更新，则直接更新&lt;/strong&gt;。&lt;br&gt;
6. 在 RIP 中不支持子网掩码的 RIP 广播，所以 RIP 中每个网络的子网掩码必须相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RIP 的特点&lt;/strong&gt;：&lt;br&gt;
（1）实现简单，开销小，收敛过程快。&lt;br&gt;
（2）网络规模小，16&lt;br&gt;
（3）坏消息传的慢&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RIP 是应用层协议，他使用 UDP 传送数据（端口 520）。RIP 选择的路径不一定是时间最短的，但一定是具有最少路由器的路径&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;距离向量算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#距离向量算法&#34;&gt;#&lt;/a&gt; 距离向量算法&lt;/h3&gt;
&lt;p&gt;关键点：1. 原来路由表有目的地址 N，且下一跳路由器地址是 X，则替换（不管变大变小，都以实时为准 c）&lt;/p&gt;
&lt;p&gt;2. 只有收到的距离&lt;strong&gt;小于&lt;/strong&gt;原来的距离才替换，&lt;strong&gt;等于&lt;/strong&gt;不替换&lt;/p&gt;
&lt;h3 id=&#34;放最短路径优先协议ospf网络层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#放最短路径优先协议ospf网络层&#34;&gt;#&lt;/a&gt; 放最短路径优先协议（OSPF）（网络层）&lt;/h3&gt;
&lt;p&gt;使用分布式链路状态路由算法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSPF 的特点&lt;/strong&gt;&lt;br&gt;
（1）OSPF 对不同的链路可根据 IP 分组的不同服务类型 (TOS) 而设置成不同的代价。&lt;br&gt;
（2）OSPF 对于不同类型的业务可计算出不同的路由，十分灵活。&lt;br&gt;
（3）多路径间负载平衡：如果到同 — 个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径。&lt;br&gt;
（4）所有在 OSPF 路由器之间交换的分组都具有鉴别功能，因而保证了仅在可信赖的路由器之间交换链路状态信息。&lt;br&gt;
（5）支持可变长度的子网划分和无分类编址 CIDR。&lt;br&gt;
（6）每个链路状态都带上 — 个 32 位的序号，序号越大，状态就越新。&lt;/p&gt;
&lt;p&gt;​	（7）每隔一段时间刷新数据库中的链路状态&lt;/p&gt;
&lt;p&gt;.&lt;strong&gt;OSPF 的五种分组类型&lt;/strong&gt;&lt;br&gt;
（HELLO）问候分组：用来发现和维持邻站的可达性。&lt;br&gt;
数据库描述分组：向邻站给出自己的链路状态数据库中的所有链路状态项目的摘要信息。&lt;br&gt;
链路状态请求分组：向对方请求发送某些链路状态项目的详细信息。&lt;br&gt;
链路状态更新分组：用洪泛法对全网更新链路状态。&lt;br&gt;
链路状态确认分组：对链路更新分组的确认。&lt;/p&gt;
&lt;h3 id=&#34;边界网关协议bgp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#边界网关协议bgp&#34;&gt;#&lt;/a&gt; 边界网关协议（BGP）&lt;/h3&gt;
&lt;p&gt;** 边界网关协议（BGP）** 是不同自治系统的路由器之间交换路由信息的协议，是 — 种外部网关协议边界网关协议常用于互联网的网关之间，BGP 采用的是路径向量路由选择协议，它是一个应用层协议，&lt;strong&gt;基于 TCP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打开 (Open) 报文&lt;/strong&gt;：用来与相邻的另 — 个 BGP 发言人建立关系。&lt;br&gt;
&lt;strong&gt;更新 (Update) 报文&lt;/strong&gt;：用来发送某一路由的信息，以及列出要撤销的多条路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保活 (Keepalive) 报文&lt;/strong&gt;：用来确认打开报文并周期性地证实邻站关系。&lt;br&gt;
&lt;strong&gt;通知 (Notification) 报文&lt;/strong&gt;：用来发送检测到的差错。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210220105520173.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由算法&#34;&gt;#&lt;/a&gt; 路由算法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;静态路由算法&lt;/strong&gt;：由网络管理员手工配置的路由信息。对于简单的小型网络可以采用静态路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态路由算法&lt;/strong&gt;：改善网络的性能并有助于流量控制，但是算法过于复杂，会增加网络的负担，对动态变化的反应太快而引起振荡，或反应太慢而影晌网络路由的一致性。&lt;/p&gt;
&lt;h2 id=&#34;ip组播屁都没讲清楚真的笑了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip组播屁都没讲清楚真的笑了&#34;&gt;#&lt;/a&gt; IP 组播（屁都没讲清楚，真的笑了）&lt;/h2&gt;
&lt;p&gt;组播机制是让源计算机一次发送的单个分组可以抵达用一个组地址标识的若干目标主机，并被他们正确接收。组播仅应用于 UDP。&lt;strong&gt;组播需要路由器的支持才能实现，能够运行组播协议的路由器称为组播路由器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;播实现过程：主机使用一个称为 IGMP 的协议加入组播组，使用该协议通知本地网络上的路由器关于要接收发送给某个组播组的分组的愿望，通过扩展路由器的路由选择和转发功能，可以在许多路由器互联的支持硬件组播的网络上面实现因特网组播。组播技术使得数据只需发送一次就可发送到所有接收者，大大减轻了网络的负载和发送者的负担。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210220111938490.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ip组播地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip组播地址&#34;&gt;#&lt;/a&gt; IP 组播地址&lt;/h3&gt;
&lt;p&gt;IP 组播地址使用&lt;strong&gt; D 类地址格式&lt;/strong&gt;，D 类地址的前四位是 1110，因此 D 类地址范围是 224.0.0.0~239.255.255.255，每个 D 类 IP 地址标志一个组播组。&lt;strong&gt;并不是所有 D 类地址都可以用，有些用于永久组播&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;组播数据报和一般的 IP 数据报的区别是，&lt;strong&gt;前者使用 D 类 IP 地址作为目的地址，并且首部中的协议字段值为 2，表明使用 IGMP&lt;/strong&gt;。需要注意的是：&lt;/p&gt;
&lt;p&gt;1. 组播数据报也是 “尽最大努力交付”，不提供可靠交付。&lt;br&gt;
2. 组播地址只能用于目的地址，不能用于源地址。&lt;br&gt;
3. 对组播数据报不产生 ICMP 差错报文，因此若在 PING 命令后面键入组播地址，将永远不会收到回应。&lt;br&gt;
4. 并非所有的 D 类地址都可以用作组播地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP 组播可以分为两种一种在本局域网上进行硬件组播，另一种则在因特网的范围内进行组播&lt;/strong&gt;。在因特网上进行组播的最后阶段，还是要把组播数据报在局域网上用硬件组播交付给组播组内的所有成员。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211115191927230.png&#34; alt=&#34;image-20211115191927230&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后 23 位进行映射&lt;/strong&gt;硬件地址的映射关系不是唯一的，因此收到组播数据报的主机，还要在 IP 层利用软件进行过滤，把不是本主机要接收的数据报丢弃。&lt;/p&gt;
&lt;h3 id=&#34;igmp与组播路由算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#igmp与组播路由算法&#34;&gt;#&lt;/a&gt; IGMP 与组播路由算法&lt;/h3&gt;
&lt;p&gt;IGMP 为 TCP/IP 协议栈的一部分其工作可以分为两个阶段：&lt;br&gt;
&lt;strong&gt;第一个阶段&lt;/strong&gt;：主机加入新的组播组时，该主机向组播组的组播地址发送一个 IGMP 报文，声明要成为该组的成员。本地的组播路由器收到 IGMP 报文后，将组成员关系转发给因特网上的其他组播路由器。&lt;br&gt;
&lt;strong&gt;第二个阶段&lt;/strong&gt;：本地组播路由器周期性地探询本地局域网上的主机，以便知道这些主机是否仍继续是组的成员。只要对某个组有一台主机响应，那么组播路由器就认为这个组是活跃的。一个组在经过几次的探询后仍然没有一台主机响应时，则不再将该组的成 员关系转发给其他的组播路由器。&lt;br&gt;
&lt;strong&gt;实现因特网组播的路由算法&lt;/strong&gt;：第一种是基于链路状态的路由选择，第二种是基于距离 - 向量的路由选择，第三种可以建立在任何路由器协议之上，因此成为协议无关的组播（PIM）。&lt;br&gt;
&lt;strong&gt;为了避免环路，构建组播转发树&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;移动ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动ip&#34;&gt;#&lt;/a&gt; 移动 IP&lt;/h2&gt;
&lt;p&gt;基于 IPV4 定义的三种功能实体：移动节点、本地代理和外部代理。&lt;br&gt;
&lt;strong&gt;移动结点&lt;/strong&gt; ：具有永久 IP 地址的移动结点。&lt;br&gt;
&lt;strong&gt;本地代理&lt;/strong&gt;：在 — 个网络环境中，— 个移动结点的永久 “居所” 被称为归属网络，在归属网络中代表移动结点执行移动管理功能的实体称为归属。&lt;br&gt;
&lt;strong&gt;外部代理&lt;/strong&gt;：在外部网络中帮助移动结点完成移动管理功能的实体称为外部代理。&lt;/p&gt;
&lt;h3 id=&#34;移动ip通信过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动ip通信过程&#34;&gt;#&lt;/a&gt; 移动 IP 通信过程&lt;/h3&gt;
&lt;p&gt;1. 移动结点在本地网时，按传统的 TCP/IP 方式进行通信（在本地网中有固有的地址 ）。&lt;br&gt;
2. 移动结点到一个外地网络时，移动结点向本地代理注册当前的位置地址，即转交地址。&lt;br&gt;
3. 本地代理接收来自转交地址的注册后，会构建一条通向转交地址的隧道，本地地址会将截获的信息通过隧道发送给转交地址处&lt;br&gt;
 4. 在转交地址处解除隧道封装，恢复成原来 IP 分组，最后送到移动结点。&lt;br&gt;
5. 移动结点在外网通过外网的路由器或外部代理向通信对端发送 IP 数据包。&lt;br&gt;
6. 移动结点来到另 — 个外网时，只需向本地代理更新注册的转交地址，就可继续通信。&lt;br&gt;
7. 移动结点回到本地网时，移动结点向本地代理注销转交地址，这时移动结点又将使用传统的 TCP/IP 方式进行通信。&lt;/p&gt;
&lt;h2 id=&#34;网络层设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络层设备&#34;&gt;#&lt;/a&gt; 网络层设备&lt;/h2&gt;
&lt;h3 id=&#34;路由器工作过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由器工作过程&#34;&gt;#&lt;/a&gt; 路由器工作过程&lt;/h3&gt;
&lt;p&gt;当源主机和目标主机在同一个网络上时，直接交付无需经过路由器。&lt;br&gt;
源主机和目标主机不在同一个网络上时，路由器按照转发表将数据报转发给下一个路由器，即间接交付。&lt;/p&gt;
&lt;h3 id=&#34;路由器功能组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由器功能组成&#34;&gt;#&lt;/a&gt; 路由器功能组成&lt;/h3&gt;
&lt;p&gt;从结构上看，路由器由路由选择部分和分组转发部分组成。&lt;br&gt;
路由选择部分也称控制部分，&lt;strong&gt;其核心构件是路由选择处理机&lt;/strong&gt;。路由选择处理机的任务是：根据选定的路由选择协议构造出路由表和其他相邻路由器交换路由信息然后更新和维护路由表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分组转发部分由三部分组成：交换结构、一组输入端口和一组输出端口&lt;/strong&gt;。输入端口从物理层接收到的比特流中提取出链路层帧，进而从帧中提取出网络层数据报。输出端口则将数据报变为比特流发送到物理层。&lt;strong&gt;交换结构是路由器的关键部件&lt;/strong&gt;，它根据转发表对分组进行处理，将从输入口进入的分组从一个合适的输出端口转发出去。&lt;strong&gt;有三种常用的交换方法：通过存储器进行交换、通过总线进行交换和通过互联网络进行交换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;路由器主要完成两个功能：&lt;strong&gt;一是分组转发，二是路由计算&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;路由器与网桥的-区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由器与网桥的-区别&#34;&gt;#&lt;/a&gt; 路由器与网桥的 区别&lt;/h3&gt;
&lt;p&gt;路由器与网桥的重要区别是：网桥与高层协议无关，路由器是面向协议的，依据网络地址进行操作，并进行路径选择、分段帧格式转换、对数据报的生存时间和流量进行控制等。&lt;/p&gt;
&lt;h3 id=&#34;路由表与路由转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由表与路由转发&#34;&gt;#&lt;/a&gt; 路由表与路由转发&lt;/h3&gt;
&lt;p&gt;路由表（&lt;strong&gt;软件&lt;/strong&gt;）是根据路由选择算法得出的，主要用途是路由选择。标准的路由表有 4 个部分：目的网络的 IP 地址、子网掩码、下一跳 IP 地址和接口。&lt;/p&gt;
&lt;p&gt;转发与路由选择的区别：转发（&lt;strong&gt;硬件或软件&lt;/strong&gt;）指路由器根据转发表把收到的 IP 数据报从合适的端口转发出去，仅涉及一个路由器。而路由选择涉及很多路由器，路由表是许多路由器协同工作的结果。&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2021-11-14T02:13:07.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
        <title>数据链路层</title>
        <link rel="alternate" href="http://example.com/2021/11/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
        <content type="html">&lt;h2 id=&#34;数据链路层的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据链路层的功能&#34;&gt;#&lt;/a&gt; 数据链路层的功能&lt;/h2&gt;
&lt;h4 id=&#34;概要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概要&#34;&gt;#&lt;/a&gt; 概要&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;将物理层提供的可能出错的物理连接改造为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;为网络层提供的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为网络层提供的服务&#34;&gt;#&lt;/a&gt; 为网络层提供的服务&lt;/h4&gt;
&lt;p&gt;无确认的无连接服务：适用于实时通信或误码率低的通信信道。如：以太网。&lt;/p&gt;
&lt;p&gt;有确认的无连接服务：该服务适用于误码率较高的通信信道无线通信。&lt;/p&gt;
&lt;p&gt;有确认的面向连接服务：帧传翰过程分为三个阶段：&lt;strong&gt;数据链路、传输帧、释放数据链路&lt;/strong&gt;，目的计算机对收到的每一帧都要给出确认，&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;没有无确认的面向连接服务&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;帧定界-帧同步与透明传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#帧定界-帧同步与透明传输&#34;&gt;#&lt;/a&gt; 帧定界、帧同步与透明传输&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;帧定界&lt;/strong&gt;：首部尾部的控制信息，它们的一个重要作用就是确定帧的界限。&lt;br&gt;
&lt;strong&gt;帧同步&lt;/strong&gt;：接收方应能从接受到的二进制比特流中区分出帧的起始和终止。&lt;br&gt;
&lt;strong&gt;透明传输&lt;/strong&gt;：采取有效的措施解决误认为 “传输结束” 而丢弃后面数据的问题。就是不管所传数据是什么样的比特组合，都应当能在链路上传送。&lt;/p&gt;
&lt;h4 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;问题引入&lt;/strong&gt;：收发双方各自的工作速率和缓存空间的差异，出现发送方的发送能力大于接收方的接收能力的现象，如不对其进行流量控制就会导致数据丢失。&lt;strong&gt;流量控制&lt;/strong&gt;就是通过控制发送方的发送速度，从而实现流量控制。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;数据链路层控制相邻两点之间的流量，运输层控制源端到目的端的流量&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;差错控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差错控制&#34;&gt;#&lt;/a&gt; 差错控制&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;差错控制&lt;/strong&gt;就是使发送方确定接收方是否正确收到由其发送的数据的方法。&lt;/p&gt;
&lt;p&gt;位错（数据中的某些位出现错误） CRC 循环冗余码（解决位错）&lt;/p&gt;
&lt;p&gt;帧错（帧的丢失、重复或时序等错误） 自动重传请求 ARQ（解决帧错）。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;数据链路层的协议不包括 {.gap} 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;定义数据格式&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;为终端节点隐藏物理传输的细节&lt;/li&gt;
&lt;li&gt;提供节点之间的可靠传输&lt;/li&gt;
&lt;li&gt;控制对物理传输介质的访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;组帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组帧&#34;&gt;#&lt;/a&gt; 组帧&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;字符计数法&lt;/strong&gt;就是指在帧头部使用一个计数字段来标明帧内字符数&lt;/p&gt;
&lt;p&gt;该方法的缺点就是如果计数字段出错，收发双方将失去同步从而导致错误。&lt;/p&gt;
&lt;p&gt;计数值要加上自身的一位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符填充法使用特定字符来定界一帧的开始和结束&lt;/strong&gt;。例如：控制字符&lt;strong&gt; SOH&lt;/strong&gt; 放在帧的最前面，表示帧的首部开始，控制字符&lt;strong&gt; EOT&lt;/strong&gt; 表示帧的结束。当信息位出现特殊字符时可以在特殊字符前添加一个转义字符&lt;strong&gt; ESC&lt;/strong&gt; 加以区分。&lt;/p&gt;
&lt;p&gt;复杂，不兼容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;零比特填充的首尾标志法（目前常用）：使用一个特定的比特模式，即 01111110 来标志一帧的开始和结束&lt;/strong&gt;。在发送信息时，遇到 5 个连续的 1 就自动在后面加 0。当收到信息时，遇到 5 个连续的 1 就自动在后面减 0。&lt;/p&gt;
&lt;p&gt;优点：零比特填充法很容易由硬件来实现，性能优于字符填充法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;违规编码法&lt;/strong&gt;（目前常用）：在&lt;strong&gt;物理层进行比特编码时&lt;/strong&gt;，曼彻斯特编码中比特 ”1&amp;quot;编码成 “高－高 “ 电平，比特”0&amp;quot; 编码成 “低－低 “ 电平（由于正常情况下不会出现这种情况，所以可以用这个办法来进行定界）&lt;/p&gt;
&lt;h2 id=&#34;差错控制-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差错控制-2&#34;&gt;#&lt;/a&gt; 差错控制&lt;/h2&gt;
&lt;h3 id=&#34;检错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检错编码&#34;&gt;#&lt;/a&gt; 检错编码&lt;/h3&gt;
&lt;h4 id=&#34;奇偶检验码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#奇偶检验码&#34;&gt;#&lt;/a&gt; 奇偶检验码&lt;/h4&gt;
&lt;p&gt;奇偶校验码由 n-1 位数据和 1 位校验位组成，校验位用于调节发送信息中的 1 的个数是偶数还是奇数。&lt;/p&gt;
&lt;h4 id=&#34;循环冗余码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环冗余码&#34;&gt;#&lt;/a&gt; 循环冗余码&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211112195334860.png&#34; alt=&#34;image-20211112195334860&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;除数最高位和最低位必须为 1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;凡是接收端数据链路层接受的帧都没有差错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CRC 有纠错功能，只是数据链路层仅使用它的检错功能&lt;/p&gt;
&lt;h3 id=&#34;纠错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纠错编码&#34;&gt;#&lt;/a&gt; 纠错编码&lt;/h3&gt;
&lt;p&gt;在数据通信的过程中，有一个方法就是添加&lt;strong&gt;足够的冗余信息&lt;/strong&gt;，使得接收方能够推理出发送方实际传送的比特串。&lt;strong&gt;常见的纠错编码就是海明码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（1）确定海明码的位数：&lt;br&gt;
设 n 为有效信息的位数，k 为校验位的位数，则信息位 n 和校验位 k 应满足 n+k&amp;lt;=2^k-1（若要检测两位错，则需再增加 1 位检验位，即 k+1 位）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095428952.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）确定校验位的分布&lt;br&gt;
规定校验位在海明位号为 2^（i-1）位詈上，其余各位为信息位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095543512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）分组形成校验关系&lt;br&gt;
被校验数据位的海明位号等于校验该数位的各校验位海明位号之和。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095731114.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）校验位取值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095920301.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;    校验位的值为对应组的所有位求异或。&lt;/p&gt;
&lt;p&gt;（5）海明码的校验原理&lt;br&gt;
每个校验组分别利用校验位和参与形成该校验位的信息位进行奇偶校验检查，构成 k 个校验方程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095935551.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;若s3s2s1的值为000，则说明无措，否则说明有错，而且这个数就是错误的位号，如001，就说明第一位出错即H1出错。直接将该位取反就达到纠错的目的了
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;海明码纠错 d 位，需要码距为 2d+1 的编码方案，检错 d 位，需要码距 d+1&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;流量控制和可靠传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制和可靠传输&#34;&gt;#&lt;/a&gt; 流量控制和可靠传输&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;停止 — 等待流量控制基本原理&lt;/strong&gt;：每次只允许发送一帧，然后就陷入等待接收方确认信息的过程中，如果接收方不反馈应答信号，那么发送方必须一致等待，因而传输效率很低。&lt;/p&gt;
&lt;h3 id=&#34;滑动窗口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#滑动窗口&#34;&gt;#&lt;/a&gt; 滑动窗口&lt;/h3&gt;
&lt;p&gt;发送窗口，接受窗口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;滑动窗口机制特点&lt;/strong&gt;：&lt;br&gt;
1. 只有接收窗口向前滑动时，发送窗口才有可能向前滑动。&lt;br&gt;
2. 接收窗口的大小为 1 时，可保证帧的有序接收。&lt;br&gt;
3. 数据链路层的滑动窗口协议中，窗口的大小在传输过程中是固定的。&lt;/p&gt;
&lt;h3 id=&#34;单针滑动窗口与停止等待协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单针滑动窗口与停止等待协议&#34;&gt;#&lt;/a&gt; 单针滑动窗口与停止 — 等待协议&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;发送窗口和接收窗口为 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一种是接受时帧已经遭到破坏&lt;/strong&gt;，解决方法是装备计时器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;另一种是数据帧正确而确认帧被破坏&lt;/strong&gt;。解决方法：发送方重传已被接受的数据帧，接收方接收到后丢弃，并重传一个确认帧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;帧缓冲区&lt;/strong&gt;：设立目的是为了超时重发和判定重复帧的需要。帧缓冲区实现方法：发送端在发送完数据帧时，必须在其发送缓存中保留此数据帧的副本，这样才能在出差错时进行重传，只有在收到对方发来的确认帧 ACK 时，方可清除此副本。&lt;/p&gt;
&lt;h3 id=&#34;多帧滑动窗口与后退n帧协议gbn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多帧滑动窗口与后退n帧协议gbn&#34;&gt;#&lt;/a&gt; 多帧滑动窗口与后退 N 帧协议（GBN）&lt;/h3&gt;
&lt;p&gt;发送窗口大于 1，接收窗口为 1&lt;/p&gt;
&lt;p&gt;接收方只会按序接收数据帧，而确认帧发送序列号最大的，按序到达的帧（累计确认，偶尔捎带确认）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后退 N 帧协议&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：连续发送数据帧而提高了信道的利用率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：若信道的传输质量很差导致误码率较大时，后退 N 帧协议不一定优于停止 - 等待协议。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;若采用 n 比特对帧编号，那发送窗口的尺寸最大值为 2^n-1，否则会造成接受方无法识别新帧和旧帧&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;多帧滑动窗口与选择重传协议sr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多帧滑动窗口与选择重传协议sr&#34;&gt;#&lt;/a&gt; 多帧滑动窗口与选择重传协议（SR）&lt;/h3&gt;
&lt;p&gt;发送窗口大于等于 1，接收窗口大于等于 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择重传协议&lt;/strong&gt;：每个发送缓冲区对应一个计时器，当计时器超时时，缓冲区的帧就会重传。接收方会设置具有相当容量的缓冲区来暂存那些未按需正确收到的帧。一旦接受方怀疑帧出错，就会发送否定帧 NAK 给发送方要求发送方对 NAK 中指定的帧进行重传。&lt;/p&gt;
&lt;p&gt;[接受窗口 + 发送窗口 &amp;lt;=2^n&lt;/p&gt;
&lt;p class=&#34;label info&#34;&gt;接收窗口 &amp;lt;=2]&lt;/p&gt;
&lt;p&gt;优点：提高了信道的利用率。&lt;/p&gt;
&lt;p&gt;缺点：需要缓存空间来存储数据。&lt;/p&gt;
&lt;p&gt;[设发送周期（从开始发送数据到第一个确认帧为止）为 T，发送 L 比特数据，传输速率为 C，信道利用率 =(L/C)/T&lt;/p&gt;
&lt;p&gt;(要注意区分停止 - 等待和其他两个的区别，有坑)&lt;/p&gt;
&lt;p class=&#34;label info&#34;&gt;信道吞吐量 = 信道利用率 * 发送速率]&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;确认帧是期望收到的下一个帧&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;介质访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介质访问控制&#34;&gt;#&lt;/a&gt; 介质访问控制&lt;/h2&gt;
&lt;h3 id=&#34;信道划分介质访问控制不会冲突静态划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信道划分介质访问控制不会冲突静态划分&#34;&gt;#&lt;/a&gt; 信道划分介质访问控制（不会冲突）（静态划分）&lt;/h3&gt;
&lt;p&gt;网络负载重，信道效率高。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;频分多路复用（FDM）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是一种将多路基带信号调制到不同频率载波上，再叠加形成一个复合信号的多路复用技术。充分利用了传输介质的带宽（&lt;strong&gt;所有子信道的带宽之和不能超过信道的总带宽&lt;/strong&gt;），但是需要在相邻信道之间加入保护频带防止子信道相互干扰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时分多路复用&lt;/strong&gt; (TMD)&lt;/p&gt;
&lt;p&gt;是将一条物理通道按时间分成若干时间片，轮流地分配给多个信号使用。但是由于计算机数据的突发性，用户对子信道的利用率不高。&lt;strong&gt;统计时分多路复用&lt;/strong&gt;（&lt;strong&gt;STDM&lt;/strong&gt;）采用 STDM 帧，STDM 帧不固定分配时隙 ，而按需动态地分配时隙，提高了线路的利用率。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;4 用户，TMD 每人最高速率 1，STDM 是 4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;现在计算机网络更多使用 TDM 而非 FDM，因为 TDM 可用于数字传输&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;波分多路复用&lt;/strong&gt;（WDM）&lt;/p&gt;
&lt;p&gt;在一根&lt;strong&gt;光纤&lt;/strong&gt;中传输多种不同波长的&lt;strong&gt;光信号&lt;/strong&gt;由于波长（频率）不同 ，各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;码分多路复用&lt;/strong&gt;：（CDM）&lt;/p&gt;
&lt;p&gt;使用不同的编码来区分各路原始信号的一种复用方式，与 FDM 与 TDM 不同，它既共享信道的频率，又共享时间。&lt;br&gt;
码分多址（CDMA）：每个比特时间划分为 m 个短的时间槽，称为码片。通常 m 的值为 64 或者 128，每个站点被指派一个唯一的码片序列，发送 1 时，站点发送码片序列，发送 0 时，站点发送码片序列的反码。当两个或多个站点发送数据时，各路数据在信道中线性相加，为从信道中分离出各路信号，各个站点的码片序列&lt;strong&gt;相互正交&lt;/strong&gt;，从而从信道中分离出各路信号。&lt;/p&gt;
&lt;h3 id=&#34;随机访问介质访问控制会冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#随机访问介质访问控制会冲突&#34;&gt;#&lt;/a&gt; 随机访问介质访问控制（会冲突）&lt;/h3&gt;
&lt;p&gt;所有用户能根据自己的意愿随机地发送信息，占用信道全部速率。&lt;/p&gt;
&lt;p&gt;网络负载重时，冲突开销高&lt;/p&gt;
&lt;p&gt;网络负载轻，信道利用率高&lt;/p&gt;
&lt;h4 id=&#34;aloha协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aloha协议&#34;&gt;#&lt;/a&gt; ALOHA 协议&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;纯 ALOHA 协议&lt;/strong&gt;：当网络中的任何一个站点需要发送数据时，可以不进行任何检测就发送数据。在一段时间未收到确认时，南无该站点就认为传输过程中发生了冲突，发送站随机等待一段时间后再发送数据，直至发送成功。缺陷：数据碰撞的概率较大，所以网络的吞吐量很低。&lt;br&gt;
&lt;strong&gt;时隙 ALOHA 协议&lt;/strong&gt;：在纯 ALOHA 协议的基础上将所有站的时间同步起来，将时间划分为一段段等长的时隙，规定只能在每个时隙开始时才能发送一个帧。优点：避免了用户发送数据的随意性，减少了数据产生冲突的可能性，提高了信道的利用率。缺陷：碰撞概率还是很大。&lt;/p&gt;
&lt;h4 id=&#34;csma协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csma协议&#34;&gt;#&lt;/a&gt; CSMA 协议&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1 - 坚持 CSMA 协议&lt;/strong&gt;：一个节点想要发送数据首先侦听信道。如果信道空闲，那么立即发送数据。如果信道忙，那么等待，同时继续侦听，直至信道空闲。如果发生冲突，那么随机等待一段时间再重新开始侦听。缺陷：传播延迟对协议的性能影响较大且存在碰撞现象。&lt;br&gt;
&lt;strong&gt;非坚持 CSMA 协议&lt;/strong&gt;：一个节点想要发送数据首先侦听信道。如果信道空闲，那么立即发送数据。如果信道忙，那么放弃侦听，等待一个随机的时间后再重复该过程。优点：降低了多个结点等待信道空闲后同时发送数据导致冲突的概率。缺陷：增加数据在网络中的延迟时间。&lt;br&gt;
&lt;strong&gt;p - 坚持 CSMA 协议&lt;/strong&gt;：一个节点想要发送数据首先侦听信道。如果信道忙，就持续侦听，直至信道空闲。如果信道空闲，那么以概率 p 发送据，以 1-p 概率推迟到下一个时隙。优点：降低了冲突概率同时减少了时间延迟。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2021021709142685.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;csmacd协议重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmacd协议重点&#34;&gt;#&lt;/a&gt; CSMA/CD 协议（&lt;em&gt;重点&lt;/em&gt;）&lt;/h4&gt;
&lt;p&gt;载波监听多路访问 / 碰撞检测（CSMA/CD）中&lt;/p&gt;
&lt;p&gt;+++&lt;strong&gt; 载波帧听&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;发送前先侦听，即每个站在发送数据之前先要检测一下总线是否有其他站点正在发送数据，若有，则暂时不发送数据，等待信道变为空闲时，再发送。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++&lt;strong&gt; 碰撞检测&lt;/strong&gt;：就是边发送边侦听，即适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站点是否也在发送数据&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;（先听后发，边听边发，冲突停发，随机重发）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSMA/CD 协议，适用于总线形网络或半双工网络环境，采用 CSMA/CD 协议的以太网只能进行半双工通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211113214055854.png&#34; alt=&#34;image-20211113214055854&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;争用期&lt;/strong&gt;指以太网端到端的&lt;strong&gt;往返时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最小帧长＝总线传播时延＊数据传输率＊2（即争用期乘以数据传输速率）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;以太网规定的最短帧长为 64B&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CSMA/CD 协议使用&lt;strong&gt;二进制指数退避算法&lt;/strong&gt;解决碰撞，其算法如下：&lt;br&gt;
（1）确定基本退避时间，一般为争用期（两倍的总线端到端传播时延）。&lt;br&gt;
（2）定义参数 k，它等于重传次数，但 k 不超过 10，即 k=min [重传次数，10]。&lt;br&gt;
（3）从离散的整数集合 [0,1,2,3,……2^&lt;strong&gt;k-1&lt;/strong&gt;] 中随机取一个数 r，重传所需要的退避时间就是 r * 争用期。&lt;br&gt;
（4）当重传次数达&lt;strong&gt; 16&lt;/strong&gt; 次仍不能成功，说明网络太拥挤，抛弃此帧，向高层报告出错。&lt;br&gt;
使用二进制指数退避算法可使重传需要推迟的平均时间随重传次数的增大而增大，降低发生碰撞的概率，有利于整个系统的稳定。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;当信号传播延迟趋近于 0 时，信道利用率趋近 100%&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;csmaca协议只能避免不能检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmaca协议只能避免不能检测&#34;&gt;#&lt;/a&gt; CSMA/CA 协议 (只能避免，不能检测)&lt;/h4&gt;
&lt;details&gt;&lt;summary&gt;**CSMA/CD协议适用于于使用有线连接的局域网（无线网络不能使用该协议）**&lt;/summary&gt;&lt;div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;发送前侦听，边发送边侦听，一旦出现碰撞马上停止发送。在无线局域网存在以下两个问题：由于&lt;strong&gt;接收信号的强度往往会远小于发送信号的强度&lt;/strong&gt;，且在无线介质上信号强度的动态变化范围很大。而且在无线通信中，并非所有的站点都能够听见对方，存在 &lt;strong&gt;“隐蔽站” 问题&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;**RTS/CTS 帧（可选） **：可选的碰撞避免机制，主要用于解决无线网中的隐蔽站问题。&lt;/p&gt;
&lt;p&gt;实现碰撞避免机制：&lt;strong&gt;预约信道&lt;/strong&gt;：发送方在发送数据的同时向其他站点通知自己传输数据需要的时间长度，让其他站点在这段时间内不发送数据，避免碰撞。&lt;strong&gt;ACK 帧&lt;/strong&gt;：所有站点在正确接收到发给自己的数据帧（除广播帧和组播帧）后，都需要向发送方发回一个 ACK 帧，如果 ACK 帧接收失败，不采取任何行动。在规定的时间内如果未收到 ACK 帧，那么认为发送失败，此时进行该数据帧的重发，直到收到 ACK 帧或达到规定重发次数为止。同时 CSMA/CA 协议也是采用&lt;strong&gt;二进制指数退避算法&lt;/strong&gt;解决碰撞问题的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;帧间间隔&lt;/strong&gt;：每次发完帧要等一会，&lt;strong&gt;SIFS（短）&lt;/strong&gt;：用于 ACK,CTS, 数据帧。&lt;strong&gt;DIFS&lt;/strong&gt;（长）：用于异步帧竞争访问的延时&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211113214036389.png&#34; alt=&#34;image-20211113214036389&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;csmacd与csmaca区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csmacd与csmaca区别&#34;&gt;#&lt;/a&gt; CSMA/CD 与 CSMA/CA 区别&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;（1）CSMA/CD可以检测冲突，但无法避免；CSMA/CA发送包的同时不能检测到信道上有无冲突。
（2）CSMA/CD用于总线形以太网CSMA/CA用于无线局域网802.1 la/b/g/n等。
（3）CSMA/CD通过电缆中的电压变化来检测；而CSMA/CA采用能量检测、载波检测和能量载波混合检测三种检测信道空闲的方式。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;轮询访问介质访问控制令牌传递协议不会冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#轮询访问介质访问控制令牌传递协议不会冲突&#34;&gt;#&lt;/a&gt; 轮询访问介质访问控制：令牌传递协议（不会冲突）&lt;/h3&gt;
&lt;p&gt;应用于令牌环网&lt;span class=&#34;label info&#34;&gt;物理上星形网，逻辑上环形网&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过一个集中控制的监控站，以循环方式轮询每个结点，再决定信道的分配令牌在固定次序中转圈，拿到令牌的结点就可以发送数据，&lt;strong&gt;而不会产生冲突&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;适用于负载很高的广播信道。&lt;/p&gt;
&lt;h2 id=&#34;局域网选择题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局域网选择题&#34;&gt;#&lt;/a&gt; 局域网（选择题）&lt;/h2&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;局域网&lt;/strong&gt;（LAN）是指在一个较小的地理范围内，将各种计算机外部设备和数据库系统等通过&lt;strong&gt;双绞线、同轴电缆&lt;/strong&gt;等连接介质互相连接起来，组成资源和信息共享的计算机互联网络。&lt;strong&gt;局域网的主要特点&lt;/strong&gt;如下：&lt;/p&gt;
&lt;p&gt;（1）为一个单元所拥有，且地理范围和站点数目均有限。&lt;br&gt;
（2）所有站点共享较高的总带宽。&lt;br&gt;
（3）较低的时延和较低的误码率。&lt;br&gt;
（4）各站为平等关系而非主从关系。&lt;br&gt;
（5）能进行广播和组播。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局域网拓扑结构及其实现&lt;/strong&gt;&lt;br&gt;
局域网的特性主要由三个要素决定：&lt;strong&gt;拓扑结构、传输介质和介质访问控制方式&lt;/strong&gt;，最重要的是介质访问控制方式，它决定着局域网的技术特性。&lt;br&gt;
常见的局域网拓扑结构有星形结构、环形结构和总线形结构以及星星和总线形结合的复合型结构。传输介质有双绞线、铜缆和光纤。双绞线为局域网的主流传输介质。总线形局域网中的介质访问控制方法有 CSMA/CD、令牌总线。而令牌环是环形局域网的介质访问控制方法。局域网拓扑实现：&lt;br&gt;
（1）&lt;strong&gt;以太网 IEEE802.3&lt;/strong&gt;：逻辑拓扑是总线形结构，物理拓扑是星形或拓展星形结构。&lt;br&gt;
（2）&lt;strong&gt;令牌环 IEEE802.5&lt;/strong&gt;：逻辑拓扑是环形结构，物理拓扑是星形结构。&lt;br&gt;
（3）&lt;strong&gt;FDDI IEEE802.8&lt;/strong&gt;（光纤分部数字接口）：逻辑拓扑是环形结构，物理拓扑是双环结构。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;IEEE802 标准定义局域网参考模型只对应于 OSI 参考模型的数据链路层和物理层。并将数据链路层拆分为逻辑链路控制子层和媒体介入控制子层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逻辑链路控制 (LLC) 子层&lt;/strong&gt;：向网络层提供无确认无连接、面向连接、带确认无连接、高速传送 4 种不同的连接服务类型。&lt;br&gt;
&lt;strong&gt;媒体接入控制 (MAC) 子层&lt;/strong&gt;：向上层屏蔽对物理层访问的各种差异，提供对物理层的统一访问接口，主要功能包括：组帧和拆卸帧、比特传输差错检测和透明传输。&lt;/p&gt;
&lt;h3 id=&#34;以太网与ieee-8023&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以太网与ieee-8023&#34;&gt;#&lt;/a&gt; 以太网与 IEEE 802.3&lt;/h3&gt;
&lt;h4 id=&#34;以太网基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以太网基本概念&#34;&gt;#&lt;/a&gt; 以太网基本概念&lt;/h4&gt;
&lt;p&gt;802.3 局域网简称为&lt;strong&gt;以太网&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;CSMA/CD&lt;/p&gt;
&lt;p&gt;以太网采用两项措施简化通信：（1）采用&lt;strong&gt;无连接的工作方式&lt;/strong&gt;，提供不可靠的服务，实现无差错接受，对差错的纠正由高层完成。（2）发送数据使用&lt;strong&gt;曼彻斯特编码&lt;/strong&gt;的信号。&lt;/p&gt;
&lt;p&gt;图标重要&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210219074142601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;计算机与外界局域网的连接是通过主机箱内插入的一块网络接口板（又称&lt;strong&gt;网络适配器或者网络接口卡&lt;/strong&gt;）实现的。网卡的主要功能有：实现局域网传输介质之间的物理连接和电信号匹配，实现帧的发送与接收、帧的封装与拆封、介质访问控制、数据的编码与解码及数据缓存功能。&lt;/p&gt;
&lt;h4 id=&#34;以太网的mac帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以太网的mac帧&#34;&gt;#&lt;/a&gt; 以太网的 MAC 帧&lt;/h4&gt;
&lt;p&gt;每块网卡在出厂时都有一个唯一的代码，称为&lt;strong&gt;介质访问控制地址&lt;/strong&gt;（MAC 地址，前 24 位代表厂家，后 24 厂家自己规定）&lt;/p&gt;
&lt;p&gt;由于总线上是&lt;strong&gt;广播通信&lt;/strong&gt;，因此网卡从网络上每收到一个 MAC 帧，首先要用硬件检查 MAC 帧中的 MAC 地址。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;同一局域网有两个相同的 MAC 地址，在网络上这两个设备都不能正确通信&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;MAC 帧结构组成如下：&lt;br&gt;
地址：通常使用 6 字节 (48bit) 地址（目的地址，源地址总共 12 字节）&lt;br&gt;
类型：2 字节，指出数据域中携带的数据应交给哪个协议实体处理&lt;br&gt;
数据：46-1500 字节，包含高层的协议消息。由于 CSMNCD 算法的限制，以太网帧必须满足品小长度要求 64 字节，数据较少时必须加以填充 (0-46 字节）&lt;br&gt;
填充：0-46 字节，当帧长太短时填充帧，使之达到 64 字节的最小长度&lt;br&gt;
校验码 (FCS) ：4 字节，采用 CRC 循环冗余码&lt;/p&gt;
&lt;h3 id=&#34;高速以太网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高速以太网&#34;&gt;#&lt;/a&gt; 高速以太网&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;100BASE-T 以太网&lt;/strong&gt;：适用于在双绞线上传送 100Mb/s&lt;strong&gt; 基带信号&lt;/strong&gt;的星形拓扑结构以太网，使用 CSMA/CD 协议（半双工），支持全双工方式，支持半双工方式。&lt;br&gt;
&lt;strong&gt;吉比特以太网&lt;/strong&gt;：在 1Gb/s 下，用全双工和半双工两种方式工作。在半双工方式下，使用 CSMA/CD 协议。&lt;br&gt;
&lt;strong&gt;10 吉比特以太网&lt;/strong&gt;：使用光纤作为传输媒体，只工作在全双工方式，因此没有争用间题，也不使用 CSMA/CD 协议。&lt;br&gt;
&lt;span class=&#34;rainbow&#34;&gt;快速以太网采用，保持最短帧长不变，而将最大电缆长度减少到 100m 的方法，时以太网的数据传输速率提高至 100Mb/s&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;ieee-80211&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ieee-80211&#34;&gt;#&lt;/a&gt; IEEE 802.11&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/2020082123355756.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;地址 1 : RA 接收端，接收端 基站 地址；&lt;br&gt;
 地址 2 : TA 发送端，发送端 基站 地址；&lt;br&gt;
 地址 3 : DA 目的地址，目标主机的 MAC 地址；&lt;br&gt;
 地址 4 : SA 源地址，发送端的 MAC 地址；&lt;/p&gt;
&lt;h5 id=&#34;有固定基础设施无线局域网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有固定基础设施无线局域网&#34;&gt;#&lt;/a&gt; 有固定基础设施无线局域网&lt;/h5&gt;
&lt;p&gt;802.11 标准规定无线局域网的最小构件是基本服务集 (BSS)，&lt;strong&gt;一个基本服务集包括一个基站和若干移动站&lt;/strong&gt;。所有的站在本 BSS 内都可以直接通信，但在与本 BSS 外的站通信时都要通过本 BSS 的基站。&lt;/p&gt;
&lt;h5 id=&#34;无固定基础设施无线局域网自组织网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无固定基础设施无线局域网自组织网络&#34;&gt;#&lt;/a&gt; 无固定基础设施无线局域网自组织网络&lt;/h5&gt;
&lt;p&gt;另一种无线局域网是无固定基础设施的无线局域网，又称自组织网络。由一些&lt;strong&gt;平等状态移动站&lt;/strong&gt;相互通信组成的临时网络。各结点之间地位平等，中间结点都为转发结点，这些结点都具有路由器功能。移动自组织网络把移动性扩展到无线领域中的自治系统，移动自组织网络把移动性扩展到无线领域中的自治系统。&lt;/p&gt;
&lt;h3 id=&#34;广域网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#广域网&#34;&gt;#&lt;/a&gt; 广域网&lt;/h3&gt;
&lt;p&gt;其通信子网主要采用&lt;strong&gt;分组交换&lt;/strong&gt;技术&lt;/p&gt;
&lt;p&gt;局域网可以通过广域网与另一个相隔很远的局域网通信&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211113214015721.png&#34; alt=&#34;image-20211113214015721&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;ppp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ppp协议&#34;&gt;#&lt;/a&gt; ppp 协议&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;PPP 协议&lt;/strong&gt;是使用&lt;strong&gt;串行线路通信&lt;/strong&gt;的&lt;strong&gt;面向字节&lt;/strong&gt;的协议，该协议应用在之间连接两个结点的链路上。PPP 协议是在 SLIP 协议的基础上发展而来的，它既可以在一部线路上传输，又可在同步线路上使用，不仅用于 Modem 链路，也可用于租用的路由器到路由器的线路。&lt;/p&gt;
&lt;p&gt;PPP 协议由三部分组成：&lt;br&gt;
(1)&lt;strong&gt; 链路控制协议 (LCP)&lt;/strong&gt;：一种扩展链路控制协议，用于建立配置、测试和管理数据链路。&lt;br&gt;
(2)&lt;strong&gt; 网络控制协议 （NCP）&lt;/strong&gt;:PPP 协议允许同时采用多种网络层协议，每个网络层协议都需要用一个相应的 NCP 来配置，为网络层建立和配置逻辑连接。&lt;br&gt;
(3) 一个将 IP 数据包封装到串行链路的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PPP 协议注意事项&lt;/strong&gt;&lt;br&gt;
 PPP 协议只支持&lt;strong&gt;全双工链路&lt;/strong&gt;。不采用 CSMA/CD，所以信息段占的字节是 0--1500B&lt;br&gt;
PPP 协议提供差错检测但不提供纠错功能， 只保证无差错接收（通过硬件进行 CRC 校验）。&lt;br&gt;
PPP 协议是不可靠的传输协议，因此也不使用序号和确认机制&lt;br&gt;
 PPP 协议仅支持点对点的链路通信，&lt;strong&gt;不支持多点线路&lt;/strong&gt;。&lt;br&gt;
PPP 协议两端可以运行&lt;strong&gt;不同的网络层协议&lt;/strong&gt;，但仍然可以使用同一个 PPP 通信。&lt;br&gt;
PPP 协议是面向字节，的当信息字段出现和标志字段一致的比特组合时 PPP 有两种处理方法：PPP 用在异步线路（默认），则采用字节填充法。PPP 用在同步线路，则协议规定采用硬件来完成比特填充法。&lt;/p&gt;
&lt;h2 id=&#34;链路层设备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#链路层设备&#34;&gt;#&lt;/a&gt; 链路层设备&lt;/h2&gt;
&lt;h3 id=&#34;局域网交换机及其工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局域网交换机及其工作原理&#34;&gt;#&lt;/a&gt; 局域网交换机及其工作原理&lt;/h3&gt;
&lt;p&gt;局域网交换机又称以太网交换机&lt;/p&gt;
&lt;p&gt;多端口的网桥&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局域网交换机工作原理&lt;/strong&gt;：检测从以太端口来的数据帧的源和目的地的 MAC（介质访间层）地址，然后与系统内部的动态查找表进行比较若数据帧的 MAC 地址 不在查找表中，则将该地址加入查找表，并将数据帧发送给相应的目的端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局域网交换机特点&lt;/strong&gt;：工作在&lt;strong&gt;全双工方式&lt;/strong&gt;，碰撞地传输数据，转发表也是通过自学习算法自动地逐渐建立起来的，使用了专用的交换结构芯片，因此交换速率较高&lt;strong&gt;独占传输媒体的带宽&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;局域网交换机优点&lt;/strong&gt;：对工作站是透明的，管理开销低廉，简化了 网络结点的增加、移动和网络变化的操作。方便地实现虚拟局域网 (VLAN) VLAN 可以&lt;strong&gt;隔离冲突域，而且可以隔离广播域&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;局域网交换机交换方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局域网交换机交换方式&#34;&gt;#&lt;/a&gt; 局域网交换机交换方式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;直通式交换机&lt;/strong&gt;：只检查帧的目的地址，数据帧可以马上就被传输出去。优点：速度快。缺点：缺乏智能性和安全性， 也无法支持具有不同速率的端口的交换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存储转发式交换机&lt;/strong&gt;：先将接收到的帧缓存，然后并检查数据是否正确，如果帧正确就发送出去。如果发现帧有错，那么就将其丢弃。优点：可靠性 高，并能支持不同速率端口间的转换。缺点：延迟较大。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211113221934357.png&#34; alt=&#34;image-20211113221934357&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;从互联网的角度看，广域网和局域网是平等的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211114095405825.png&#34; alt=&#34;image-20211114095405825&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211114095503401.png&#34; alt=&#34;image-20211114095503401&#34;&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2021-11-12T10:17:54.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/12/%E6%94%BF%E6%B2%BB%E9%80%89%E6%8B%A9%E9%A2%98%E9%94%99%E9%A2%98/</id>
        <title>政治选择题错题</title>
        <link rel="alternate" href="http://example.com/2021/11/12/%E6%94%BF%E6%B2%BB%E9%80%89%E6%8B%A9%E9%A2%98%E9%94%99%E9%A2%98/"/>
        <content type="html">&lt;p&gt;在内容与形式的矛盾运动中，内容较为易变，形式则较为稳定。&lt;/p&gt;
&lt;p&gt;可能有两种形式，即现实的可能和抽象（非现实）的可能，二者的区别在于，现实中的根据和 条件是否充分。而可能性和不可能性的区别在于，在现实中有无根据和条件。这里要注意区别抽象的可能与不可能。&lt;/p&gt;
&lt;p&gt;否承认对立统一学说是唯物辩证法和形而上学对立的实质。&lt;/p&gt;
&lt;p&gt;唯物辩证法所说的矛盾是辩证矛盾（事物本身所固有的对立统一关系），而逻辑矛盾是指人们思维过程中由于违反形式逻辑规则所造成的自相矛盾。&lt;/p&gt;
&lt;p&gt;主观辩证法是客观辩证法的反映。它们不是决定与被&lt;/p&gt;
&lt;p&gt;决定的关系，也不是源与流的关系。&lt;/p&gt;
&lt;h3 id=&#34;多选&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多选&#34;&gt;#&lt;/a&gt; 多选&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211114131356343.png&#34; alt=&#34;image-20211114131356343&#34;&gt;&lt;/p&gt;
&lt;p&gt;ABD&lt;/p&gt;
&lt;h3 id=&#34;单选&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单选&#34;&gt;#&lt;/a&gt; 单选&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211114131520289.png&#34; alt=&#34;image-20211114131520289&#34;&gt;&lt;/p&gt;
&lt;p&gt;D&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="政治" scheme="http://example.com/tags/%E6%94%BF%E6%B2%BB/" />
        <updated>2021-11-12T09:36:25.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%8F%99/</id>
        <title>计算机网络概叙</title>
        <link rel="alternate" href="http://example.com/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%8F%99/"/>
        <content type="html"></content>
        <updated>2021-11-11T06:17:17.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/10/%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98/</id>
        <title>数学真题</title>
        <link rel="alternate" href="http://example.com/2021/11/10/%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98/"/>
        <content type="html"></content>
        <updated>2021-11-10T11:11:16.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
        <title>内存管理</title>
        <link rel="alternate" href="http://example.com/2021/11/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
        <content type="html">&lt;h2 id=&#34;内存管理概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存管理概念&#34;&gt;#&lt;/a&gt; 内存管理概念&lt;/h2&gt;
&lt;h4 id=&#34;内存管理的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存管理的功能&#34;&gt;#&lt;/a&gt; 内存管理的功能&lt;/h4&gt;
&lt;p&gt;（1）内存空间的分配与回收。&lt;br&gt;
（2）地址转换。&lt;br&gt;
（3）内存空间的扩充。&lt;br&gt;
（4）存储保护。&lt;/p&gt;
&lt;p&gt;（1）编译。由编译程序将用户源代码变异成若干目标模块。&lt;br&gt;
（2）链接（&lt;strong&gt;生成逻辑地址&lt;/strong&gt;）。由链接程序将编译后形成的一组目标模块及所需的库函数链接在一起，形成一个完成的装入模块。&lt;br&gt;
（3）装入。由装入程序将装入模块装入内存中运行。&lt;br&gt;
程序的链接有以下三种方式：&lt;br&gt;
（1）静态链接。&lt;br&gt;
（2）装入时动态链接。&lt;br&gt;
（3）运行时动态链接。其优点是便于修改和更新，便于实现对目标模块的共享。&lt;br&gt;
内存的装入模块在装入内存时，同样有以下三种方式：&lt;br&gt;
（1）绝对装入。只适用于单道程序环境。&lt;br&gt;
（2）可重定位装入（静态重定位）。&lt;br&gt;
静态重定位的特点是：一个作业装入内存时，必须给它分配要求的全部内存空间，若没有足够的内存，则不能装入该作业，此外，作业一旦进入内存，整个运行期间就不能在内存中移动，也不能再申请内存空间。&lt;br&gt;
（3）动态运行时装入。也称动态重定位。&lt;br&gt;
动态重定位特点：需要重定位寄存器，可以将程序分配到不连续的存储区中，便于程序段的共享，可以向用户提供更大的地址空间（地址空间大于存储空间）。&lt;/p&gt;
&lt;h4 id=&#34;内存保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存保护&#34;&gt;#&lt;/a&gt; 内存保护&lt;/h4&gt;
&lt;p&gt;设置一对上、下限寄存器&lt;/p&gt;
&lt;p&gt;重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）&lt;/p&gt;
&lt;h4 id=&#34;连续分配管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连续分配管理&#34;&gt;#&lt;/a&gt; 连续分配管理&lt;/h4&gt;
&lt;h5 id=&#34;单一连续分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单一连续分配&#34;&gt;#&lt;/a&gt; 单一连续分配&lt;/h5&gt;
&lt;p&gt;内存分为系统区和用户区&lt;/p&gt;
&lt;p&gt;优点是简单、无外部碎片，可以采用覆盖技术，不需要额外的技术支持。缺点是只能用于单用户、单任务的操作系统中，有内部碎片，存储器的利用率低。&lt;/p&gt;
&lt;h5 id=&#34;固定分区分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#固定分区分配&#34;&gt;#&lt;/a&gt; 固定分区分配&lt;/h5&gt;
&lt;p&gt;适用于多道程序的存储，无外部碎片；&lt;/p&gt;
&lt;p&gt;主存利用率第，有内部碎片，而且可能太大，放不进去&lt;/p&gt;
&lt;h5 id=&#34;动态分区分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态分区分配&#34;&gt;#&lt;/a&gt; 动态分区分配&lt;/h5&gt;
&lt;p&gt;1）首次适用算法：最简单，最快，最好&lt;br&gt;
（2）最佳适应算法：性能差，会产生很多小内部碎片&lt;br&gt;
（3）最坏适应算法：性能差，很容易导致大内存块没了&lt;br&gt;
（4）邻近适应算法：又称循环首次适应算法，性能比首次适应算法差&lt;/p&gt;
&lt;h4 id=&#34;非连续分配管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非连续分配管理&#34;&gt;#&lt;/a&gt; 非连续分配管理&lt;/h4&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2021-11-08T15:47:10.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/11/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
        <title>进程管理</title>
        <link rel="alternate" href="http://example.com/2021/11/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
        <content type="html">&lt;h2 id=&#34;进程与线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程与线程&#34;&gt;#&lt;/a&gt; 进程与线程&lt;/h2&gt;
&lt;h5 id=&#34;进程的概念与特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的概念与特征&#34;&gt;#&lt;/a&gt; 进程的概念与特征&lt;/h5&gt;
&lt;p&gt;进程实现了操作系统的 并发性和共享性&lt;/p&gt;
&lt;p&gt;进程映像：程序段，数据段，PCB&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label primary&#34;&gt;创建进程实质上是创建 PCB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;进程是程序在数据集上的运行过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;进程特征：动态，并发，独立，异步，结构性&lt;/p&gt;
&lt;h5 id=&#34;进程的状态与转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的状态与转换&#34;&gt;#&lt;/a&gt; 进程的状态与转换&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211104232451442.png&#34; alt=&#34;image-20211104232451442&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label warning&#34;&gt;I/O 请求应改为事件等待，因为还有资源等待&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;每个状态主要是看 cpu 与其他资源是否齐全&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 阻塞态（主动）&lt;/p&gt;
&lt;p&gt;阻塞态 -&amp;gt; 就绪态（被动）&lt;/p&gt;
&lt;h5 id=&#34;进程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程控制&#34;&gt;#&lt;/a&gt; 进程控制&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;label primary&#34;&gt;关中断，开中断实现原语的一气呵成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一般把进程控制用的程序段称为原语&lt;/p&gt;
&lt;p&gt;用户 登录系统，作业调度，系统提供服务，用户程序的应用请求都会引起进程的创建&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label primary&#34;&gt;PCB 申请失败则进程创建失败，若资源不足，不是创建失败，而是处于阻塞态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;进程的终止：正常结束，异常结束，外界干预&lt;/p&gt;
&lt;p&gt;对于普通的进程而言，其创建，撤销及要求由系统设备完成的 I/O 操作，都是利用系统调用进入内核，再由内核程序处理&lt;/p&gt;
&lt;p&gt;进程切换要保存处机上下文（程序计数器和其他寄存器）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label warning&#34;&gt;注意进程切换和处理机模式切换时不同的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;调度和切换的区别：调度是决策行为，切换是执行行为&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;h5 id=&#34;进程的组织&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的组织&#34;&gt;#&lt;/a&gt; 进程的组织&lt;/h5&gt;
&lt;p&gt;进程控制块：&lt;/p&gt;
&lt;p&gt;​	进程描述信息：进程标识符，用户标识符&lt;/p&gt;
&lt;p&gt;​	进程管理信息：进程状态，优先级，首地址等&lt;/p&gt;
&lt;p&gt;​	资源分配清单：代码段制作，数据段指针，堆栈段指针&lt;/p&gt;
&lt;p&gt;​	处理及相关信息：各寄存器&lt;/p&gt;
&lt;p&gt;PCB 组织方式：链接方式，索引方式&lt;/p&gt;
&lt;h5 id=&#34;进程的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的通信&#34;&gt;#&lt;/a&gt; 进程的通信&lt;/h5&gt;
&lt;p&gt;PV 操作是低级通信方式&lt;/p&gt;
&lt;p&gt;共享存储：低级方式的共享基于数据结构的共享，高级方式的共享基于存储区的共享&lt;/p&gt;
&lt;p&gt;消息传递：直接通信方式（挂在消息队列上），间接通信方式（放在邮箱）&lt;/p&gt;
&lt;p&gt;管道通信：共享文件（pipe 文件或管道）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;半双工通信，从管道读取数据时一次性操作，数据一旦被读取，就被抛弃&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;线程概念和多线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程概念和多线程模型&#34;&gt;#&lt;/a&gt; 线程概念和多线程模型&lt;/h5&gt;
&lt;p&gt;线程 ：轻量级进程，是一个基本的 cpu 执行单元，也是程序执行流的最小单元，由线程 id，程序计数器，寄存器集合，堆栈组成&lt;/p&gt;
&lt;p&gt;线程是独立调度的基本单位，进程是资源调度的基本单位&lt;/p&gt;
&lt;p&gt;线程可提高系统的并发性&lt;/p&gt;
&lt;p&gt;线程切换比进程切换的开销更小&lt;/p&gt;
&lt;p&gt;进程通信需要同步互斥手段辅佐，线程可直接读写进程数据段进行通信&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;用户级线程：线程管理工作都由应用系统完成，应用程序可以通过线程库设计成多线程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;内核级线程：线程管理工作都由内核完成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;多对一模型：效率高，各线程不能并行，一旦阻塞整个进程会被阻塞&lt;/p&gt;
&lt;p&gt;一对一模型：并发能力强，用户态和内核态的切换开销大 &lt;span class=&#34;rainbow&#34;&gt;操作系统为每个用户级线程建立一个线程控制块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;多对多模型&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;2 进制代码和常量放在正文段，动态分配的存储区在数据堆段，临时使用的变量在数据栈段&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;同一进程或不同进程的线程都能并发执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;父进程与子进程不共享虚拟地址空间&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;系统动态 DLL 库中的系统线程，被不同的进程调用，它们是 [] 的进程 {.gap} 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;不同&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;相同&lt;/li&gt;
&lt;li&gt;可能相同，不同&lt;/li&gt;
&lt;li&gt;不能被调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;以下描述中，不是多线程系统的特长的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;利用线程并行的执行矩阵乘法运算&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;键盘驱动程序为每个正在运行的应用配备一个线程，用以响应键盘输入&lt;/li&gt;
&lt;li&gt;web 服务器利用线程响应 HTTP 请求&lt;/li&gt;
&lt;li&gt;基于 GUI 的调式程序用不同的线程分别处理用户输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;以下关于线程的描述错误的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;内核级线程的调度由操作系统来完成&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;操作系统为每个用户级线程创建一个线程控制块&lt;/li&gt;
&lt;li&gt;用户级线程间的切换比内核级切换效率高&lt;/li&gt;
&lt;li&gt;用户级线程可以在不支持内核级线程的操作系统上实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;以下关于管道通信的描述正确的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;一个管道可以实现双向数据传输&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;进程堆管道进行读操作和写操作都有可能被阻塞&lt;/li&gt;
&lt;li&gt;管道容量只受到磁盘容量大小限制&lt;/li&gt;
&lt;li&gt;一个管道只能由一个读进程或一个写进程对其操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;处理机调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理机调度&#34;&gt;#&lt;/a&gt; 处理机调度&lt;/h2&gt;
&lt;h5 id=&#34;调度的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度的概念&#34;&gt;#&lt;/a&gt; 调度的概念&lt;/h5&gt;
&lt;p&gt;作业调度 （高级调度）：每个作业只调入调出一次  次数少&lt;/p&gt;
&lt;p&gt;内存调度（中级调度） ：进程进入挂起态（提高内存利用率和系统吞吐量） 次数中&lt;/p&gt;
&lt;p&gt;进程调度（低级调度） ：次数多&lt;/p&gt;
&lt;h5 id=&#34;调度的时机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度的时机&#34;&gt;#&lt;/a&gt; 调度的时机&lt;/h5&gt;
&lt;p&gt;不能进行进程调度的情况&lt;/p&gt;
&lt;p&gt;1. 在处理中断的过程中&lt;/p&gt;
&lt;p&gt;2. 进程在操作系统内核临界区&lt;/p&gt;
&lt;p&gt;3. 其他需要完全屏蔽中断的原子操作过程中&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;进程处于临界区可以进行处理机调度&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;进程调度方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程调度方式&#34;&gt;#&lt;/a&gt; 进程调度方式&lt;/h5&gt;
&lt;p&gt;非剥夺式（适用于大多批处理系统，不适合分时系统和实时系统）&lt;/p&gt;
&lt;p&gt;剥夺式&lt;/p&gt;
&lt;h5 id=&#34;调度的性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度的性能&#34;&gt;#&lt;/a&gt; 调度的性能&lt;/h5&gt;
&lt;p&gt;cpu 利用率&lt;/p&gt;
&lt;p&gt;系统吞吐量：单位时间的作业完成数&lt;/p&gt;
&lt;p&gt;周转时间：作业完成时间 - 作业提交时间&lt;/p&gt;
&lt;p&gt;带权周转时间：作业周转时间 / 作业运行时间&lt;/p&gt;
&lt;p&gt;等待时间&lt;/p&gt;
&lt;p&gt;响应时间&lt;/p&gt;
&lt;h5 id=&#34;调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度算法&#34;&gt;#&lt;/a&gt; 调度算法&lt;/h5&gt;
&lt;p&gt;先来先服务（FCFS）：算法简单，但是效率低，对长作业比较有利，但对短作业不利，有利于 CPU 繁忙型作业，不利于 I/O 繁忙型作业。&lt;/p&gt;
&lt;p&gt;短作业优先（SJF）（可抢，可不抢）：1）对长作业不利，造成&lt;strong&gt;饥饿现象&lt;/strong&gt;（2）没有考虑作业的紧迫性，因而不能保证紧迫性作业会被及时处理。（3）作业长短是由用户提供的预估时间而定的，因而无法做到真正的短作业优先。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;在所有进程都几乎同时到达或者是抢占式时，平均等待时间和周转时间最小&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;优先级调度算法（可抢，可不抢）&lt;strong&gt;饥饿&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1. 系统进程 &amp;gt; 用户进程&lt;br&gt;
 2. 交互型进程 &amp;gt; 非交互型进程&lt;br&gt;
 3.I/O 进程 &amp;gt; 计算型进程（CPU 繁忙型）&lt;/p&gt;
&lt;p&gt;高响应比优先（非抢）： &lt;strong&gt;响应比 =（等待时间 + 要求服务时间）/ 要求服务时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时间片轮转（RR）(抢占式算法): 默认新到达的进程先进入队列，刚完成时间片的进程后进入队列&lt;/p&gt;
&lt;p&gt;多级反馈队列调度（抢占）：&lt;/p&gt;
&lt;p&gt;（1）终端型作业用户，短作业优先。&lt;br&gt;
（2）短批处理作业用户，周转时间短。&lt;br&gt;
（3）长批处理作业用户：不会长期得不到处理 **（但是会导致饥饿）**。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231028476.png&#34; alt=&#34;image-20211106231028476&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231047537.png&#34; alt=&#34;image-20211106231047537&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231123597.png&#34; alt=&#34;image-20211106231123597&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程同步&#34;&gt;#&lt;/a&gt; 进程同步&lt;/h2&gt;
&lt;h4 id=&#34;进程同步的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程同步的概念&#34;&gt;#&lt;/a&gt; 进程同步的概念&lt;/h4&gt;
&lt;p&gt;（1）进入区：进程是否可以进入临界区，若能进入临界区则设置正在访问临界区的标志。&lt;br&gt;
（2）临界区：可以访问临界资源的代码。&lt;br&gt;
（3）退出区：将正在访问临界区的标志清除。&lt;br&gt;
（4）剩余区：代码中的其余部分。&lt;/p&gt;
&lt;p&gt;为禁止两个进程同时进入临界区，同步机制应该遵循以下规则：&lt;br&gt;
（1）空闲让进。&lt;br&gt;
（2）忙则等待。&lt;br&gt;
（3）有限等待。&lt;br&gt;
（4）让权等待。&lt;/p&gt;
&lt;h4 id=&#34;实现临界区互斥的基本方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现临界区互斥的基本方法&#34;&gt;#&lt;/a&gt; 实现临界区互斥的基本方法&lt;/h4&gt;
&lt;h5 id=&#34;软件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件方法&#34;&gt;#&lt;/a&gt; 软件方法&lt;/h5&gt;
&lt;p&gt;单标志检查法：只能交替进入，违背空闲让进&lt;/p&gt;
&lt;p&gt;双标志先检查法：可能同时进入临界区，违背忙则等待&lt;/p&gt;
&lt;p&gt;双标志后检查法：可能相互谦让，造成饥饿&lt;/p&gt;
&lt;p&gt;Peterson：未解决让权等待&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//Pi 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 临界区操作 j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 剩余区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//Pj 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 临界区操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 剩余区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;硬件方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件方式&#34;&gt;#&lt;/a&gt; 硬件方式&lt;/h5&gt;
&lt;p&gt;中断屏蔽&lt;/p&gt;
&lt;p&gt;TestAndSet 指令&lt;/p&gt;
&lt;p&gt;Swap 指令&lt;/p&gt;
&lt;h5 id=&#34;信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号量&#34;&gt;#&lt;/a&gt; 信号量&lt;/h5&gt;
&lt;p&gt;整形信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;记录信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 注意 &amp; lt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 阻塞&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 注意 &amp; lt;=0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;管程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管程&#34;&gt;#&lt;/a&gt; 管程&lt;/h4&gt;
&lt;p&gt;（1）管程的名称。&lt;br&gt;
（2）局部于管程的共享结构数据说明。&lt;br&gt;
（3）对该数据结构进行操作的一组过程 (函数)。&lt;br&gt;
（4）对局部于管程内部的共享数据设置初始值的语句。&lt;/p&gt;
&lt;p&gt;管程把对共享资源的操作封装起来，管程内的共享数据结构只能被管程内的过程所访问。&lt;/p&gt;
&lt;p&gt;每次仅允许一个进程进入管程，从而实现进程互斥。&lt;/p&gt;
&lt;h5 id=&#34;条件变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件变量&#34;&gt;#&lt;/a&gt; 条件变量&lt;/h5&gt;
&lt;p&gt;x.wait：当 x 对应的条件不满足时，正在调用管程的进程调用 x.wait 将自己插入到 x 条件的等待队列，并释放管程，此时其他进程可以使用该管程。&lt;br&gt;
x.signal：x 对应的条件发生了变化，则调用 x.signal，唤醒了一个因 x 条件而阻塞的进程。&lt;br&gt;
条件变量与信号量的比较：&lt;br&gt;
相似点：条件变量的 wait/signal 操作类似于信号量的 P/V 操作，可以实现进程的阻塞和唤醒。&lt;br&gt;
不同点：条件变量是 “没有值的”，仅实现了 “排队等待” 的功能；而信号量是 “有值的”，信号量反映了剩余资源的数目，而在管程中剩余资源数用共享数据结构记录。&lt;/p&gt;
&lt;h4 id=&#34;经典同步问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经典同步问题&#34;&gt;#&lt;/a&gt; 经典同步问题&lt;/h4&gt;
&lt;h5 id=&#34;生产者与消费者模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生产者与消费者模型&#34;&gt;#&lt;/a&gt; 生产者与消费者模型&lt;/h5&gt;
&lt;p&gt;注意 mutex 和 empty（或 full）的先后顺序，会造成死锁&lt;/p&gt;
&lt;h5 id=&#34;读者与写者问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读者与写者问题&#34;&gt;#&lt;/a&gt; 读者与写者问题&lt;/h5&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore rmutex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; wmutex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 互斥锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; readcount &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//P(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 关锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;readcount &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 把写操作锁住，只需要在第一次读时&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          readcount&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 读者数目 + 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 开锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//V(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 关锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          readcount&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 读者数目 - 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;readcount &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 没有读者，执行写操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 开锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TRUE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//P(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//V(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TRUE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;会造成饥饿问题，加上注释部分可实现&lt;strong&gt;相对公平&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;哲学家进餐问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哲学家进餐问题&#34;&gt;#&lt;/a&gt; 哲学家进餐问题&lt;/h5&gt;
&lt;p&gt;会造成死锁&lt;/p&gt;
&lt;p&gt;解决方案：1. 同时拿起左右两根筷子&lt;/p&gt;
&lt;p&gt;2. 偶数哲学家先拿左筷子，奇数哲学家先拿右筷子&lt;/p&gt;
&lt;p&gt;3. 只允许 n-1 个人拿筷子&lt;/p&gt;
&lt;h5 id=&#34;吸烟者问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#吸烟者问题&#34;&gt;#&lt;/a&gt; 吸烟者问题&lt;/h5&gt;
&lt;p&gt;将不同材料整合为一个材料的思想&lt;/p&gt;
&lt;p&gt;其他实现比较简单&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107233843200.png&#34; alt=&#34;image-20211107233843200&#34;&gt;&lt;span class=&#34;rainbow&#34;&gt; 互斥信号量初值为 1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;多个进程在任意时刻可共享的代码为可重入代码（纯码）（不可修改的代码）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107233806315.png&#34; alt=&#34;image-20211107233806315&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234055791.png&#34; alt=&#34;image-20211107234055791&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234025816.png&#34; alt=&#34;image-20211107234025816&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234208255.png&#34; alt=&#34;image-20211107234208255&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234235556.png&#34; alt=&#34;image-20211107234235556&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234257386.png&#34; alt=&#34;image-20211107234257386&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234316820.png&#34; alt=&#34;image-20211107234316820&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234336105.png&#34; alt=&#34;image-20211107234336105&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁&#34;&gt;#&lt;/a&gt; 死锁&lt;/h2&gt;
&lt;p&gt;死锁产生的原因有：1. 系统资源的竞争。2. 进程推进顺序非法。&lt;br&gt;
死锁产生的必要条件：1. 互斥条件：2. 不可剥夺条件 3. 请求并保持条件 4. 循环等待条件&lt;br&gt;
::info&lt;/p&gt;
&lt;p&gt;死锁检测，死锁避免，死锁预防&lt;/p&gt;
&lt;p&gt;对死锁的处理从宽到严，并发性从大到小&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;h4 id=&#34;死锁预防&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁预防&#34;&gt;#&lt;/a&gt; 死锁预防&lt;/h4&gt;
&lt;h5 id=&#34;破坏互斥条件使临界资源共享不现实&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏互斥条件使临界资源共享不现实&#34;&gt;#&lt;/a&gt; 破坏互斥条件 (使临界资源共享，不现实)&lt;/h5&gt;
&lt;h5 id=&#34;破坏不剥夺条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏不剥夺条件&#34;&gt;#&lt;/a&gt; 破坏不剥夺条件&lt;/h5&gt;
&lt;p&gt;实现比较复杂，反复剥夺会增加系统开销，降低系统吞吐量，适合 cpu，寄存器等容易回复的资源&lt;/p&gt;
&lt;h5 id=&#34;破坏请求并保持条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏请求并保持条件&#34;&gt;#&lt;/a&gt; 破坏请求并保持条件&lt;/h5&gt;
&lt;p&gt;采用预先静态分配方法，即进程在运行前就一次性申请完所有资源。&lt;br&gt;
特点：实现简单，但是资源被严重浪费，甚至可能导致进程饥饿。&lt;/p&gt;
&lt;h5 id=&#34;破坏循环等待条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏循环等待条件&#34;&gt;#&lt;/a&gt; 破坏循环等待条件&lt;/h5&gt;
&lt;p&gt;采用顺序资源分配法，首先给系统资源进行编号，规定每个进程按照编号递增的顺序对资源进行申请，同类资源一次性申请完。&lt;/p&gt;
&lt;p&gt;当使用资源顺序和规定顺序不同，会造成浪费&lt;/p&gt;
&lt;h4 id=&#34;死锁避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁避免&#34;&gt;#&lt;/a&gt; 死锁避免&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;并非所有不安全状态都为死锁状态&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;银行家算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#银行家算法&#34;&gt;#&lt;/a&gt; 银行家算法&lt;/h5&gt;
&lt;p&gt;要注意先判断&lt;strong&gt;所需资源数&lt;/strong&gt;和&lt;strong&gt;申请资源数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有&lt;strong&gt;安全性算法&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;死锁检测和解除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁检测和解除&#34;&gt;#&lt;/a&gt; 死锁检测和解除&lt;/h4&gt;
&lt;h5 id=&#34;资源分配图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源分配图&#34;&gt;#&lt;/a&gt; 资源分配图&lt;/h5&gt;
&lt;p&gt;请求边，分配边&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108000010609.png&#34; alt=&#34;image-20211108000010609&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;死锁定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁定理&#34;&gt;#&lt;/a&gt; 死锁定理&lt;/h5&gt;
&lt;p&gt;在资源分配图中找到分配满足的进程，然后消去其请求边与分配边，如果最后所有边都可以被消除，那么就是可以简化的，不存在死锁，否则存在死锁。&lt;/p&gt;
&lt;h5 id=&#34;死锁解除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁解除&#34;&gt;#&lt;/a&gt; 死锁解除&lt;/h5&gt;
&lt;p&gt;资源剥夺法：挂起某些死锁进程，抢占资源，将这些资源分配给其他死锁进程，但是要防止挂起时间过长。&lt;br&gt;
撤销进程法：强制撤销部分甚至全部死锁进程，并且剥夺他们的资源，撤销原则可以根据优先级和撤销进程的代价进行。&lt;br&gt;
进程回退法：让一个或者多个进程回退到足以回避死锁的地步，进程回退时，自动释放资源而非剥夺，要求系统保持进程历史信息，设置还原点。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;银行家算法不能检测死锁（哎）&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;引入多道程序技术的前提之一是系统具有 {.gap} 
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;多个 cpu&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;中断功能&lt;/li&gt;
&lt;li&gt;多个终端&lt;/li&gt;
&lt;li&gt;不分时功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001058938.png&#34; alt=&#34;image-20211108001058938&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001112463.png&#34; alt=&#34;image-20211108001112463&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001501032.png&#34; alt=&#34;image-20211108001501032&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001524691.png&#34; alt=&#34;image-20211108001524691&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001542686.png&#34; alt=&#34;image-20211108001542686&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
        <updated>2021-11-04T15:06:40.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/10/29/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/</id>
        <title>统计量及其分布</title>
        <link rel="alternate" href="http://example.com/2021/10/29/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/"/>
        <content type="html"></content>
        <updated>2021-10-29T07:54:32.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/10/11/%E7%9B%B8%E4%BC%BC%E7%90%86%E8%AE%BA/</id>
        <title>相似理论</title>
        <link rel="alternate" href="http://example.com/2021/10/11/%E7%9B%B8%E4%BC%BC%E7%90%86%E8%AE%BA/"/>
        <content type="html">&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211014141754934.png&#34; alt=&#34;image-20211014141754934&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;P 相当于列操作，P 的逆相当于同等操作的行操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;一定要注意是不是单位向量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;实对乘矩阵不同特征值的特征向量相互正交&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;如果一个矩阵的特征值没有 0，则这个矩阵可逆&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;相似必有相同的特征值，反之则不然，因为可能不能相似对角化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011105111165.png&#34; alt=&#34;image-20211011105111165&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011105129684.png&#34; alt=&#34;image-20211011105129684&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;AP=PB，P 可逆，则 A,B 相似&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4 个性质&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011203108513.png&#34; alt=&#34;image-20211011203108513&#34;&gt;&lt;/p&gt;
&lt;p&gt;正交化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011210843148.png&#34; alt=&#34;image-20211011210843148&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011213003959.png&#34; alt=&#34;image-20211011213003959&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;任意实对称矩阵，都可由两个正交向量相乘的矩阵加上他的反制矩阵组成，所以必有特征值：k，-k，0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011213559807.png&#34; alt=&#34;image-20211011213559807&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211012095208574.png&#34; alt=&#34;image-20211012095208574&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;方程组也可以特征值来求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211012150502145.png&#34; alt=&#34;image-20211012150502145&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211012150426162.png&#34; alt=&#34;image-20211012150426162&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110405267.png&#34; alt=&#34;image-20211013110405267&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110624690.png&#34; alt=&#34;image-20211013110624690&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110647808.png&#34; alt=&#34;image-20211013110647808&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110722470.png&#34; alt=&#34;image-20211013110722470&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/" />
        <updated>2021-10-11T02:27:26.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/26/%E8%A1%8C%E5%88%97%E5%BC%8F/</id>
        <title>行列式</title>
        <link rel="alternate" href="http://example.com/2021/09/26/%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
        <content type="html">&lt;p&gt;&lt;img data-src=&#34;image-20210926105834477.png&#34; alt=&#34;image-20210926105834477&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926110021570.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926134342100.png&#34; alt=&#34;image-20210926134342100&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926112731960.png&#34; alt=&#34;image-20210926112731960&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926114959041.png&#34; alt=&#34;image-20210926114959041&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926113931510.png&#34; alt=&#34;image-20210926113931510&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926112742335.png&#34; alt=&#34;image-20210926112742335&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;抽象行列式的计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象行列式的计算&#34;&gt;#&lt;/a&gt; 抽象行列式的计算&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926142715643.png&#34; alt=&#34;image-20210926142715643&#34;&gt;&lt;/p&gt;
&lt;p&gt;矩阵的性质，相似理论等&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;注意爪形的计算&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926153823858.png&#34; alt=&#34;image-20210926153823858&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;代数余子式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代数余子式&#34;&gt;#&lt;/a&gt; 代数余子式&lt;/h2&gt;
&lt;p&gt;矩阵和特征值。。。&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/" />
        <updated>2021-09-26T02:42:42.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/26/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9B%BE%E5%BD%A2/</id>
        <title>几种常见的空间图形</title>
        <link rel="alternate" href="http://example.com/2021/09/26/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9B%BE%E5%BD%A2/"/>
        <content type="html">&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926085928910.png&#34; alt=&#34;image-20210926085928910&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926090536981.png&#34; alt=&#34;image-20210926090536981&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926090607583.png&#34; alt=&#34;image-20210926090607583&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
        <updated>2021-09-26T00:54:38.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/20/%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/</id>
        <title>输入/输出系统</title>
        <link rel="alternate" href="http://example.com/2021/09/20/%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h3 id=&#34;磁盘存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘存储器&#34;&gt;#&lt;/a&gt; 磁盘存储器&lt;/h3&gt;
&lt;p&gt;磁头数：记录面数&lt;/p&gt;
&lt;p&gt;柱面数：磁道数&lt;/p&gt;
&lt;p&gt;扇区数：磁盘读写的最小单位&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;磁盘容量：非格式化容量：磁化单元总数，由道密度和位密度计算 --- 格式化容量：按照特定格式存储，容量比非格式化小&lt;/p&gt;
&lt;p&gt;记录密度：道密度，位密度，面密度 = 道密度 * 位密度&lt;/p&gt;
&lt;p&gt;平均存取时间：寻道时间，旋转延迟时间（旋转一周时间的一半），传输时间（扫过扇区的时间）&lt;/p&gt;
&lt;p&gt;数据传输率：=rN，设磁盘转速为 r 转 / 秒，每条磁道容量为 N 字节&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;磁盘地址（驱动器号 -- 柱面 (磁道) 号 -- 盘面号 -- 扇区号）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;汉字内码在主存中占 2B&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;io接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口&#34;&gt;#&lt;/a&gt; I/O 接口&lt;/h2&gt;
&lt;h5 id=&#34;io接口的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口的功能&#34;&gt;#&lt;/a&gt; I/O 接口的功能&lt;/h5&gt;
&lt;p&gt;进行地址译码和设备选择&lt;/p&gt;
&lt;p&gt;实现数据缓冲&lt;/p&gt;
&lt;p&gt;传送控制命令和状态信息&lt;/p&gt;
&lt;p&gt;信号格式的转换（主机与外设的电平，数据格式可能存在差异）&lt;/p&gt;
&lt;h5 id=&#34;io接口的基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口的基本结构&#34;&gt;#&lt;/a&gt; I/O 接口的基本结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921110825448.png&#34; alt=&#34;image-20210921110825448&#34;&gt;&lt;/p&gt;
&lt;p&gt;地址线：用以选择和主机交换信息的 ++ 寄存器 ++&lt;/p&gt;
&lt;p&gt;控制线：传送 读 / 写信号 ，此外还会传送仲裁信号，握手信号&lt;/p&gt;
&lt;p&gt;I/O 控制逻辑：对控制寄存器的命令字进行译码，并通过外设界面控制逻辑送到外设 ---- 同时将数据缓冲寄存器的数据发到外设，或者反过来&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对数据缓冲寄存器，状态 / 控制寄存器的访问操作通过 ++ I/O 指令 &lt;ins&gt;完成，只能在操作系统内核的底层 I/O 软件中使用，是&lt;/ins&gt; 特权指令 ++&lt;/p&gt;
&lt;h5 id=&#34;io接口的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口的类型&#34;&gt;#&lt;/a&gt; I/O 接口的类型&lt;/h5&gt;
&lt;p&gt;1. 按数据传送方式：并行接口（一个字节或字的所有位同时传输），串行接口&lt;/p&gt;
&lt;p&gt;（这里所说的数据传送方式指的是外设和接口一侧，主机和接口一侧数据总是并行传送）&lt;/p&gt;
&lt;p&gt;2. 按主机访问 I/O 设备的控制方式：程序查询接口，中断接口，DMA 接口&lt;/p&gt;
&lt;p&gt;3. 按功能的灵活性：可编程接口，不可&lt;/p&gt;
&lt;h5 id=&#34;io端口及其编址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io端口及其编址&#34;&gt;#&lt;/a&gt; I/O 端口及其编址&lt;/h5&gt;
&lt;p&gt;数据端口，状态端口，控制端口，若干端口加上相应的控制逻辑电路组成接口（通常 CPU 能对数据端口进行读写，对状态端口只读，对控制端口只写）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;统一编址：存储器映射方式&lt;/p&gt;
&lt;p&gt;优点：不需要专门的输入输出指令，使 cpu 访问 I/O 操作更灵活，有较大的编址空间&lt;/p&gt;
&lt;p&gt;缺点：占用存储器空间&lt;/p&gt;
&lt;p&gt;独立编址：I/O 映射方式（要设置专门的 I/O 指令来访问 I/O 端口）&lt;/p&gt;
&lt;p&gt;优点：与存储器指令区分，程序编制清晰&lt;/p&gt;
&lt;p&gt;缺点：增加控制的复杂性&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;I/O 总线的数据线上传送的信号包括&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li class=&#34;correct&#34;&gt;I/O 接口的命令字&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;I/O 接口的状态字&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;中断类型号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;磁盘驱动器向盘片磁道记录数据时采用串行方式写入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;程序员进行系统调用访问设备使用 ++ 逻辑地址 ++&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;io方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io方式&#34;&gt;#&lt;/a&gt; I/O 方式&lt;/h2&gt;
&lt;h5 id=&#34;程序查询方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序查询方式&#34;&gt;#&lt;/a&gt; 程序查询方式&lt;/h5&gt;
&lt;p&gt;信息交换完全由主机执行程序实现&lt;/p&gt;
&lt;p&gt;程序查询接口中设置一个数据缓冲寄存器和一个设备状态寄存器&lt;/p&gt;
&lt;h5 id=&#34;程序中断方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序中断方式&#34;&gt;#&lt;/a&gt; 程序中断方式&lt;/h5&gt;
&lt;h6 id=&#34;异常cpu内部中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常cpu内部中断&#34;&gt;#&lt;/a&gt; 异常（cpu 内部中断）：&lt;/h6&gt;
&lt;p&gt;硬故障中断，程序性异常（软中断）&lt;/p&gt;
&lt;p&gt;按发生异常的报告方式和返回方式不同分为：&lt;/p&gt;
&lt;p&gt;1.== 故障 ==（指在引起故障等指令启动后，执行结束前背检测到的异常事件）&lt;/p&gt;
&lt;p&gt;有些可回到发生故障的指令后继续执行，有些不行&lt;/p&gt;
&lt;p&gt;2.== 自陷 ==（发生后 cpu 将机内操作系统内核程序执行）&lt;/p&gt;
&lt;p&gt;自动根据不同陷阱类型进行相应处理，然后返回下一条指令执行，当自陷指令是转移指令是，则&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;== 终止 ==（在指令执行过程中发生了使计算机无法继续执行的硬件故障，如掉电）&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;外部中断狭义上称为中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部中断狭义上称为中断&#34;&gt;#&lt;/a&gt; 外部中断（狭义上称为中断）&lt;/h6&gt;
&lt;p&gt;I/O 中断（键盘输入，打印机缺纸），外部信号中断（用户按 Esc），各种定时器产生的时钟中断&lt;/p&gt;
&lt;h6 id=&#34;中断的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中断的基本概念&#34;&gt;#&lt;/a&gt; 中断的基本概念&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921135656166.png&#34; alt=&#34;image-20210921135656166&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921135635992.png&#34; alt=&#34;image-20210921135635992&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;程序中断的基本流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序中断的基本流程&#34;&gt;#&lt;/a&gt; 程序中断的基本流程&lt;/h6&gt;
&lt;p&gt;中断请求&lt;/p&gt;
&lt;p&gt;对每个中断源的请求设置中断请求标记触发器 INTR，这些触发器组成中断请求标记寄存器（可集中在 cpu，也可分散在各中断源）&lt;/p&gt;
&lt;p&gt;++ 内中断皆为不可屏蔽中断 ++&lt;/p&gt;
&lt;p&gt;++ 通过 INTR 信号线发出的外中断是可屏蔽信号，可被关中断（IF=1）影响&lt;/p&gt;
&lt;p&gt;NMI 信号线上的是不可屏蔽中断 ++&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断判优&lt;/p&gt;
&lt;p&gt;硬件排队器，程序查询（软件实现）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;硬件故障中断属于最高级，其次是软件中断，不可屏蔽中断优于可屏蔽中断，DMA 请求优于 I/O 设备传送的中断请求，高速设备优于低速设备，实时设备优于普通设备&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断响应&lt;/p&gt;
&lt;p&gt;中断隐指令（硬件直接实现）&lt;/p&gt;
&lt;p&gt;​	1. 关中断&lt;/p&gt;
&lt;p&gt;​	2. 保存断点（PC,PSWR）&lt;/p&gt;
&lt;p&gt;​	3. 引出中断服务程序&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断向量&lt;/p&gt;
&lt;p&gt;cpu 响应中断后，中断硬件自动将中断向量地址传送到 cpu&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;​	中断向量是中断程序的入口地址，中断向量地址。。。&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断处理过程&lt;/p&gt;
&lt;p&gt;图片&lt;/p&gt;
&lt;p&gt;保存断点：可压入栈中也可存入主存的特定单元中&lt;/p&gt;
&lt;p&gt;引出中断服务程序：硬件向量法（硬件产出中断类型号（指出中断向量地址）），软件查询法&lt;/p&gt;
&lt;p&gt;保存现场和屏蔽字：现场信息指的是用户可见的工作寄存器的内容&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;​	现场信息保存由软件实现，断点信息保存由硬件实现&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;h6 id=&#34;多重中断和中断屏蔽技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多重中断和中断屏蔽技术&#34;&gt;#&lt;/a&gt; 多重中断和中断屏蔽技术&lt;/h6&gt;
&lt;h5 id=&#34;dma方式直接存储器存取方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma方式直接存储器存取方式&#34;&gt;#&lt;/a&gt; DMA 方式（直接存储器存取方式）&lt;/h5&gt;
&lt;h6 id=&#34;dma控制器的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma控制器的组成&#34;&gt;#&lt;/a&gt; DMA 控制器的组成&lt;/h6&gt;
&lt;h6 id=&#34;dma传送方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma传送方式&#34;&gt;#&lt;/a&gt; DMA 传送方式&lt;/h6&gt;
&lt;p&gt;停止 cpu 访存，周期挪用（盗取），DMA 和 CPU 交替访存&lt;/p&gt;
&lt;h6 id=&#34;dma传送过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma传送过程&#34;&gt;#&lt;/a&gt; DMA 传送过程&lt;/h6&gt;
&lt;p&gt;1. 预处理&lt;/p&gt;
&lt;p&gt;（可以说设备驱动程序）向 DMA 控制器的有关寄存器设置初值，设置传送方向，启动该设备&lt;/p&gt;
&lt;p&gt;2. 数据传送（完全由 DMA 实现）&lt;/p&gt;
&lt;p&gt;可以以单字节位基本单位，也可以以数据块位基本单位，DMA 占据总线后数据输入输出通过循环实现&lt;/p&gt;
&lt;p&gt;3. 后处理&lt;/p&gt;
&lt;p&gt;DMA 向 cpu 发送终端请求，cpu 执行中断服务程序（校验送入主存的数据是否正确，测试传送过程中是否出错。。。）&lt;/p&gt;
&lt;h5 id=&#34;dma方式和中断方式的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma方式和中断方式的区别&#34;&gt;#&lt;/a&gt; DMA 方式和中断方式的区别&lt;/h5&gt;
&lt;p&gt;DMA 请求的响应可以发生在每个机器周期结束（也可以说发生在总线周期结束，只要 cpu 不占总线资源）&lt;/p&gt;
&lt;p&gt;DMA 数据传输效率高，适合高速设备&lt;/p&gt;
&lt;p&gt;DMA 请求优先于中断请求&lt;/p&gt;
&lt;p&gt;中断方式具有对异常事件的处理能力，DMA 方式仅限于传送数据块的 I/O 操作&lt;/p&gt;
&lt;p&gt;从数据传输上看，中断方式靠程序传送，DMA 方式靠硬件传送&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;主存故障引起的中断是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;I/O 中断&lt;/li&gt;
&lt;li&gt;程序性中断&lt;/li&gt;
&lt;li&gt;外中断&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;机器校验中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;在配有通道的计算机系统中，用户程序需要输入输出时，引起的中断是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;I/O 中断&lt;/li&gt;
&lt;li&gt;程序性中断&lt;/li&gt;
&lt;li&gt;外中断&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;访管中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;设置中断屏蔽标志可以改变&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;多个中断源的中断请求优先级&lt;/li&gt;
&lt;li&gt;cpu 对多个中断请求响应的优先次序&lt;/li&gt;
&lt;li&gt;多个中断服务程序开始执行的顺序&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;多个中断服务程序执行完的次序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;在采用中断 I/O 方式控制打印输出的情况下，CPU 和打印控制接口中的 I/O 端口交换的信息不可能是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;打印字符&lt;/li&gt;
&lt;li&gt;设备状态&lt;/li&gt;
&lt;li&gt;控制命令&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;主存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;MIPS = 指令执行速度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第 8 题&lt;/p&gt;
&lt;p&gt;第 10 题有疑问&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
        <updated>2021-09-20T15:03:36.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/20/%E6%80%BB%E7%BA%BF/</id>
        <title>总线</title>
        <link rel="alternate" href="http://example.com/2021/09/20/%E6%80%BB%E7%BA%BF/"/>
        <content type="html">&lt;h2 id=&#34;总线概叙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线概叙&#34;&gt;#&lt;/a&gt; 总线概叙&lt;/h2&gt;
&lt;p&gt;特点：分时，共享&lt;/p&gt;
&lt;p&gt;特性：机械特性，电气特性，功能特性，时间特性&lt;/p&gt;
&lt;p&gt;总线的猝发传送方式：在一个总线周期内传送地址连续的多个数据字&lt;/p&gt;
&lt;p&gt;总线分类：片选总线，系统总线，通信总线（外部总线）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;单总线&lt;/p&gt;
&lt;p&gt;双总线：主存总线，I/O 总线&lt;/p&gt;
&lt;p&gt;三总线：主存总线，I/O 总线，DMA（直接内存访问）总线&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总线周期：申请阶段，寻址阶段，传输阶段和结束阶段&lt;/p&gt;
&lt;p&gt;总线时钟周期 = 机器时钟周期&lt;/p&gt;
&lt;p&gt;总线工作频率：时钟频率 / N&lt;/p&gt;
&lt;p&gt;总线时钟频率&lt;/p&gt;
&lt;p&gt;信号线数：地址总线，数据总线，控制总线三种信号线的总和称为信号线数&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;并行总线传输比串行总线传输速度快&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;下列关于多总线结构的叙述中错误的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;靠近 cpu 的总线速度快&lt;/li&gt;
&lt;li&gt;存储器总线可支持突发传送方式&lt;/li&gt;
&lt;li&gt;总线之间通过桥接器相连&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;PCI-Express16 采用并行传输方式&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;$CABB%5BOFGCJ8$SUKJ%5D62K4V.jpg&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总线事务和定时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线事务和定时&#34;&gt;#&lt;/a&gt; 总线事务和定时&lt;/h2&gt;
&lt;p&gt;申请分配阶段：总线主模块提出申请，经总线仲裁机构将下一传输周期的总线使用权授予某一申请者&lt;/p&gt;
&lt;p&gt;寻址阶段：主模块通过总线发出本次要访问的从模块的地址及有关命令&lt;/p&gt;
&lt;p&gt;传输阶段：主模块和从模块进行数据交换 (单向或双向)&lt;/p&gt;
&lt;p&gt;结束阶段&lt;/p&gt;
&lt;h5 id=&#34;同步定时方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步定时方式&#34;&gt;#&lt;/a&gt; 同步定时方式&lt;/h5&gt;
&lt;p&gt;采用统一时钟信号，在一个总线周期内，可以进行一次数据传送&lt;/p&gt;
&lt;p&gt;优点：传输速度快&lt;/p&gt;
&lt;p&gt;缺点：主从设备属于强制性同步，可靠性差&lt;/p&gt;
&lt;h5 id=&#34;异步定时方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步定时方式&#34;&gt;#&lt;/a&gt; 异步定时方式&lt;/h5&gt;
&lt;p&gt;没有统一的时钟信号，通过握手信号实现定时控制&lt;/p&gt;
&lt;p&gt;不互锁方式：&lt;/p&gt;
&lt;p&gt;半互锁方式&lt;/p&gt;
&lt;p&gt;全互锁方式：主设备发出 “请求” 信号后，必须在从设备 “回答” 后才撤销 “请求” 信号；从设备发出 “回答” 信号后，必须在获知主设备 “请求” 信号已撤销后，再撤销其 “回答” 信号&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210921103739428.png&#34; alt=&#34;image-20210921103739428&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
        <updated>2021-09-20T15:02:58.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/20/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%EF%BC%88%E4%BB%85%E6%95%B0%E4%B8%80%EF%BC%89/</id>
        <title>多元函数积分学（仅数一）</title>
        <link rel="alternate" href="http://example.com/2021/09/20/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%EF%BC%88%E4%BB%85%E6%95%B0%E4%B8%80%EF%BC%89/"/>
        <content type="html">&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;要使用好对称性和轮转对称性&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;球面坐标系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#球面坐标系&#34;&gt;#&lt;/a&gt; 球面坐标系&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210920145254164.png&#34; alt=&#34;image-20210920145254164&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922194113197.png&#34; alt=&#34;image-20210922194113197&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一型曲线积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一型曲线积分&#34;&gt;#&lt;/a&gt; 第一型曲线积分&lt;/h2&gt;
&lt;p&gt;有密度的曲线&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195230282.png&#34; alt=&#34;image-20210922195230282&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195644117.png&#34; alt=&#34;image-20210922195644117&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;遇到空间曲线，一般利用轮转对称性，对称性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195811310.png&#34; alt=&#34;image-20210922195811310&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195825275.png&#34; alt=&#34;image-20210922195825275&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;第一型曲面积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一型曲面积分&#34;&gt;#&lt;/a&gt; 第一型曲面积分&lt;/h2&gt;
&lt;p&gt;带密度的曲面&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922201858567.png&#34; alt=&#34;image-20210922201858567&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;第二型曲线积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二型曲线积分&#34;&gt;#&lt;/a&gt; 第二型曲线积分&lt;/h2&gt;
&lt;p&gt;做功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922204243613.png&#34; alt=&#34;image-20210922204243613&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922204302544.png&#34; alt=&#34;image-20210922204302544&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;2，3 都是路径无关&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923142155839.png&#34; alt=&#34;image-20210923142155839&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923142210976.png&#34; alt=&#34;image-20210923142210976&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923144555252.png&#34; alt=&#34;image-20210923144555252&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;摆线方程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#摆线方程&#34;&gt;#&lt;/a&gt; 摆线方程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923151541849.png&#34; alt=&#34;image-20210923151541849&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923194637283.png&#34; alt=&#34;image-20210923194637283&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923201337416.png&#34; alt=&#34;image-20210923201337416&#34;&gt;&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;没有理解，henfan&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923203524556.png&#34; alt=&#34;image-20210923203524556&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923204806560.png&#34; alt=&#34;image-20210923204806560&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924092052207.png&#34; alt=&#34;image-20210924092052207&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924143010687.png&#34; alt=&#34;image-20210924143010687&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924154609155.png&#34; alt=&#34;image-20210924154609155&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924161815314.png&#34; alt=&#34;image-20210924161815314&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925210033435.png&#34; alt=&#34;image-20210925210033435&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第2型曲面积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第2型曲面积分&#34;&gt;#&lt;/a&gt; 第 2 型曲面积分&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924175335448.png&#34; alt=&#34;image-20210924175335448&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924181502402.png&#34; alt=&#34;image-20210924181502402&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924183301980.png&#34; alt=&#34;image-20210924183301980&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925090027489.png&#34; alt=&#34;image-20210925090027489&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925091034432.png&#34; alt=&#34;image-20210925091034432&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925101735987.png&#34; alt=&#34;image-20210925101735987&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925102715791.png&#34; alt=&#34;image-20210925102715791&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925183232039.png&#34; alt=&#34;image-20210925183232039&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925183255492.png&#34; alt=&#34;image-20210925183255492&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925195126637.png&#34; alt=&#34;image-20210925195126637&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;转化为参数方程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925195158836.png&#34; alt=&#34;image-20210925195158836&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925200545374.png&#34; alt=&#34;image-20210925200545374&#34;&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
        <updated>2021-09-20T05:47:48.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/18/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</id>
        <title>多元函数积分学预备知识</title>
        <link rel="alternate" href="http://example.com/2021/09/18/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
        <content type="html">&lt;h4 id=&#34;空间曲线的切线与法平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲线的切线与法平面&#34;&gt;#&lt;/a&gt; 空间曲线的切线与法平面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918135647271.png&#34; alt=&#34;image-20210918135647271&#34;&gt;&lt;/p&gt;
&lt;p&gt;可直接转化为参数方程&lt;/p&gt;
&lt;h4 id=&#34;空间曲面的切平面和法向量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲面的切平面和法向量&#34;&gt;#&lt;/a&gt; 空间曲面的切平面和法向量&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918135837687.png&#34; alt=&#34;image-20210918135837687&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;2 维参数方程可直接转化为隐式方程&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;空间曲线在平面上的投影&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲线在平面上的投影&#34;&gt;#&lt;/a&gt; 空间曲线在平面上的投影&lt;/h4&gt;
&lt;p&gt;1. 在坐标面上：直接消去对应的值&lt;/p&gt;
&lt;p&gt;2. 在任意面上投影的方向向量：与投影平面的法向量做外积等&lt;/p&gt;
&lt;h4 id=&#34;旋转曲面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#旋转曲面&#34;&gt;#&lt;/a&gt; 旋转曲面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140206768.png&#34; alt=&#34;image-20210918140206768&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;向量的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#向量的运算&#34;&gt;#&lt;/a&gt; 向量的运算&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140314286.png&#34; alt=&#34;image-20210918140314286&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;平面直线及位置关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平面直线及位置关系&#34;&gt;#&lt;/a&gt; 平面直线及位置关系&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140501959.png&#34; alt=&#34;image-20210918140501959&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140520685.png&#34; alt=&#34;image-20210918140520685&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140646053.png&#34; alt=&#34;image-20210918140646053&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;平面与直线的夹角小于 90°&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;场论初步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#场论初步&#34;&gt;#&lt;/a&gt; 场论初步&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140857494.png&#34; alt=&#34;image-20210918140857494&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140913130.png&#34; alt=&#34;image-20210918140913130&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918141032116.png&#34; alt=&#34;image-20210918141032116&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;偏导与微分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143116391.png&#34; alt=&#34;image-20210918143116391&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143421790.png&#34; alt=&#34;image-20210918143421790&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;绕 x 轴旋转，y²=y²+z²&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143600498.png&#34; alt=&#34;image-20210918143600498&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143616611.png&#34; alt=&#34;image-20210918143616611&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;这样操作简化计算&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
        <updated>2021-09-18T05:15:27.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/07/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/</id>
        <title>中央处理器</title>
        <link rel="alternate" href="http://example.com/2021/09/07/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
        <content type="html">&lt;h2 id=&#34;cpu的功能和结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu的功能和结构&#34;&gt;#&lt;/a&gt; CPU 的功能和结构&lt;/h2&gt;
&lt;h5 id=&#34;运算器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算器&#34;&gt;#&lt;/a&gt; 运算器&lt;/h5&gt;
&lt;p&gt;算数逻辑单元&lt;/p&gt;
&lt;p&gt;暂存寄存器（对应用程序员透明）&lt;/p&gt;
&lt;p&gt;累加寄存器&lt;/p&gt;
&lt;p&gt;通用寄存器，程序状态字寄存器（用户可见）&lt;/p&gt;
&lt;p&gt;移位器，计数器&lt;/p&gt;
&lt;h5 id=&#34;控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器&#34;&gt;#&lt;/a&gt; 控制器&lt;/h5&gt;
&lt;p&gt;程序计数器（汇编语言程序员可见）&lt;/p&gt;
&lt;p&gt;指令寄存器，存储器地址寄存器，存储器数据寄存器（，用户汇编语言程序员不可见）&lt;/p&gt;
&lt;p&gt;指令译码器，时序系统，位操作控制信号发生器&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;n 位 cpu 是指数据总线 n 条&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;指令执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令执行过程&#34;&gt;#&lt;/a&gt; 指令执行过程&lt;/h2&gt;
&lt;p&gt;定长，不定长机器周期&lt;/p&gt;
&lt;p&gt;取值周期（包含对指令译码），间址周期，执行周期，中断周期&lt;/p&gt;
&lt;p&gt;4 个标志触发器 FE,IND,EX,INT（控制信号：1-&amp;gt;FE,1-&amp;gt;IND....）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;中断周期的进栈操作是将 sp-1&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;指令执行方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令执行方案&#34;&gt;#&lt;/a&gt; 指令执行方案&lt;/h5&gt;
&lt;p&gt;单指令周期，多指令周期，流水线方案&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;从时间上，cpu 通过指令周期的不同阶段区分指令与数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;从空间上，cpu 通过数据流向判断，指令从内存流向控制器，数据从内存流向运算器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912102623183.png&#34; alt=&#34;image-20210912102623183&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;数据通路的功能和基本机构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据通路的功能和基本机构&#34;&gt;#&lt;/a&gt; 数据通路的功能和基本机构&lt;/h2&gt;
&lt;p&gt;单总线方式：结构简单，但数据传输存在较多的冲突问题，一个时钟周期内可以完成多个相兼容的位操作&lt;/p&gt;
&lt;p&gt;三总线方式&lt;/p&gt;
&lt;p&gt;专用数据通路方式&lt;/p&gt;
&lt;p&gt;cpu 内部总线：实现容易，内部简单，性能低，有交多冲突&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;使能状态 = 允许&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;单周期处理器中所有的指令的指令周期位一个时钟周期，下列关于单周期处理器的叙述错误的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;处理器时钟频率低&lt;/li&gt;
&lt;li&gt;在指令执行过程中控制信号不变&lt;/li&gt;
&lt;li&gt;每条指令的 cpi 为 1&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;可采用单总线结构数据通路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;。。题目&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;控制器的功能和原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器的功能和原理&#34;&gt;#&lt;/a&gt; 控制器的功能和原理&lt;/h2&gt;
&lt;h4 id=&#34;硬布线控制器一般用于risc执行速度快扩充指令困难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬布线控制器一般用于risc执行速度快扩充指令困难&#34;&gt;#&lt;/a&gt; 硬布线控制器（一般用于 RISC，执行速度快，扩充指令困难）&lt;/h4&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
        <updated>2021-09-07T01:16:53.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/05/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</id>
        <title>微分方程</title>
        <link rel="alternate" href="http://example.com/2021/09/05/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
        <content type="html">&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;重点是换元&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170302528.png&#34; alt=&#34;image-20210905170302528&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170313250.png&#34; alt=&#34;image-20210905170313250&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170341667.png&#34; alt=&#34;image-20210905170341667&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170453887.png&#34; alt=&#34;image-20210905170453887&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170515042.png&#34; alt=&#34;image-20210905170515042&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170710011.png&#34; alt=&#34;image-20210905170710011&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;dy 前面有 x 的话，可以先解 dx/dy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905225645731.png&#34; alt=&#34;image-20210905225645731&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100113164.png&#34; alt=&#34;image-20210907100113164&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100124879.png&#34; alt=&#34;image-20210907100124879&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100135038.png&#34; alt=&#34;image-20210907100135038&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100956222.png&#34; alt=&#34;image-20210907100956222&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908134309483.png&#34; alt=&#34;image-20210908134309483&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908134436881.png&#34; alt=&#34;image-20210908134436881&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;没学明白&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908134558622.png&#34; alt=&#34;image-20210908134558622&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135134707.png&#34; alt=&#34;image-20210908135134707&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135151463.png&#34; alt=&#34;image-20210908135151463&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135829969.png&#34; alt=&#34;image-20210908135829969&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135910159.png&#34; alt=&#34;image-20210908135910159&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908140053526.png&#34; alt=&#34;image-20210908140053526&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908140750330.png&#34; alt=&#34;image-20210908140750330&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908140824017.png&#34; alt=&#34;image-20210908140824017&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908144038903.png&#34; alt=&#34;image-20210908144038903&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908144132513.png&#34; alt=&#34;image-20210908144132513&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;积分时别忘了 C&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
        <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
        <updated>2021-09-05T08:43:36.000Z</updated>
    </entry>
</feed>
