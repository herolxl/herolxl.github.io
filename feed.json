{
    "version": "https://jsonfeed.org/version/1",
    "title": "hero的博客",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/11/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "url": "http://example.com/2021/11/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/",
            "title": "数据链路层",
            "date_published": "2021-11-12T10:17:54.000Z",
            "content_html": "<h2 id=\"数据链路层的功能\"><a class=\"anchor\" href=\"#数据链路层的功能\">#</a> 数据链路层的功能</h2>\n<h4 id=\"概要\"><a class=\"anchor\" href=\"#概要\">#</a> 概要</h4>\n<p><strong>将物理层提供的可能出错的物理连接改造为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路</strong>。</p>\n<h4 id=\"为网络层提供的服务\"><a class=\"anchor\" href=\"#为网络层提供的服务\">#</a> 为网络层提供的服务</h4>\n<p>无确认的无连接服务：适用于实时通信或误码率低的通信信道。如：以太网。</p>\n<p>有确认的无连接服务：该服务适用于误码率较高的通信信道无线通信。</p>\n<p>有确认的面向连接服务：帧传翰过程分为三个阶段：<strong>数据链路、传输帧、释放数据链路</strong>，目的计算机对收到的每一帧都要给出确认，</p>\n<p><span class=\"label info\">没有无确认的面向连接服务</span></p>\n<h4 id=\"帧定界-帧同步与透明传输\"><a class=\"anchor\" href=\"#帧定界-帧同步与透明传输\">#</a> 帧定界、帧同步与透明传输</h4>\n<p><strong>帧定界</strong>：首部尾部的控制信息，它们的一个重要作用就是确定帧的界限。<br>\n<strong>帧同步</strong>：接收方应能从接受到的二进制比特流中区分出帧的起始和终止。<br>\n<strong>透明传输</strong>：采取有效的措施解决误认为 “传输结束” 而丢弃后面数据的问题。就是不管所传数据是什么样的比特组合，都应当能在链路上传送。</p>\n<h4 id=\"流量控制\"><a class=\"anchor\" href=\"#流量控制\">#</a> 流量控制</h4>\n<p><strong>问题引入</strong>：收发双方各自的工作速率和缓存空间的差异，出现发送方的发送能力大于接收方的接收能力的现象，如不对其进行流量控制就会导致数据丢失。<strong>流量控制</strong>就是通过控制发送方的发送速度，从而实现流量控制。</p>\n<p><span class=\"label info\">数据链路层控制相邻两点之间的流量，运输层控制源端到目的端的流量</span></p>\n<h4 id=\"差错控制\"><a class=\"anchor\" href=\"#差错控制\">#</a> 差错控制</h4>\n<p><strong>差错控制</strong>就是使发送方确定接收方是否正确收到由其发送的数据的方法。</p>\n<p>位错（数据中的某些位出现错误） CRC 循环冗余码（解决位错）</p>\n<p>帧错（帧的丢失、重复或时序等错误） 自动重传请求 ARQ（解决帧错）。</p>\n<ol start=\"3\">\n<li class=\"quiz\">数据链路层的协议不包括 {.gap} 。\n<ul class=\"options\">\n<li>定义数据格式</li>\n<li class=\"correct\">为终端节点隐藏物理传输的细节</li>\n<li>提供节点之间的可靠传输</li>\n<li>控制对物理传输介质的访问</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"组帧\"><a class=\"anchor\" href=\"#组帧\">#</a> 组帧</h2>\n<p><strong>字符计数法</strong>就是指在帧头部使用一个计数字段来标明帧内字符数</p>\n<p>该方法的缺点就是如果计数字段出错，收发双方将失去同步从而导致错误。</p>\n<p>计数值要加上自身的一位</p>\n<p><strong>字符填充法使用特定字符来定界一帧的开始和结束</strong>。例如：控制字符<strong> SOH</strong> 放在帧的最前面，表示帧的首部开始，控制字符<strong> EOT</strong> 表示帧的结束。当信息位出现特殊字符时可以在特殊字符前添加一个转义字符<strong> ESC</strong> 加以区分。</p>\n<p>复杂，不兼容</p>\n<p><strong>零比特填充的首尾标志法（目前常用）：使用一个特定的比特模式，即 01111110 来标志一帧的开始和结束</strong>。在发送信息时，遇到 5 个连续的 1 就自动在后面加 0。当收到信息时，遇到 5 个连续的 1 就自动在后面减 0。</p>\n<p>优点：零比特填充法很容易由硬件来实现，性能优于字符填充法。</p>\n<p><strong>违规编码法</strong>（目前常用）：在<strong>物理层进行比特编码时</strong>，曼彻斯特编码中比特 ”1&quot;编码成 “高－高 “ 电平，比特”0&quot; 编码成 “低－低 “ 电平（由于正常情况下不会出现这种情况，所以可以用这个办法来进行定界）</p>\n<h2 id=\"差错控制-2\"><a class=\"anchor\" href=\"#差错控制-2\">#</a> 差错控制</h2>\n<h3 id=\"检错编码\"><a class=\"anchor\" href=\"#检错编码\">#</a> 检错编码</h3>\n<h4 id=\"奇偶检验码\"><a class=\"anchor\" href=\"#奇偶检验码\">#</a> 奇偶检验码</h4>\n<p>奇偶校验码由 n-1 位数据和 1 位校验位组成，校验位用于调节发送信息中的 1 的个数是偶数还是奇数。</p>\n<h4 id=\"循环冗余码\"><a class=\"anchor\" href=\"#循环冗余码\">#</a> 循环冗余码</h4>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112195334860.png\" alt=\"image-20211112195334860\"></p>\n<p><span class=\"rainbow\">除数最高位和最低位必须为 1</span></p>\n<p><span class=\"rainbow\">凡是接收端数据链路层接受的帧都没有差错</span></p>\n<p>CRC 有纠错功能，只是数据链路层仅使用它的检错功能</p>\n<h3 id=\"纠错编码\"><a class=\"anchor\" href=\"#纠错编码\">#</a> 纠错编码</h3>\n<p>在数据通信的过程中，有一个方法就是添加<strong>足够的冗余信息</strong>，使得接收方能够推理出发送方实际传送的比特串。<strong>常见的纠错编码就是海明码</strong>。</p>\n<p>（1）确定海明码的位数：<br>\n设 n 为有效信息的位数，k 为校验位的位数，则信息位 n 和校验位 k 应满足 n+k&lt;=2^k-1（若要检测两位错，则需再增加 1 位检验位，即 k+1 位）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210216095428952.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>（2）确定校验位的分布<br>\n规定校验位在海明位号为 2^（i-1）位詈上，其余各位为信息位。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210216095543512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>（3）分组形成校验关系<br>\n被校验数据位的海明位号等于校验该数位的各校验位海明位号之和。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210216095731114.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>（4）校验位取值</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210216095920301.png#pic_center\" alt=\"在这里插入图片描述\">    校验位的值为对应组的所有位求异或。</p>\n<p>（5）海明码的校验原理<br>\n每个校验组分别利用校验位和参与形成该校验位的信息位进行奇偶校验检查，构成 k 个校验方程：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210216095935551.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<pre><code>若s3s2s1的值为0000，则说明无措，否则说明有错，而且这个数就是错误的位号，如0001，就说明第一位出错即H1出错。\n</code></pre>\n",
            "tags": [
                "考研",
                "计算机网络"
            ]
        },
        {
            "id": "http://example.com/2021/11/12/%E6%94%BF%E6%B2%BB%E9%80%89%E6%8B%A9%E9%A2%98%E9%94%99%E9%A2%98/",
            "url": "http://example.com/2021/11/12/%E6%94%BF%E6%B2%BB%E9%80%89%E6%8B%A9%E9%A2%98%E9%94%99%E9%A2%98/",
            "title": "政治选择题错题",
            "date_published": "2021-11-12T09:36:25.000Z",
            "content_html": "",
            "tags": [
                "考研",
                "政治"
            ]
        },
        {
            "id": "http://example.com/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%8F%99/",
            "url": "http://example.com/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%8F%99/",
            "title": "计算机网络概叙",
            "date_published": "2021-11-11T06:17:17.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2021/11/10/%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98/",
            "url": "http://example.com/2021/11/10/%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98/",
            "title": "数学真题",
            "date_published": "2021-11-10T11:11:16.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2021/11/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2021/11/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "内存管理",
            "date_published": "2021-11-08T15:47:10.000Z",
            "content_html": "<h2 id=\"内存管理概念\"><a class=\"anchor\" href=\"#内存管理概念\">#</a> 内存管理概念</h2>\n<h4 id=\"内存管理的功能\"><a class=\"anchor\" href=\"#内存管理的功能\">#</a> 内存管理的功能</h4>\n<p>（1）内存空间的分配与回收。<br>\n（2）地址转换。<br>\n（3）内存空间的扩充。<br>\n（4）存储保护。</p>\n<p>（1）编译。由编译程序将用户源代码变异成若干目标模块。<br>\n（2）链接（<strong>生成逻辑地址</strong>）。由链接程序将编译后形成的一组目标模块及所需的库函数链接在一起，形成一个完成的装入模块。<br>\n（3）装入。由装入程序将装入模块装入内存中运行。<br>\n程序的链接有以下三种方式：<br>\n（1）静态链接。<br>\n（2）装入时动态链接。<br>\n（3）运行时动态链接。其优点是便于修改和更新，便于实现对目标模块的共享。<br>\n内存的装入模块在装入内存时，同样有以下三种方式：<br>\n（1）绝对装入。只适用于单道程序环境。<br>\n（2）可重定位装入（静态重定位）。<br>\n静态重定位的特点是：一个作业装入内存时，必须给它分配要求的全部内存空间，若没有足够的内存，则不能装入该作业，此外，作业一旦进入内存，整个运行期间就不能在内存中移动，也不能再申请内存空间。<br>\n（3）动态运行时装入。也称动态重定位。<br>\n动态重定位特点：需要重定位寄存器，可以将程序分配到不连续的存储区中，便于程序段的共享，可以向用户提供更大的地址空间（地址空间大于存储空间）。</p>\n<h4 id=\"内存保护\"><a class=\"anchor\" href=\"#内存保护\">#</a> 内存保护</h4>\n<p>设置一对上、下限寄存器</p>\n<p>重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）</p>\n<h4 id=\"连续分配管理\"><a class=\"anchor\" href=\"#连续分配管理\">#</a> 连续分配管理</h4>\n<h5 id=\"单一连续分配\"><a class=\"anchor\" href=\"#单一连续分配\">#</a> 单一连续分配</h5>\n<p>内存分为系统区和用户区</p>\n<p>优点是简单、无外部碎片，可以采用覆盖技术，不需要额外的技术支持。缺点是只能用于单用户、单任务的操作系统中，有内部碎片，存储器的利用率低。</p>\n<h5 id=\"固定分区分配\"><a class=\"anchor\" href=\"#固定分区分配\">#</a> 固定分区分配</h5>\n<p>适用于多道程序的存储，无外部碎片；</p>\n<p>主存利用率第，有内部碎片，而且可能太大，放不进去</p>\n<h5 id=\"动态分区分配\"><a class=\"anchor\" href=\"#动态分区分配\">#</a> 动态分区分配</h5>\n<p>1）首次适用算法：最简单，最快，最好<br>\n（2）最佳适应算法：性能差，会产生很多小内部碎片<br>\n（3）最坏适应算法：性能差，很容易导致大内存块没了<br>\n（4）邻近适应算法：又称循环首次适应算法，性能比首次适应算法差</p>\n<h4 id=\"非连续分配管理\"><a class=\"anchor\" href=\"#非连续分配管理\">#</a> 非连续分配管理</h4>\n",
            "tags": [
                "考研",
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2021/11/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2021/11/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
            "title": "进程管理",
            "date_published": "2021-11-04T15:06:40.000Z",
            "content_html": "<h2 id=\"进程与线程\"><a class=\"anchor\" href=\"#进程与线程\">#</a> 进程与线程</h2>\n<h5 id=\"进程的概念与特征\"><a class=\"anchor\" href=\"#进程的概念与特征\">#</a> 进程的概念与特征</h5>\n<p>进程实现了操作系统的 并发性和共享性</p>\n<p>进程映像：程序段，数据段，PCB</p>\n<p><span class=\"label primary\">创建进程实质上是创建 PCB</span></p>\n<p><span class=\"label info\">进程是程序在数据集上的运行过程</span></p>\n<p>进程特征：动态，并发，独立，异步，结构性</p>\n<h5 id=\"进程的状态与转换\"><a class=\"anchor\" href=\"#进程的状态与转换\">#</a> 进程的状态与转换</h5>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211104232451442.png\" alt=\"image-20211104232451442\"></p>\n<p><span class=\"label warning\">I/O 请求应改为事件等待，因为还有资源等待</span></p>\n<p>每个状态主要是看 cpu 与其他资源是否齐全</p>\n<p>运行态 -&gt; 阻塞态（主动）</p>\n<p>阻塞态 -&gt; 就绪态（被动）</p>\n<h5 id=\"进程控制\"><a class=\"anchor\" href=\"#进程控制\">#</a> 进程控制</h5>\n<p><span class=\"label primary\">关中断，开中断实现原语的一气呵成</span></p>\n<p>一般把进程控制用的程序段称为原语</p>\n<p>用户 登录系统，作业调度，系统提供服务，用户程序的应用请求都会引起进程的创建</p>\n<p><span class=\"label primary\">PCB 申请失败则进程创建失败，若资源不足，不是创建失败，而是处于阻塞态</span></p>\n<p>进程的终止：正常结束，异常结束，外界干预</p>\n<p>对于普通的进程而言，其创建，撤销及要求由系统设备完成的 I/O 操作，都是利用系统调用进入内核，再由内核程序处理</p>\n<p>进程切换要保存处机上下文（程序计数器和其他寄存器）</p>\n<p><span class=\"label warning\">注意进程切换和处理机模式切换时不同的</span></p>\n<p>::info</p>\n<p>调度和切换的区别：调度是决策行为，切换是执行行为</p>\n<p>::</p>\n<h5 id=\"进程的组织\"><a class=\"anchor\" href=\"#进程的组织\">#</a> 进程的组织</h5>\n<p>进程控制块：</p>\n<p>​\t进程描述信息：进程标识符，用户标识符</p>\n<p>​\t进程管理信息：进程状态，优先级，首地址等</p>\n<p>​\t资源分配清单：代码段制作，数据段指针，堆栈段指针</p>\n<p>​\t处理及相关信息：各寄存器</p>\n<p>PCB 组织方式：链接方式，索引方式</p>\n<h5 id=\"进程的通信\"><a class=\"anchor\" href=\"#进程的通信\">#</a> 进程的通信</h5>\n<p>PV 操作是低级通信方式</p>\n<p>共享存储：低级方式的共享基于数据结构的共享，高级方式的共享基于存储区的共享</p>\n<p>消息传递：直接通信方式（挂在消息队列上），间接通信方式（放在邮箱）</p>\n<p>管道通信：共享文件（pipe 文件或管道）</p>\n<p><span class=\"label info\">半双工通信，从管道读取数据时一次性操作，数据一旦被读取，就被抛弃</span></p>\n<h5 id=\"线程概念和多线程模型\"><a class=\"anchor\" href=\"#线程概念和多线程模型\">#</a> 线程概念和多线程模型</h5>\n<p>线程 ：轻量级进程，是一个基本的 cpu 执行单元，也是程序执行流的最小单元，由线程 id，程序计数器，寄存器集合，堆栈组成</p>\n<p>线程是独立调度的基本单位，进程是资源调度的基本单位</p>\n<p>线程可提高系统的并发性</p>\n<p>线程切换比进程切换的开销更小</p>\n<p>进程通信需要同步互斥手段辅佐，线程可直接读写进程数据段进行通信</p>\n<p><span class=\"label info\">用户级线程：线程管理工作都由应用系统完成，应用程序可以通过线程库设计成多线程</span></p>\n<p><span class=\"label info\">内核级线程：线程管理工作都由内核完成</span></p>\n<p>多对一模型：效率高，各线程不能并行，一旦阻塞整个进程会被阻塞</p>\n<p>一对一模型：并发能力强，用户态和内核态的切换开销大 <span class=\"rainbow\">操作系统为每个用户级线程建立一个线程控制块</span></p>\n<p>多对多模型</p>\n<hr>\n<p><span class=\"rainbow\">2 进制代码和常量放在正文段，动态分配的存储区在数据堆段，临时使用的变量在数据栈段</span></p>\n<p><span class=\"rainbow\">同一进程或不同进程的线程都能并发执行</span></p>\n<p><span class=\"rainbow\">父进程与子进程不共享虚拟地址空间</span></p>\n<ol start=\"3\">\n<li class=\"quiz\">系统动态 DLL 库中的系统线程，被不同的进程调用，它们是 [] 的进程 {.gap} 。\n<ul class=\"options\">\n<li>不同</li>\n<li class=\"correct\">相同</li>\n<li>可能相同，不同</li>\n<li>不能被调用</li>\n</ul>\n</li>\n<li class=\"quiz\">以下描述中，不是多线程系统的特长的是<span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>利用线程并行的执行矩阵乘法运算</li>\n<li class=\"correct\">键盘驱动程序为每个正在运行的应用配备一个线程，用以响应键盘输入</li>\n<li>web 服务器利用线程响应 HTTP 请求</li>\n<li>基于 GUI 的调式程序用不同的线程分别处理用户输入</li>\n</ul>\n</li>\n<li class=\"quiz\">以下关于线程的描述错误的是<span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>内核级线程的调度由操作系统来完成</li>\n<li class=\"correct\">操作系统为每个用户级线程创建一个线程控制块</li>\n<li>用户级线程间的切换比内核级切换效率高</li>\n<li>用户级线程可以在不支持内核级线程的操作系统上实现</li>\n</ul>\n</li>\n<li class=\"quiz\">以下关于管道通信的描述正确的是<span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>一个管道可以实现双向数据传输</li>\n<li class=\"correct\">进程堆管道进行读操作和写操作都有可能被阻塞</li>\n<li>管道容量只受到磁盘容量大小限制</li>\n<li>一个管道只能由一个读进程或一个写进程对其操作</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"处理机调度\"><a class=\"anchor\" href=\"#处理机调度\">#</a> 处理机调度</h2>\n<h5 id=\"调度的概念\"><a class=\"anchor\" href=\"#调度的概念\">#</a> 调度的概念</h5>\n<p>作业调度 （高级调度）：每个作业只调入调出一次  次数少</p>\n<p>内存调度（中级调度） ：进程进入挂起态（提高内存利用率和系统吞吐量） 次数中</p>\n<p>进程调度（低级调度） ：次数多</p>\n<h5 id=\"调度的时机\"><a class=\"anchor\" href=\"#调度的时机\">#</a> 调度的时机</h5>\n<p>不能进行进程调度的情况</p>\n<p>1. 在处理中断的过程中</p>\n<p>2. 进程在操作系统内核临界区</p>\n<p>3. 其他需要完全屏蔽中断的原子操作过程中</p>\n<p><span class=\"rainbow\">进程处于临界区可以进行处理机调度</span></p>\n<h5 id=\"进程调度方式\"><a class=\"anchor\" href=\"#进程调度方式\">#</a> 进程调度方式</h5>\n<p>非剥夺式（适用于大多批处理系统，不适合分时系统和实时系统）</p>\n<p>剥夺式</p>\n<h5 id=\"调度的性能\"><a class=\"anchor\" href=\"#调度的性能\">#</a> 调度的性能</h5>\n<p>cpu 利用率</p>\n<p>系统吞吐量：单位时间的作业完成数</p>\n<p>周转时间：作业完成时间 - 作业提交时间</p>\n<p>带权周转时间：作业周转时间 / 作业运行时间</p>\n<p>等待时间</p>\n<p>响应时间</p>\n<h5 id=\"调度算法\"><a class=\"anchor\" href=\"#调度算法\">#</a> 调度算法</h5>\n<p>先来先服务（FCFS）：算法简单，但是效率低，对长作业比较有利，但对短作业不利，有利于 CPU 繁忙型作业，不利于 I/O 繁忙型作业。</p>\n<p>短作业优先（SJF）（可抢，可不抢）：1）对长作业不利，造成<strong>饥饿现象</strong>（2）没有考虑作业的紧迫性，因而不能保证紧迫性作业会被及时处理。（3）作业长短是由用户提供的预估时间而定的，因而无法做到真正的短作业优先。</p>\n<p><span class=\"rainbow\">在所有进程都几乎同时到达或者是抢占式时，平均等待时间和周转时间最小</span></p>\n<p>优先级调度算法（可抢，可不抢）<strong>饥饿</strong>：</p>\n<p>1. 系统进程 &gt; 用户进程<br>\n 2. 交互型进程 &gt; 非交互型进程<br>\n 3.I/O 进程 &gt; 计算型进程（CPU 繁忙型）</p>\n<p>高响应比优先（非抢）： <strong>响应比 =（等待时间 + 要求服务时间）/ 要求服务时间</strong></p>\n<p>时间片轮转（RR）(抢占式算法): 默认新到达的进程先进入队列，刚完成时间片的进程后进入队列</p>\n<p>多级反馈队列调度（抢占）：</p>\n<p>（1）终端型作业用户，短作业优先。<br>\n（2）短批处理作业用户，周转时间短。<br>\n（3）长批处理作业用户：不会长期得不到处理 **（但是会导致饥饿）**。</p>\n<hr>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231028476.png\" alt=\"image-20211106231028476\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231047537.png\" alt=\"image-20211106231047537\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231123597.png\" alt=\"image-20211106231123597\"></p>\n<h2 id=\"进程同步\"><a class=\"anchor\" href=\"#进程同步\">#</a> 进程同步</h2>\n<h4 id=\"进程同步的概念\"><a class=\"anchor\" href=\"#进程同步的概念\">#</a> 进程同步的概念</h4>\n<p>（1）进入区：进程是否可以进入临界区，若能进入临界区则设置正在访问临界区的标志。<br>\n（2）临界区：可以访问临界资源的代码。<br>\n（3）退出区：将正在访问临界区的标志清除。<br>\n（4）剩余区：代码中的其余部分。</p>\n<p>为禁止两个进程同时进入临界区，同步机制应该遵循以下规则：<br>\n（1）空闲让进。<br>\n（2）忙则等待。<br>\n（3）有限等待。<br>\n（4）让权等待。</p>\n<h4 id=\"实现临界区互斥的基本方法\"><a class=\"anchor\" href=\"#实现临界区互斥的基本方法\">#</a> 实现临界区互斥的基本方法</h4>\n<h5 id=\"软件方法\"><a class=\"anchor\" href=\"#软件方法\">#</a> 软件方法</h5>\n<p>单标志检查法：只能交替进入，违背空闲让进</p>\n<p>双标志先检查法：可能同时进入临界区，违背忙则等待</p>\n<p>双标志后检查法：可能相互谦让，造成饥饿</p>\n<p>Peterson：未解决让权等待</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Pi 进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \tflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>turn<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>turn<span class=\"token operator\">=</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 临界区操作 j</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 剩余区</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//Pj 进程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \tflag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span>turn<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>turn<span class=\"token operator\">=</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 临界区操作</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tflag<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 剩余区</span></pre></td></tr></table></figure><h5 id=\"硬件方式\"><a class=\"anchor\" href=\"#硬件方式\">#</a> 硬件方式</h5>\n<p>中断屏蔽</p>\n<p>TestAndSet 指令</p>\n<p>Swap 指令</p>\n<h5 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h5>\n<p>整形信号量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>S<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    S<span class=\"token operator\">=</span>S<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>记录信号量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 注意 & lt;0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        S<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">block</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 注意 & lt;=0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">.</span>value<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        S<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"管程\"><a class=\"anchor\" href=\"#管程\">#</a> 管程</h4>\n<p>（1）管程的名称。<br>\n（2）局部于管程的共享结构数据说明。<br>\n（3）对该数据结构进行操作的一组过程 (函数)。<br>\n（4）对局部于管程内部的共享数据设置初始值的语句。</p>\n<p>管程把对共享资源的操作封装起来，管程内的共享数据结构只能被管程内的过程所访问。</p>\n<p>每次仅允许一个进程进入管程，从而实现进程互斥。</p>\n<h5 id=\"条件变量\"><a class=\"anchor\" href=\"#条件变量\">#</a> 条件变量</h5>\n<p>x.wait：当 x 对应的条件不满足时，正在调用管程的进程调用 x.wait 将自己插入到 x 条件的等待队列，并释放管程，此时其他进程可以使用该管程。<br>\nx.signal：x 对应的条件发生了变化，则调用 x.signal，唤醒了一个因 x 条件而阻塞的进程。<br>\n条件变量与信号量的比较：<br>\n相似点：条件变量的 wait/signal 操作类似于信号量的 P/V 操作，可以实现进程的阻塞和唤醒。<br>\n不同点：条件变量是 “没有值的”，仅实现了 “排队等待” 的功能；而信号量是 “有值的”，信号量反映了剩余资源的数目，而在管程中剩余资源数用共享数据结构记录。</p>\n<h4 id=\"经典同步问题\"><a class=\"anchor\" href=\"#经典同步问题\">#</a> 经典同步问题</h4>\n<h5 id=\"生产者与消费者模型\"><a class=\"anchor\" href=\"#生产者与消费者模型\">#</a> 生产者与消费者模型</h5>\n<p>注意 mutex 和 empty（或 full）的先后顺序，会造成死锁</p>\n<h5 id=\"读者与写者问题\"><a class=\"anchor\" href=\"#读者与写者问题\">#</a> 读者与写者问题</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore rmutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> wmutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 互斥锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> readcount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token comment\">//P(w);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关锁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readcount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>wmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 把写操作锁住，只需要在第一次读时</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          readcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读者数目 + 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>rmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 开锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token comment\">//V(w);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关锁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          readcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读者数目 - 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readcount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token function\">V</span><span class=\"token punctuation\">(</span>wmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没有读者，执行写操作</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>rmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 开锁</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token comment\">//P(w);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>rmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>rmutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token comment\">//V(w);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>会造成饥饿问题，加上注释部分可实现<strong>相对公平</strong></p>\n<h5 id=\"哲学家进餐问题\"><a class=\"anchor\" href=\"#哲学家进餐问题\">#</a> 哲学家进餐问题</h5>\n<p>会造成死锁</p>\n<p>解决方案：1. 同时拿起左右两根筷子</p>\n<p>2. 偶数哲学家先拿左筷子，奇数哲学家先拿右筷子</p>\n<p>3. 只允许 n-1 个人拿筷子</p>\n<h5 id=\"吸烟者问题\"><a class=\"anchor\" href=\"#吸烟者问题\">#</a> 吸烟者问题</h5>\n<p>将不同材料整合为一个材料的思想</p>\n<p>其他实现比较简单</p>\n<hr>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107233843200.png\" alt=\"image-20211107233843200\"><span class=\"rainbow\"> 互斥信号量初值为 1</span></p>\n<p><span class=\"rainbow\">多个进程在任意时刻可共享的代码为可重入代码（纯码）（不可修改的代码）</span></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107233806315.png\" alt=\"image-20211107233806315\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234055791.png\" alt=\"image-20211107234055791\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234025816.png\" alt=\"image-20211107234025816\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234208255.png\" alt=\"image-20211107234208255\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234235556.png\" alt=\"image-20211107234235556\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234257386.png\" alt=\"image-20211107234257386\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234316820.png\" alt=\"image-20211107234316820\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234336105.png\" alt=\"image-20211107234336105\"></p>\n<h2 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h2>\n<p>死锁产生的原因有：1. 系统资源的竞争。2. 进程推进顺序非法。<br>\n死锁产生的必要条件：1. 互斥条件：2. 不可剥夺条件 3. 请求并保持条件 4. 循环等待条件<br>\n::info</p>\n<p>死锁检测，死锁避免，死锁预防</p>\n<p>对死锁的处理从宽到严，并发性从大到小</p>\n<p>::</p>\n<h4 id=\"死锁预防\"><a class=\"anchor\" href=\"#死锁预防\">#</a> 死锁预防</h4>\n<h5 id=\"破坏互斥条件使临界资源共享不现实\"><a class=\"anchor\" href=\"#破坏互斥条件使临界资源共享不现实\">#</a> 破坏互斥条件 (使临界资源共享，不现实)</h5>\n<h5 id=\"破坏不剥夺条件\"><a class=\"anchor\" href=\"#破坏不剥夺条件\">#</a> 破坏不剥夺条件</h5>\n<p>实现比较复杂，反复剥夺会增加系统开销，降低系统吞吐量，适合 cpu，寄存器等容易回复的资源</p>\n<h5 id=\"破坏请求并保持条件\"><a class=\"anchor\" href=\"#破坏请求并保持条件\">#</a> 破坏请求并保持条件</h5>\n<p>采用预先静态分配方法，即进程在运行前就一次性申请完所有资源。<br>\n特点：实现简单，但是资源被严重浪费，甚至可能导致进程饥饿。</p>\n<h5 id=\"破坏循环等待条件\"><a class=\"anchor\" href=\"#破坏循环等待条件\">#</a> 破坏循环等待条件</h5>\n<p>采用顺序资源分配法，首先给系统资源进行编号，规定每个进程按照编号递增的顺序对资源进行申请，同类资源一次性申请完。</p>\n<p>当使用资源顺序和规定顺序不同，会造成浪费</p>\n<h4 id=\"死锁避免\"><a class=\"anchor\" href=\"#死锁避免\">#</a> 死锁避免</h4>\n<p><span class=\"rainbow\">并非所有不安全状态都为死锁状态</span></p>\n<h5 id=\"银行家算法\"><a class=\"anchor\" href=\"#银行家算法\">#</a> 银行家算法</h5>\n<p>要注意先判断<strong>所需资源数</strong>和<strong>申请资源数</strong></p>\n<p>还有<strong>安全性算法</strong></p>\n<h4 id=\"死锁检测和解除\"><a class=\"anchor\" href=\"#死锁检测和解除\">#</a> 死锁检测和解除</h4>\n<h5 id=\"资源分配图\"><a class=\"anchor\" href=\"#资源分配图\">#</a> 资源分配图</h5>\n<p>请求边，分配边</p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108000010609.png\" alt=\"image-20211108000010609\"></p>\n<h5 id=\"死锁定理\"><a class=\"anchor\" href=\"#死锁定理\">#</a> 死锁定理</h5>\n<p>在资源分配图中找到分配满足的进程，然后消去其请求边与分配边，如果最后所有边都可以被消除，那么就是可以简化的，不存在死锁，否则存在死锁。</p>\n<h5 id=\"死锁解除\"><a class=\"anchor\" href=\"#死锁解除\">#</a> 死锁解除</h5>\n<p>资源剥夺法：挂起某些死锁进程，抢占资源，将这些资源分配给其他死锁进程，但是要防止挂起时间过长。<br>\n撤销进程法：强制撤销部分甚至全部死锁进程，并且剥夺他们的资源，撤销原则可以根据优先级和撤销进程的代价进行。<br>\n进程回退法：让一个或者多个进程回退到足以回避死锁的地步，进程回退时，自动释放资源而非剥夺，要求系统保持进程历史信息，设置还原点。</p>\n<hr>\n<p><span class=\"rainbow\">银行家算法不能检测死锁（哎）</span></p>\n<ol start=\"3\">\n<li class=\"quiz\">引入多道程序技术的前提之一是系统具有 {.gap} \n<ul class=\"options\">\n<li>多个 cpu</li>\n<li class=\"correct\">中断功能</li>\n<li>多个终端</li>\n<li>不分时功能</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001058938.png\" alt=\"image-20211108001058938\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001112463.png\" alt=\"image-20211108001112463\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001501032.png\" alt=\"image-20211108001501032\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001524691.png\" alt=\"image-20211108001524691\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001542686.png\" alt=\"image-20211108001542686\"></p>\n",
            "tags": [
                "考研",
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2021/10/29/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/",
            "url": "http://example.com/2021/10/29/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/",
            "title": "统计量及其分布",
            "date_published": "2021-10-29T07:54:32.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2021/10/11/%E7%9B%B8%E4%BC%BC%E7%90%86%E8%AE%BA/",
            "url": "http://example.com/2021/10/11/%E7%9B%B8%E4%BC%BC%E7%90%86%E8%AE%BA/",
            "title": "相似理论",
            "date_published": "2021-10-11T02:27:26.000Z",
            "content_html": "<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211014141754934.png\" alt=\"image-20211014141754934\"></p>\n<p><span class=\"rainbow\">P 相当于列操作，P 的逆相当于同等操作的行操作</span></p>\n<p><span class=\"rainbow\">一定要注意是不是单位向量</span></p>\n<p><span class=\"rainbow\">实对乘矩阵不同特征值的特征向量相互正交</span></p>\n<p><span class=\"rainbow\">如果一个矩阵的特征值没有 0，则这个矩阵可逆</span></p>\n<p><span class=\"rainbow\">相似必有相同的特征值，反之则不然，因为可能不能相似对角化</span></p>\n<p><img data-src=\"image-20211011105111165.png\" alt=\"image-20211011105111165\"></p>\n<p><img data-src=\"image-20211011105129684.png\" alt=\"image-20211011105129684\"></p>\n<p><span class=\"rainbow\">AP=PB，P 可逆，则 A,B 相似</span></p>\n<p>4 个性质</p>\n<p><img data-src=\"image-20211011203108513.png\" alt=\"image-20211011203108513\"></p>\n<p>正交化</p>\n<p><img data-src=\"image-20211011210843148.png\" alt=\"image-20211011210843148\"></p>\n<hr>\n<p><img data-src=\"image-20211011213003959.png\" alt=\"image-20211011213003959\"></p>\n<p><span class=\"rainbow\">任意实对称矩阵，都可由两个正交向量相乘的矩阵加上他的反制矩阵组成，所以必有特征值：k，-k，0</span></p>\n<p><img data-src=\"image-20211011213559807.png\" alt=\"image-20211011213559807\"></p>\n<p><img data-src=\"image-20211012095208574.png\" alt=\"image-20211012095208574\"></p>\n<p><span class=\"rainbow\">方程组也可以特征值来求</span></p>\n<p><img data-src=\"image-20211012150502145.png\" alt=\"image-20211012150502145\"></p>\n<p><img data-src=\"image-20211012150426162.png\" alt=\"image-20211012150426162\"></p>\n<hr>\n<p><img data-src=\"image-20211013110405267.png\" alt=\"image-20211013110405267\"></p>\n<p><img data-src=\"image-20211013110624690.png\" alt=\"image-20211013110624690\"></p>\n<p><img data-src=\"image-20211013110647808.png\" alt=\"image-20211013110647808\"></p>\n<p><img data-src=\"image-20211013110722470.png\" alt=\"image-20211013110722470\"></p>\n",
            "tags": [
                "考研",
                "线性代数"
            ]
        },
        {
            "id": "http://example.com/2021/09/26/%E8%A1%8C%E5%88%97%E5%BC%8F/",
            "url": "http://example.com/2021/09/26/%E8%A1%8C%E5%88%97%E5%BC%8F/",
            "title": "行列式",
            "date_published": "2021-09-26T02:42:42.000Z",
            "content_html": "<p><img data-src=\"image-20210926105834477.png\" alt=\"image-20210926105834477\"></p>\n<p><img data-src=\"image-20210926110021570.png\" alt=\" \"></p>\n<p><img data-src=\"image-20210926134342100.png\" alt=\"image-20210926134342100\"></p>\n<hr>\n<p><img data-src=\"image-20210926112731960.png\" alt=\"image-20210926112731960\"></p>\n<p><img data-src=\"image-20210926114959041.png\" alt=\"image-20210926114959041\"></p>\n<hr>\n<p><img data-src=\"image-20210926113931510.png\" alt=\"image-20210926113931510\"></p>\n<hr>\n<p><img data-src=\"image-20210926112742335.png\" alt=\"image-20210926112742335\"></p>\n<h2 id=\"抽象行列式的计算\"><a class=\"anchor\" href=\"#抽象行列式的计算\">#</a> 抽象行列式的计算</h2>\n<p><img data-src=\"image-20210926142715643.png\" alt=\"image-20210926142715643\"></p>\n<p>矩阵的性质，相似理论等</p>\n<hr>\n<p><span class=\"rainbow\">注意爪形的计算</span></p>\n<hr>\n<p><img data-src=\"image-20210926153823858.png\" alt=\"image-20210926153823858\"></p>\n<h2 id=\"代数余子式\"><a class=\"anchor\" href=\"#代数余子式\">#</a> 代数余子式</h2>\n<p>矩阵和特征值。。。</p>\n",
            "tags": [
                "考研",
                "线性代数"
            ]
        },
        {
            "id": "http://example.com/2021/09/26/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9B%BE%E5%BD%A2/",
            "url": "http://example.com/2021/09/26/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9B%BE%E5%BD%A2/",
            "title": "几种常见的空间图形",
            "date_published": "2021-09-26T00:54:38.000Z",
            "content_html": "<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926085928910.png\" alt=\"image-20210926085928910\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926090536981.png\" alt=\"image-20210926090536981\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926090607583.png\" alt=\"image-20210926090607583\"></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/09/20/%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2021/09/20/%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/",
            "title": "输入/输出系统",
            "date_published": "2021-09-20T15:03:36.000Z",
            "content_html": "<h3 id=\"磁盘存储器\"><a class=\"anchor\" href=\"#磁盘存储器\">#</a> 磁盘存储器</h3>\n<p>磁头数：记录面数</p>\n<p>柱面数：磁道数</p>\n<p>扇区数：磁盘读写的最小单位</p>\n<hr>\n<p>磁盘容量：非格式化容量：磁化单元总数，由道密度和位密度计算 --- 格式化容量：按照特定格式存储，容量比非格式化小</p>\n<p>记录密度：道密度，位密度，面密度 = 道密度 * 位密度</p>\n<p>平均存取时间：寻道时间，旋转延迟时间（旋转一周时间的一半），传输时间（扫过扇区的时间）</p>\n<p>数据传输率：=rN，设磁盘转速为 r 转 / 秒，每条磁道容量为 N 字节</p>\n<hr>\n<p>磁盘地址（驱动器号 -- 柱面 (磁道) 号 -- 盘面号 -- 扇区号）</p>\n<p><span class=\"rainbow\">汉字内码在主存中占 2B</span></p>\n<h2 id=\"io接口\"><a class=\"anchor\" href=\"#io接口\">#</a> I/O 接口</h2>\n<h5 id=\"io接口的功能\"><a class=\"anchor\" href=\"#io接口的功能\">#</a> I/O 接口的功能</h5>\n<p>进行地址译码和设备选择</p>\n<p>实现数据缓冲</p>\n<p>传送控制命令和状态信息</p>\n<p>信号格式的转换（主机与外设的电平，数据格式可能存在差异）</p>\n<h5 id=\"io接口的基本结构\"><a class=\"anchor\" href=\"#io接口的基本结构\">#</a> I/O 接口的基本结构</h5>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921110825448.png\" alt=\"image-20210921110825448\"></p>\n<p>地址线：用以选择和主机交换信息的 ++ 寄存器 ++</p>\n<p>控制线：传送 读 / 写信号 ，此外还会传送仲裁信号，握手信号</p>\n<p>I/O 控制逻辑：对控制寄存器的命令字进行译码，并通过外设界面控制逻辑送到外设 ---- 同时将数据缓冲寄存器的数据发到外设，或者反过来</p>\n<hr>\n<p>对数据缓冲寄存器，状态 / 控制寄存器的访问操作通过 ++ I/O 指令 <ins>完成，只能在操作系统内核的底层 I/O 软件中使用，是</ins> 特权指令 ++</p>\n<h5 id=\"io接口的类型\"><a class=\"anchor\" href=\"#io接口的类型\">#</a> I/O 接口的类型</h5>\n<p>1. 按数据传送方式：并行接口（一个字节或字的所有位同时传输），串行接口</p>\n<p>（这里所说的数据传送方式指的是外设和接口一侧，主机和接口一侧数据总是并行传送）</p>\n<p>2. 按主机访问 I/O 设备的控制方式：程序查询接口，中断接口，DMA 接口</p>\n<p>3. 按功能的灵活性：可编程接口，不可</p>\n<h5 id=\"io端口及其编址\"><a class=\"anchor\" href=\"#io端口及其编址\">#</a> I/O 端口及其编址</h5>\n<p>数据端口，状态端口，控制端口，若干端口加上相应的控制逻辑电路组成接口（通常 CPU 能对数据端口进行读写，对状态端口只读，对控制端口只写）</p>\n<hr>\n<p>统一编址：存储器映射方式</p>\n<p>优点：不需要专门的输入输出指令，使 cpu 访问 I/O 操作更灵活，有较大的编址空间</p>\n<p>缺点：占用存储器空间</p>\n<p>独立编址：I/O 映射方式（要设置专门的 I/O 指令来访问 I/O 端口）</p>\n<p>优点：与存储器指令区分，程序编制清晰</p>\n<p>缺点：增加控制的复杂性</p>\n<ol start=\"3\">\n<li class=\"quiz\">I/O 总线的数据线上传送的信号包括<span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li class=\"correct\">I/O 接口的命令字</li>\n<li class=\"correct\">I/O 接口的状态字</li>\n<li class=\"correct\">中断类型号</li>\n</ul>\n</li>\n</ol>\n<p><span class=\"rainbow\">磁盘驱动器向盘片磁道记录数据时采用串行方式写入</span></p>\n<p><span class=\"rainbow\">程序员进行系统调用访问设备使用 ++ 逻辑地址 ++</span></p>\n<h2 id=\"io方式\"><a class=\"anchor\" href=\"#io方式\">#</a> I/O 方式</h2>\n<h5 id=\"程序查询方式\"><a class=\"anchor\" href=\"#程序查询方式\">#</a> 程序查询方式</h5>\n<p>信息交换完全由主机执行程序实现</p>\n<p>程序查询接口中设置一个数据缓冲寄存器和一个设备状态寄存器</p>\n<h5 id=\"程序中断方式\"><a class=\"anchor\" href=\"#程序中断方式\">#</a> 程序中断方式</h5>\n<h6 id=\"异常cpu内部中断\"><a class=\"anchor\" href=\"#异常cpu内部中断\">#</a> 异常（cpu 内部中断）：</h6>\n<p>硬故障中断，程序性异常（软中断）</p>\n<p>按发生异常的报告方式和返回方式不同分为：</p>\n<p>1.== 故障 ==（指在引起故障等指令启动后，执行结束前背检测到的异常事件）</p>\n<p>有些可回到发生故障的指令后继续执行，有些不行</p>\n<p>2.== 自陷 ==（发生后 cpu 将机内操作系统内核程序执行）</p>\n<p>自动根据不同陷阱类型进行相应处理，然后返回下一条指令执行，当自陷指令是转移指令是，则</p>\n<ol start=\"3\">\n<li>== 终止 ==（在指令执行过程中发生了使计算机无法继续执行的硬件故障，如掉电）</li>\n</ol>\n<h6 id=\"外部中断狭义上称为中断\"><a class=\"anchor\" href=\"#外部中断狭义上称为中断\">#</a> 外部中断（狭义上称为中断）</h6>\n<p>I/O 中断（键盘输入，打印机缺纸），外部信号中断（用户按 Esc），各种定时器产生的时钟中断</p>\n<h6 id=\"中断的基本概念\"><a class=\"anchor\" href=\"#中断的基本概念\">#</a> 中断的基本概念</h6>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921135656166.png\" alt=\"image-20210921135656166\"></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921135635992.png\" alt=\"image-20210921135635992\"></p>\n<h6 id=\"程序中断的基本流程\"><a class=\"anchor\" href=\"#程序中断的基本流程\">#</a> 程序中断的基本流程</h6>\n<p>中断请求</p>\n<p>对每个中断源的请求设置中断请求标记触发器 INTR，这些触发器组成中断请求标记寄存器（可集中在 cpu，也可分散在各中断源）</p>\n<p>++ 内中断皆为不可屏蔽中断 ++</p>\n<p>++ 通过 INTR 信号线发出的外中断是可屏蔽信号，可被关中断（IF=1）影响</p>\n<p>NMI 信号线上的是不可屏蔽中断 ++</p>\n<hr>\n<p>中断判优</p>\n<p>硬件排队器，程序查询（软件实现）</p>\n<p><span class=\"rainbow\">硬件故障中断属于最高级，其次是软件中断，不可屏蔽中断优于可屏蔽中断，DMA 请求优于 I/O 设备传送的中断请求，高速设备优于低速设备，实时设备优于普通设备</span></p>\n<hr>\n<p>中断响应</p>\n<p>中断隐指令（硬件直接实现）</p>\n<p>​\t1. 关中断</p>\n<p>​\t2. 保存断点（PC,PSWR）</p>\n<p>​\t3. 引出中断服务程序</p>\n<hr>\n<p>中断向量</p>\n<p>cpu 响应中断后，中断硬件自动将中断向量地址传送到 cpu</p>\n<p>::info</p>\n<p>​\t中断向量是中断程序的入口地址，中断向量地址。。。</p>\n<p>::</p>\n<hr>\n<p>中断处理过程</p>\n<p>图片</p>\n<p>保存断点：可压入栈中也可存入主存的特定单元中</p>\n<p>引出中断服务程序：硬件向量法（硬件产出中断类型号（指出中断向量地址）），软件查询法</p>\n<p>保存现场和屏蔽字：现场信息指的是用户可见的工作寄存器的内容</p>\n<p>::info</p>\n<p>​\t现场信息保存由软件实现，断点信息保存由硬件实现</p>\n<p>::</p>\n<h6 id=\"多重中断和中断屏蔽技术\"><a class=\"anchor\" href=\"#多重中断和中断屏蔽技术\">#</a> 多重中断和中断屏蔽技术</h6>\n<h5 id=\"dma方式直接存储器存取方式\"><a class=\"anchor\" href=\"#dma方式直接存储器存取方式\">#</a> DMA 方式（直接存储器存取方式）</h5>\n<h6 id=\"dma控制器的组成\"><a class=\"anchor\" href=\"#dma控制器的组成\">#</a> DMA 控制器的组成</h6>\n<h6 id=\"dma传送方式\"><a class=\"anchor\" href=\"#dma传送方式\">#</a> DMA 传送方式</h6>\n<p>停止 cpu 访存，周期挪用（盗取），DMA 和 CPU 交替访存</p>\n<h6 id=\"dma传送过程\"><a class=\"anchor\" href=\"#dma传送过程\">#</a> DMA 传送过程</h6>\n<p>1. 预处理</p>\n<p>（可以说设备驱动程序）向 DMA 控制器的有关寄存器设置初值，设置传送方向，启动该设备</p>\n<p>2. 数据传送（完全由 DMA 实现）</p>\n<p>可以以单字节位基本单位，也可以以数据块位基本单位，DMA 占据总线后数据输入输出通过循环实现</p>\n<p>3. 后处理</p>\n<p>DMA 向 cpu 发送终端请求，cpu 执行中断服务程序（校验送入主存的数据是否正确，测试传送过程中是否出错。。。）</p>\n<h5 id=\"dma方式和中断方式的区别\"><a class=\"anchor\" href=\"#dma方式和中断方式的区别\">#</a> DMA 方式和中断方式的区别</h5>\n<p>DMA 请求的响应可以发生在每个机器周期结束（也可以说发生在总线周期结束，只要 cpu 不占总线资源）</p>\n<p>DMA 数据传输效率高，适合高速设备</p>\n<p>DMA 请求优先于中断请求</p>\n<p>中断方式具有对异常事件的处理能力，DMA 方式仅限于传送数据块的 I/O 操作</p>\n<p>从数据传输上看，中断方式靠程序传送，DMA 方式靠硬件传送</p>\n<ol start=\"3\">\n<li class=\"quiz\">\n<p>主存故障引起的中断是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>I/O 中断</li>\n<li>程序性中断</li>\n<li>外中断</li>\n<li class=\"correct\">机器校验中断</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在配有通道的计算机系统中，用户程序需要输入输出时，引起的中断是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>I/O 中断</li>\n<li>程序性中断</li>\n<li>外中断</li>\n<li class=\"correct\">访管中断</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>设置中断屏蔽标志可以改变<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>多个中断源的中断请求优先级</li>\n<li>cpu 对多个中断请求响应的优先次序</li>\n<li>多个中断服务程序开始执行的顺序</li>\n<li class=\"correct\">多个中断服务程序执行完的次序</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>在采用中断 I/O 方式控制打印输出的情况下，CPU 和打印控制接口中的 I/O 端口交换的信息不可能是<span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>打印字符</li>\n<li>设备状态</li>\n<li>控制命令</li>\n<li class=\"correct\">主存地址</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p><span class=\"rainbow\">MIPS = 指令执行速度</span></p>\n<p>第 8 题</p>\n<p>第 10 题有疑问</p>\n",
            "tags": [
                "考研",
                "计算机组成原理"
            ]
        },
        {
            "id": "http://example.com/2021/09/20/%E6%80%BB%E7%BA%BF/",
            "url": "http://example.com/2021/09/20/%E6%80%BB%E7%BA%BF/",
            "title": "总线",
            "date_published": "2021-09-20T15:02:58.000Z",
            "content_html": "<h2 id=\"总线概叙\"><a class=\"anchor\" href=\"#总线概叙\">#</a> 总线概叙</h2>\n<p>特点：分时，共享</p>\n<p>特性：机械特性，电气特性，功能特性，时间特性</p>\n<p>总线的猝发传送方式：在一个总线周期内传送地址连续的多个数据字</p>\n<p>总线分类：片选总线，系统总线，通信总线（外部总线）</p>\n<hr>\n<p>单总线</p>\n<p>双总线：主存总线，I/O 总线</p>\n<p>三总线：主存总线，I/O 总线，DMA（直接内存访问）总线</p>\n<hr>\n<p>总线周期：申请阶段，寻址阶段，传输阶段和结束阶段</p>\n<p>总线时钟周期 = 机器时钟周期</p>\n<p>总线工作频率：时钟频率 / N</p>\n<p>总线时钟频率</p>\n<p>信号线数：地址总线，数据总线，控制总线三种信号线的总和称为信号线数</p>\n<p><span class=\"rainbow\">并行总线传输比串行总线传输速度快</span></p>\n<ol start=\"3\">\n<li class=\"quiz\">下列关于多总线结构的叙述中错误的是<span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>靠近 cpu 的总线速度快</li>\n<li>存储器总线可支持突发传送方式</li>\n<li>总线之间通过桥接器相连</li>\n<li class=\"correct\">PCI-Express16 采用并行传输方式</li>\n<li><img data-src=\"$CABB%5BOFGCJ8$SUKJ%5D62K4V.jpg\" alt=\"img\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总线事务和定时\"><a class=\"anchor\" href=\"#总线事务和定时\">#</a> 总线事务和定时</h2>\n<p>申请分配阶段：总线主模块提出申请，经总线仲裁机构将下一传输周期的总线使用权授予某一申请者</p>\n<p>寻址阶段：主模块通过总线发出本次要访问的从模块的地址及有关命令</p>\n<p>传输阶段：主模块和从模块进行数据交换 (单向或双向)</p>\n<p>结束阶段</p>\n<h5 id=\"同步定时方式\"><a class=\"anchor\" href=\"#同步定时方式\">#</a> 同步定时方式</h5>\n<p>采用统一时钟信号，在一个总线周期内，可以进行一次数据传送</p>\n<p>优点：传输速度快</p>\n<p>缺点：主从设备属于强制性同步，可靠性差</p>\n<h5 id=\"异步定时方式\"><a class=\"anchor\" href=\"#异步定时方式\">#</a> 异步定时方式</h5>\n<p>没有统一的时钟信号，通过握手信号实现定时控制</p>\n<p>不互锁方式：</p>\n<p>半互锁方式</p>\n<p>全互锁方式：主设备发出 “请求” 信号后，必须在从设备 “回答” 后才撤销 “请求” 信号；从设备发出 “回答” 信号后，必须在获知主设备 “请求” 信号已撤销后，再撤销其 “回答” 信号</p>\n<p><img data-src=\"image-20210921103739428.png\" alt=\"image-20210921103739428\"></p>\n",
            "tags": [
                "考研",
                "计算机组成原理"
            ]
        },
        {
            "id": "http://example.com/2021/09/20/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%EF%BC%88%E4%BB%85%E6%95%B0%E4%B8%80%EF%BC%89/",
            "url": "http://example.com/2021/09/20/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%EF%BC%88%E4%BB%85%E6%95%B0%E4%B8%80%EF%BC%89/",
            "title": "多元函数积分学（仅数一）",
            "date_published": "2021-09-20T05:47:48.000Z",
            "content_html": "<p><span class=\"rainbow\">要使用好对称性和轮转对称性</span></p>\n<h4 id=\"球面坐标系\"><a class=\"anchor\" href=\"#球面坐标系\">#</a> 球面坐标系</h4>\n<p><img data-src=\"image-20210920145254164.png\" alt=\"image-20210920145254164\"></p>\n<p><img data-src=\"image-20210922194113197.png\" alt=\"image-20210922194113197\"></p>\n<hr>\n<h2 id=\"第一型曲线积分\"><a class=\"anchor\" href=\"#第一型曲线积分\">#</a> 第一型曲线积分</h2>\n<p>有密度的曲线</p>\n<p><img data-src=\"image-20210922195230282.png\" alt=\"image-20210922195230282\"></p>\n<hr>\n<p><img data-src=\"image-20210922195644117.png\" alt=\"image-20210922195644117\"></p>\n<p><span class=\"rainbow\">遇到空间曲线，一般利用轮转对称性，对称性</span></p>\n<p><img data-src=\"image-20210922195811310.png\" alt=\"image-20210922195811310\"></p>\n<p><img data-src=\"image-20210922195825275.png\" alt=\"image-20210922195825275\"></p>\n<h2 id=\"第一型曲面积分\"><a class=\"anchor\" href=\"#第一型曲面积分\">#</a> 第一型曲面积分</h2>\n<p>带密度的曲面</p>\n<p><img data-src=\"image-20210922201858567.png\" alt=\"image-20210922201858567\"></p>\n<h2 id=\"第二型曲线积分\"><a class=\"anchor\" href=\"#第二型曲线积分\">#</a> 第二型曲线积分</h2>\n<p>做功</p>\n<p><img data-src=\"image-20210922204243613.png\" alt=\"image-20210922204243613\"></p>\n<p><img data-src=\"image-20210922204302544.png\" alt=\"image-20210922204302544\"></p>\n<p><span class=\"rainbow\">2，3 都是路径无关</span></p>\n<p><img data-src=\"image-20210923142155839.png\" alt=\"image-20210923142155839\"></p>\n<p><img data-src=\"image-20210923142210976.png\" alt=\"image-20210923142210976\"></p>\n<p><img data-src=\"image-20210923144555252.png\" alt=\"image-20210923144555252\"></p>\n<hr>\n<h4 id=\"摆线方程\"><a class=\"anchor\" href=\"#摆线方程\">#</a> 摆线方程</h4>\n<p><img data-src=\"image-20210923151541849.png\" alt=\"image-20210923151541849\"></p>\n<hr>\n<p><img data-src=\"image-20210923194637283.png\" alt=\"image-20210923194637283\"></p>\n<p><img data-src=\"image-20210923201337416.png\" alt=\"image-20210923201337416\"></p>\n<p>::info</p>\n<p>没有理解，henfan</p>\n<p>::</p>\n<p><img data-src=\"image-20210923203524556.png\" alt=\"image-20210923203524556\"></p>\n<p><img data-src=\"image-20210923204806560.png\" alt=\"image-20210923204806560\"></p>\n<hr>\n<p><img data-src=\"image-20210924092052207.png\" alt=\"image-20210924092052207\"></p>\n<hr>\n<p><img data-src=\"image-20210924143010687.png\" alt=\"image-20210924143010687\"></p>\n<hr>\n<p><img data-src=\"image-20210924154609155.png\" alt=\"image-20210924154609155\"></p>\n<hr>\n<p><img data-src=\"image-20210924161815314.png\" alt=\"image-20210924161815314\"></p>\n<p><img data-src=\"image-20210925210033435.png\" alt=\"image-20210925210033435\"></p>\n<hr>\n<h2 id=\"第2型曲面积分\"><a class=\"anchor\" href=\"#第2型曲面积分\">#</a> 第 2 型曲面积分</h2>\n<p><img data-src=\"image-20210924175335448.png\" alt=\"image-20210924175335448\"></p>\n<p><img data-src=\"image-20210924181502402.png\" alt=\"image-20210924181502402\"></p>\n<p><img data-src=\"image-20210924183301980.png\" alt=\"image-20210924183301980\"></p>\n<p><img data-src=\"image-20210925090027489.png\" alt=\"image-20210925090027489\"></p>\n<p><img data-src=\"image-20210925091034432.png\" alt=\"image-20210925091034432\"></p>\n<p><img data-src=\"image-20210925101735987.png\" alt=\"image-20210925101735987\"></p>\n<p><img data-src=\"image-20210925102715791.png\" alt=\"image-20210925102715791\"></p>\n<hr>\n<p><img data-src=\"image-20210925183232039.png\" alt=\"image-20210925183232039\"></p>\n<p><img data-src=\"image-20210925183255492.png\" alt=\"image-20210925183255492\"></p>\n<hr>\n<p><img data-src=\"image-20210925195126637.png\" alt=\"image-20210925195126637\"></p>\n<p><span class=\"rainbow\">转化为参数方程</span></p>\n<p><img data-src=\"image-20210925195158836.png\" alt=\"image-20210925195158836\"></p>\n<p><img data-src=\"image-20210925200545374.png\" alt=\"image-20210925200545374\"></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/09/18/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/",
            "url": "http://example.com/2021/09/18/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/",
            "title": "多元函数积分学预备知识",
            "date_published": "2021-09-18T05:15:27.000Z",
            "content_html": "<h4 id=\"空间曲线的切线与法平面\"><a class=\"anchor\" href=\"#空间曲线的切线与法平面\">#</a> 空间曲线的切线与法平面</h4>\n<p><img data-src=\"image-20210918135647271.png\" alt=\"image-20210918135647271\"></p>\n<p>可直接转化为参数方程</p>\n<h4 id=\"空间曲面的切平面和法向量\"><a class=\"anchor\" href=\"#空间曲面的切平面和法向量\">#</a> 空间曲面的切平面和法向量</h4>\n<p><img data-src=\"image-20210918135837687.png\" alt=\"image-20210918135837687\"></p>\n<p><span class=\"rainbow\">2 维参数方程可直接转化为隐式方程</span></p>\n<h4 id=\"空间曲线在平面上的投影\"><a class=\"anchor\" href=\"#空间曲线在平面上的投影\">#</a> 空间曲线在平面上的投影</h4>\n<p>1. 在坐标面上：直接消去对应的值</p>\n<p>2. 在任意面上投影的方向向量：与投影平面的法向量做外积等</p>\n<h4 id=\"旋转曲面\"><a class=\"anchor\" href=\"#旋转曲面\">#</a> 旋转曲面</h4>\n<p><img data-src=\"image-20210918140206768.png\" alt=\"image-20210918140206768\"></p>\n<h4 id=\"向量的运算\"><a class=\"anchor\" href=\"#向量的运算\">#</a> 向量的运算</h4>\n<p><img data-src=\"image-20210918140314286.png\" alt=\"image-20210918140314286\"></p>\n<h4 id=\"平面直线及位置关系\"><a class=\"anchor\" href=\"#平面直线及位置关系\">#</a> 平面直线及位置关系</h4>\n<p><img data-src=\"image-20210918140501959.png\" alt=\"image-20210918140501959\"></p>\n<p><img data-src=\"image-20210918140520685.png\" alt=\"image-20210918140520685\"></p>\n<p><img data-src=\"image-20210918140646053.png\" alt=\"image-20210918140646053\"></p>\n<p><span class=\"rainbow\">平面与直线的夹角小于 90°</span></p>\n<h4 id=\"场论初步\"><a class=\"anchor\" href=\"#场论初步\">#</a> 场论初步</h4>\n<p><img data-src=\"image-20210918140857494.png\" alt=\"image-20210918140857494\"></p>\n<p><img data-src=\"image-20210918140913130.png\" alt=\"image-20210918140913130\"></p>\n<hr>\n<p><img data-src=\"image-20210918141032116.png\" alt=\"image-20210918141032116\"></p>\n<p><span class=\"rainbow\">偏导与微分</span></p>\n<p><img data-src=\"image-20210918143116391.png\" alt=\"image-20210918143116391\"></p>\n<hr>\n<p><img data-src=\"image-20210918143421790.png\" alt=\"image-20210918143421790\"></p>\n<p><span class=\"rainbow\">绕 x 轴旋转，y²=y²+z²</span></p>\n<p><img data-src=\"image-20210918143600498.png\" alt=\"image-20210918143600498\"></p>\n<p><img data-src=\"image-20210918143616611.png\" alt=\"image-20210918143616611\"></p>\n<p><span class=\"rainbow\">这样操作简化计算</span></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/09/07/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/",
            "url": "http://example.com/2021/09/07/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/",
            "title": "中央处理器",
            "date_published": "2021-09-07T01:16:53.000Z",
            "content_html": "<h2 id=\"cpu的功能和结构\"><a class=\"anchor\" href=\"#cpu的功能和结构\">#</a> CPU 的功能和结构</h2>\n<h5 id=\"运算器\"><a class=\"anchor\" href=\"#运算器\">#</a> 运算器</h5>\n<p>算数逻辑单元</p>\n<p>暂存寄存器（对应用程序员透明）</p>\n<p>累加寄存器</p>\n<p>通用寄存器，程序状态字寄存器（用户可见）</p>\n<p>移位器，计数器</p>\n<h5 id=\"控制器\"><a class=\"anchor\" href=\"#控制器\">#</a> 控制器</h5>\n<p>程序计数器（汇编语言程序员可见）</p>\n<p>指令寄存器，存储器地址寄存器，存储器数据寄存器（，用户汇编语言程序员不可见）</p>\n<p>指令译码器，时序系统，位操作控制信号发生器</p>\n<hr>\n<p><span class=\"rainbow\">n 位 cpu 是指数据总线 n 条</span></p>\n<hr>\n<h2 id=\"指令执行过程\"><a class=\"anchor\" href=\"#指令执行过程\">#</a> 指令执行过程</h2>\n<p>定长，不定长机器周期</p>\n<p>取值周期（包含对指令译码），间址周期，执行周期，中断周期</p>\n<p>4 个标志触发器 FE,IND,EX,INT（控制信号：1-&gt;FE,1-&gt;IND....）</p>\n<p><span class=\"rainbow\">中断周期的进栈操作是将 sp-1</span></p>\n<h5 id=\"指令执行方案\"><a class=\"anchor\" href=\"#指令执行方案\">#</a> 指令执行方案</h5>\n<p>单指令周期，多指令周期，流水线方案</p>\n<p><span class=\"rainbow\">从时间上，cpu 通过指令周期的不同阶段区分指令与数据</span></p>\n<p><span class=\"rainbow\">从空间上，cpu 通过数据流向判断，指令从内存流向控制器，数据从内存流向运算器</span></p>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912102623183.png\" alt=\"image-20210912102623183\"></p>\n<hr>\n<h2 id=\"数据通路的功能和基本机构\"><a class=\"anchor\" href=\"#数据通路的功能和基本机构\">#</a> 数据通路的功能和基本机构</h2>\n<p>单总线方式：结构简单，但数据传输存在较多的冲突问题，一个时钟周期内可以完成多个相兼容的位操作</p>\n<p>三总线方式</p>\n<p>专用数据通路方式</p>\n<p>cpu 内部总线：实现容易，内部简单，性能低，有交多冲突</p>\n<p><span class=\"rainbow\">使能状态 = 允许</span></p>\n<ol start=\"3\">\n<li class=\"quiz\">单周期处理器中所有的指令的指令周期位一个时钟周期，下列关于单周期处理器的叙述错误的是<span class=\"gap\"></span> 。\n<ul class=\"options\">\n<li>处理器时钟频率低</li>\n<li>在指令执行过程中控制信号不变</li>\n<li>每条指令的 cpi 为 1</li>\n<li class=\"correct\">可采用单总线结构数据通路</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>。。题目</p>\n<hr>\n<h2 id=\"控制器的功能和原理\"><a class=\"anchor\" href=\"#控制器的功能和原理\">#</a> 控制器的功能和原理</h2>\n<h4 id=\"硬布线控制器一般用于risc执行速度快扩充指令困难\"><a class=\"anchor\" href=\"#硬布线控制器一般用于risc执行速度快扩充指令困难\">#</a> 硬布线控制器（一般用于 RISC，执行速度快，扩充指令困难）</h4>\n",
            "tags": [
                "考研",
                "计算机组成原理"
            ]
        },
        {
            "id": "http://example.com/2021/09/05/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/",
            "url": "http://example.com/2021/09/05/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/",
            "title": "微分方程",
            "date_published": "2021-09-05T08:43:36.000Z",
            "content_html": "<div class=\"note info\">\n<p>重点是换元</p>\n</div>\n<p><img data-src=\"image-20210905170302528.png\" alt=\"image-20210905170302528\"></p>\n<p><img data-src=\"image-20210905170313250.png\" alt=\"image-20210905170313250\"></p>\n<p><img data-src=\"image-20210905170341667.png\" alt=\"image-20210905170341667\"></p>\n<p><img data-src=\"image-20210905170453887.png\" alt=\"image-20210905170453887\"></p>\n<hr>\n<p><img data-src=\"image-20210905170515042.png\" alt=\"image-20210905170515042\"></p>\n<hr>\n<p><img data-src=\"image-20210905170710011.png\" alt=\"image-20210905170710011\"></p>\n<p><span class=\"rainbow\">dy 前面有 x 的话，可以先解 dx/dy</span></p>\n<p><img data-src=\"image-20210905225645731.png\" alt=\"image-20210905225645731\"></p>\n<p><img data-src=\"image-20210907100113164.png\" alt=\"image-20210907100113164\"></p>\n<p><img data-src=\"image-20210907100124879.png\" alt=\"image-20210907100124879\"></p>\n<p><img data-src=\"image-20210907100135038.png\" alt=\"image-20210907100135038\"></p>\n<p><img data-src=\"image-20210907100956222.png\" alt=\"image-20210907100956222\"></p>\n<p><img data-src=\"image-20210908134309483.png\" alt=\"image-20210908134309483\"></p>\n<p><img data-src=\"image-20210908134436881.png\" alt=\"image-20210908134436881\"></p>\n<p><span class=\"rainbow\">没学明白</span></p>\n<p><img data-src=\"image-20210908134558622.png\" alt=\"image-20210908134558622\"></p>\n<p><img data-src=\"image-20210908135134707.png\" alt=\"image-20210908135134707\"></p>\n<p><img data-src=\"image-20210908135151463.png\" alt=\"image-20210908135151463\"></p>\n<hr>\n<p><img data-src=\"image-20210908135829969.png\" alt=\"image-20210908135829969\"></p>\n<p><img data-src=\"image-20210908135910159.png\" alt=\"image-20210908135910159\"></p>\n<p><img data-src=\"image-20210908140053526.png\" alt=\"image-20210908140053526\"></p>\n<hr>\n<p><img data-src=\"image-20210908140750330.png\" alt=\"image-20210908140750330\"></p>\n<p><img data-src=\"image-20210908140824017.png\" alt=\"image-20210908140824017\"></p>\n<hr>\n<p><img data-src=\"image-20210908144038903.png\" alt=\"image-20210908144038903\"></p>\n<p><img data-src=\"image-20210908144132513.png\" alt=\"image-20210908144132513\"></p>\n<p><span class=\"rainbow\">积分时别忘了 C</span></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/08/30/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/",
            "url": "http://example.com/2021/08/30/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/",
            "title": "多元函数微分学",
            "date_published": "2021-08-30T07:48:52.000Z",
            "content_html": "<p><img data-src=\"image-20211021092335232.png\" alt=\"image-20211021092335232\"></p>\n<hr>\n<p><img data-src=\"C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211021095258450.png\" alt=\"image-20211021095258450\"></p>\n<p><span class=\"rainbow\">第 2 问要有，凑导数的思想，之后将要求的值放在另一边，还有洛必达别忘了</span></p>\n<hr>\n<div class=\"note info\">\n<p>主要可微的证明，偏导数的连续，链式求导法则，方程组求导，多元函数的极值，泰勒公式</p>\n<p>给出偏微分方程，求原函数，与一元函数微分方程类似</p>\n</div>\n<p><img data-src=\"image-20210901160326160.png\" alt=\"image-20210901160326160\"></p>\n<p><img data-src=\"image-20210901160343851.png\" alt=\"image-20210901160343851\"></p>\n<p><span class=\"rainbow\">设 y=kx</span></p>\n<p><img data-src=\"image-20210830203707186.png\" alt=\"image-20210830203707186\"></p>\n<p><img data-src=\"image-20210830203727627.png\" alt=\"image-20210830203727627\"></p>\n<p><img data-src=\"image-20210830155251953.png\" alt=\"image-20210830155251953\"></p>\n<p><img data-src=\"image-20210830155316602.png\" alt=\"image-20210830155316602\"></p>\n<p><img data-src=\"image-20210830171807028.png\" alt=\"image-20210830171807028\"></p>\n<p><img data-src=\"image-20211109153739130.png\" alt=\"image-20211109153739130\"></p>\n<p><img data-src=\"image-20210830165709631.png\" alt=\"image-20210830165709631\"></p>\n<p><img data-src=\"image-20210830180241718.png\" alt=\"image-20210830180241718\"></p>\n<p><img data-src=\"image-20210830180251882.png\" alt=\"image-20210830180251882\"></p>\n<p><img data-src=\"image-20210830200210184.png\" alt=\"image-20210830200210184\"></p>\n<p><img data-src=\"image-20210830235203627.png\" alt=\"image-20210830235203627\"></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/08/27/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6-%E7%A7%AF%E5%88%86%E7%AD%89%E5%BC%8F%E5%92%8C%E4%B8%8D%E7%AD%89%E5%BC%8F/",
            "url": "http://example.com/2021/08/27/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6-%E7%A7%AF%E5%88%86%E7%AD%89%E5%BC%8F%E5%92%8C%E4%B8%8D%E7%AD%89%E5%BC%8F/",
            "title": "一元函数积分学-积分等式和不等式（包含物理应用）",
            "date_published": "2021-08-27T08:38:53.000Z",
            "content_html": "<p><img data-src=\"image-20210903230400279.png\" alt=\"image-20210903230400279\"></p>\n<p><span class=\"rainbow\">作为结论</span></p>\n<p><img data-src=\"image-20210903230734498.png\" alt=\"image-20210903230734498\"></p>\n<p><span class=\"rainbow\">作为结论</span></p>\n<hr>\n<p><img data-src=\"image-20210827181449923.png\" alt=\"image-20210827181449923\"></p>\n<p><img data-src=\"image-20210827181506330.png\" alt=\"image-20210827181506330\"></p>\n<div class=\"note info\">\n<p>可作为结论</p>\n</div>\n<p><img data-src=\"image-20210827181527508.png\" alt=\"image-20210827181527508\"></p>\n<p><img data-src=\"image-20210827181304362.png\" alt=\"image-20210827181304362\"></p>\n<div class=\"note info\">\n<p>数形结合，通过观察下图发现 f (x) 由两段组成，所以用两次拉格朗日</p>\n</div>\n<p><img data-src=\"image-20210827181718601.png\" alt=\"image-20210827181718601\"></p>\n<p><img data-src=\"image-20210827201400634.png\" alt=\"image-20210827201400634\"></p>\n<hr>\n<p><img data-src=\"image-20210827201537654.png\" alt=\"image-20210827201537654\"></p>\n<hr>\n<p><img data-src=\"image-20210827204521432.png\" alt=\"image-20210827204521432\"></p>\n<p><img data-src=\"image-20210827211231875.png\" alt=\"image-20210827211231875\"></p>\n<p><img data-src=\"image-20210827211154379.png\" alt=\"image-20210827211154379\"></p>\n<p><img data-src=\"image-20210905111520124.png\" alt=\"image-20210905111520124\"></p>\n<p><img data-src=\"image-20210827211204250.png\" alt=\"image-20210827211204250\"></p>\n<p><img data-src=\"image-20210827232237114.png\" alt=\"image-20210827232237114\"></p>\n<p><img data-src=\"image-20210828145304265.png\" alt=\"image-20210828145304265\"></p>\n<p><span class=\"rainbow\">题解很 nt，根本不讲思路，令人望而却步，这题主要是找递推公式，想到这一点还要靠一点做题的经验</span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>利用</mtext><mi>s</mi><mi>e</mi><msup><mi>c</mi><mn>2</mn></msup><mi>x</mi><mo>=</mo><mi>t</mi><mi>a</mi><msup><mi>n</mi><mn>2</mn></msup><mi>x</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mtext>将原式转化为</mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mtext>与</mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mtext>的递推式，然后进行放缩即可</mtext></mrow><annotation encoding=\"application/x-tex\">利用sec^2x=tan^2x+1,将原式转化为f(n)与f(n-2)的递推式，然后进行放缩即可\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">利</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">将</span><span class=\"mord cjk_fallback\">原</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">转</span><span class=\"mord cjk_fallback\">化</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">推</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">然</span><span class=\"mord cjk_fallback\">后</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">放</span><span class=\"mord cjk_fallback\">缩</span><span class=\"mord cjk_fallback\">即</span><span class=\"mord cjk_fallback\">可</span></span></span></span></span></p>\n<p><img data-src=\"image-20210828145320865.png\" alt=\"image-20210828145320865\"></p>\n<p><span class=\"rainbow\">注意数形结合</span></p>\n<p><img data-src=\"image-20210828145352590.png\" alt=\"image-20210828145352590\"></p>\n<hr>\n<hr>\n<h2 id=\"一元函数积分学的物理应用\"><a class=\"anchor\" href=\"#一元函数积分学的物理应用\">#</a> 一元函数积分学的物理应用</h2>\n<p><img data-src=\"image-20210829215947489.png\" alt=\"image-20210829215947489\"></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/08/26/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/",
            "url": "http://example.com/2021/08/26/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/",
            "title": "一元函数积分学的几何应用",
            "date_published": "2021-08-26T06:48:16.000Z",
            "content_html": "<p><img data-src=\"image-20210826201809901.png\" alt=\"image-20210826201809901\"></p>\n<p><img data-src=\"image-20210826201749474.png\" alt=\"image-20210826201749474\"></p>\n<p><img data-src=\"image-20210826220441204.png\" alt=\"image-20210826220441204\"></p>\n<p><img data-src=\"image-20210826225405872.png\" alt=\"image-20210826225405872\"></p>\n<p><img data-src=\"image-20210826231028169.png\" alt=\"image-20210826231028169\"></p>\n<p><img data-src=\"image-20210826234800740.png\" alt=\"image-20210826234800740\"></p>\n<p><img data-src=\"image-20210827000702136.png\" alt=\"image-20210827000702136\"></p>\n<p><img data-src=\"image-20210827000742354.png\" alt=\"image-20210827000742354\"></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        },
        {
            "id": "http://example.com/2021/08/24/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E8%AE%A1%E7%AE%97/",
            "url": "http://example.com/2021/08/24/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E8%AE%A1%E7%AE%97/",
            "title": "一元函数积分学的计算",
            "date_published": "2021-08-24T14:29:06.000Z",
            "content_html": "<p><img data-src=\"image-20210824223158917.png\" alt=\"image-20210824223158917\"></p>\n<p><img data-src=\"image-20210825223733318.png\" alt=\"image-20210825223733318\"></p>\n<p><img data-src=\"image-20210825144019973.png\" alt=\"image-20210825144019973\"></p>\n<p><img data-src=\"image-20210824223307915.png\" alt=\"image-20210824223307915\"></p>\n<p><img data-src=\"image-20210824224426847.png\" alt=\"image-20210824224426847\"></p>\n<hr>\n<p><img data-src=\"image-20210824225229422.png\" alt=\"image-20210824225229422\"></p>\n<p><img data-src=\"image-20210824231104587.png\" alt=\"image-20210824231104587\"></p>\n<p><img data-src=\"image-20210825003535421.png\" alt=\"image-20210825003535421\"></p>\n<div class=\"note info\">\n<p>求原函数注意绝对值，如 1/x --&gt; ln|x|</p>\n</div>\n<p><img data-src=\"image-20210825143818673.png\" alt=\"image-20210825143818673\"></p>\n<p><img data-src=\"image-20210825011045536.png\" alt=\"image-20210825011045536\"></p>\n<hr>\n<p><img data-src=\"image-20210901232322790.png\" alt=\"image-20210901232322790\"></p>\n<p><img data-src=\"image-20210901232342204.png\" alt=\"image-20210901232342204\"></p>\n<p><img data-src=\"image-20210901232345457.png\" alt=\"image-20210901232345457\"></p>\n<p><img data-src=\"image-20210825151404514.png\" alt=\"image-20210825151404514\"></p>\n<p><img data-src=\"image-20210825153406349.png\" alt=\"image-20210825153406349\"></p>\n<p><span class=\"rainbow\">第一反应是用三角函数代换，如果积分范围比较难处理，应该想到对称性，区间化简公式</span></p>\n<hr>\n<p><img data-src=\"image-20210825171209822.png\" alt=\"image-20210825171209822\"></p>\n<p><img data-src=\"image-20210825193828987.png\" alt=\"image-20210825193828987\"></p>\n<hr>\n<p><img data-src=\"image-20210901231719829.png\" alt=\"image-20210901231719829\"></p>\n<hr>\n<p><img data-src=\"image-20210902104422418.png\" alt=\"image-20210902104422418\"></p>\n<p><img data-src=\"image-20210825195747873.png\" alt=\"image-20210825195747873\"></p>\n<div class=\"note info\">\n<p>一步到位</p>\n</div>\n<p><img data-src=\"image-20210825204231753.png\" alt=\"image-20210825204231753\"></p>\n<hr>\n<p><img data-src=\"image-20210825233158242.png\" alt=\"image-20210825233158242\"></p>\n<p><img data-src=\"image-20210825233222761.png\" alt=\"image-20210825233222761\"></p>\n<hr>\n<p><img data-src=\"image-20210902131052228.png\" alt=\"image-20210902131052228\"></p>\n<p><img data-src=\"image-20210902131505436.png\" alt=\"image-20210902131505436\"></p>\n",
            "tags": [
                "考研",
                "高等数学"
            ]
        }
    ]
}