<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>hero的博客</title>
        <subtitle></subtitle>
        <icon>http://example.com/images/favicon.ico</icon>
        <link>http://example.com</link>
        <author>
          <name>hero</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 12 Nov 2021 18:17:54 +0800</pubDate>
        <lastBuildDate>Fri, 12 Nov 2021 18:17:54 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
            <title>数据链路层</title>
            <link>http://example.com/2021/11/12/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
            <pubDate>Fri, 12 Nov 2021 18:17:54 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数据链路层的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据链路层的功能&#34;&gt;#&lt;/a&gt; 数据链路层的功能&lt;/h2&gt;
&lt;h4 id=&#34;概要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概要&#34;&gt;#&lt;/a&gt; 概要&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;将物理层提供的可能出错的物理连接改造为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;为网络层提供的服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为网络层提供的服务&#34;&gt;#&lt;/a&gt; 为网络层提供的服务&lt;/h4&gt;
&lt;p&gt;无确认的无连接服务：适用于实时通信或误码率低的通信信道。如：以太网。&lt;/p&gt;
&lt;p&gt;有确认的无连接服务：该服务适用于误码率较高的通信信道无线通信。&lt;/p&gt;
&lt;p&gt;有确认的面向连接服务：帧传翰过程分为三个阶段：&lt;strong&gt;数据链路、传输帧、释放数据链路&lt;/strong&gt;，目的计算机对收到的每一帧都要给出确认，&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;没有无确认的面向连接服务&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;帧定界-帧同步与透明传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#帧定界-帧同步与透明传输&#34;&gt;#&lt;/a&gt; 帧定界、帧同步与透明传输&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;帧定界&lt;/strong&gt;：首部尾部的控制信息，它们的一个重要作用就是确定帧的界限。&lt;br&gt;
&lt;strong&gt;帧同步&lt;/strong&gt;：接收方应能从接受到的二进制比特流中区分出帧的起始和终止。&lt;br&gt;
&lt;strong&gt;透明传输&lt;/strong&gt;：采取有效的措施解决误认为 “传输结束” 而丢弃后面数据的问题。就是不管所传数据是什么样的比特组合，都应当能在链路上传送。&lt;/p&gt;
&lt;h4 id=&#34;流量控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量控制&#34;&gt;#&lt;/a&gt; 流量控制&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;问题引入&lt;/strong&gt;：收发双方各自的工作速率和缓存空间的差异，出现发送方的发送能力大于接收方的接收能力的现象，如不对其进行流量控制就会导致数据丢失。&lt;strong&gt;流量控制&lt;/strong&gt;就是通过控制发送方的发送速度，从而实现流量控制。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;数据链路层控制相邻两点之间的流量，运输层控制源端到目的端的流量&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;差错控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差错控制&#34;&gt;#&lt;/a&gt; 差错控制&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;差错控制&lt;/strong&gt;就是使发送方确定接收方是否正确收到由其发送的数据的方法。&lt;/p&gt;
&lt;p&gt;位错（数据中的某些位出现错误） CRC 循环冗余码（解决位错）&lt;/p&gt;
&lt;p&gt;帧错（帧的丢失、重复或时序等错误） 自动重传请求 ARQ（解决帧错）。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;数据链路层的协议不包括 {.gap} 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;定义数据格式&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;为终端节点隐藏物理传输的细节&lt;/li&gt;
&lt;li&gt;提供节点之间的可靠传输&lt;/li&gt;
&lt;li&gt;控制对物理传输介质的访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;组帧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组帧&#34;&gt;#&lt;/a&gt; 组帧&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;字符计数法&lt;/strong&gt;就是指在帧头部使用一个计数字段来标明帧内字符数&lt;/p&gt;
&lt;p&gt;该方法的缺点就是如果计数字段出错，收发双方将失去同步从而导致错误。&lt;/p&gt;
&lt;p&gt;计数值要加上自身的一位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符填充法使用特定字符来定界一帧的开始和结束&lt;/strong&gt;。例如：控制字符&lt;strong&gt; SOH&lt;/strong&gt; 放在帧的最前面，表示帧的首部开始，控制字符&lt;strong&gt; EOT&lt;/strong&gt; 表示帧的结束。当信息位出现特殊字符时可以在特殊字符前添加一个转义字符&lt;strong&gt; ESC&lt;/strong&gt; 加以区分。&lt;/p&gt;
&lt;p&gt;复杂，不兼容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;零比特填充的首尾标志法（目前常用）：使用一个特定的比特模式，即 01111110 来标志一帧的开始和结束&lt;/strong&gt;。在发送信息时，遇到 5 个连续的 1 就自动在后面加 0。当收到信息时，遇到 5 个连续的 1 就自动在后面减 0。&lt;/p&gt;
&lt;p&gt;优点：零比特填充法很容易由硬件来实现，性能优于字符填充法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;违规编码法&lt;/strong&gt;（目前常用）：在&lt;strong&gt;物理层进行比特编码时&lt;/strong&gt;，曼彻斯特编码中比特 ”1&amp;quot;编码成 “高－高 “ 电平，比特”0&amp;quot; 编码成 “低－低 “ 电平（由于正常情况下不会出现这种情况，所以可以用这个办法来进行定界）&lt;/p&gt;
&lt;h2 id=&#34;差错控制-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差错控制-2&#34;&gt;#&lt;/a&gt; 差错控制&lt;/h2&gt;
&lt;h3 id=&#34;检错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检错编码&#34;&gt;#&lt;/a&gt; 检错编码&lt;/h3&gt;
&lt;h4 id=&#34;奇偶检验码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#奇偶检验码&#34;&gt;#&lt;/a&gt; 奇偶检验码&lt;/h4&gt;
&lt;p&gt;奇偶校验码由 n-1 位数据和 1 位校验位组成，校验位用于调节发送信息中的 1 的个数是偶数还是奇数。&lt;/p&gt;
&lt;h4 id=&#34;循环冗余码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环冗余码&#34;&gt;#&lt;/a&gt; 循环冗余码&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211112195334860.png&#34; alt=&#34;image-20211112195334860&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;除数最高位和最低位必须为 1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;凡是接收端数据链路层接受的帧都没有差错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CRC 有纠错功能，只是数据链路层仅使用它的检错功能&lt;/p&gt;
&lt;h3 id=&#34;纠错编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纠错编码&#34;&gt;#&lt;/a&gt; 纠错编码&lt;/h3&gt;
&lt;p&gt;在数据通信的过程中，有一个方法就是添加&lt;strong&gt;足够的冗余信息&lt;/strong&gt;，使得接收方能够推理出发送方实际传送的比特串。&lt;strong&gt;常见的纠错编码就是海明码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（1）确定海明码的位数：&lt;br&gt;
设 n 为有效信息的位数，k 为校验位的位数，则信息位 n 和校验位 k 应满足 n+k&amp;lt;=2^k-1（若要检测两位错，则需再增加 1 位检验位，即 k+1 位）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095428952.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）确定校验位的分布&lt;br&gt;
规定校验位在海明位号为 2^（i-1）位詈上，其余各位为信息位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095543512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzOTgzMDEw,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（3）分组形成校验关系&lt;br&gt;
被校验数据位的海明位号等于校验该数位的各校验位海明位号之和。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095731114.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）校验位取值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095920301.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;    校验位的值为对应组的所有位求异或。&lt;/p&gt;
&lt;p&gt;（5）海明码的校验原理&lt;br&gt;
每个校验组分别利用校验位和参与形成该校验位的信息位进行奇偶校验检查，构成 k 个校验方程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210216095935551.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;若s3s2s1的值为0000，则说明无措，否则说明有错，而且这个数就是错误的位号，如0001，就说明第一位出错即H1出错。
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/12/%E6%94%BF%E6%B2%BB%E9%80%89%E6%8B%A9%E9%A2%98%E9%94%99%E9%A2%98/</guid>
            <title>政治选择题错题</title>
            <link>http://example.com/2021/11/12/%E6%94%BF%E6%B2%BB%E9%80%89%E6%8B%A9%E9%A2%98%E9%94%99%E9%A2%98/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="政治" scheme="http://example.com/tags/%E6%94%BF%E6%B2%BB/" />
            <pubDate>Fri, 12 Nov 2021 17:36:25 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%8F%99/</guid>
            <title>计算机网络概叙</title>
            <link>http://example.com/2021/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E5%8F%99/</link>
            <pubDate>Thu, 11 Nov 2021 14:17:17 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/10/%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98/</guid>
            <title>数学真题</title>
            <link>http://example.com/2021/11/10/%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98/</link>
            <pubDate>Wed, 10 Nov 2021 19:11:16 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
            <title>内存管理</title>
            <link>http://example.com/2021/11/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <pubDate>Mon, 08 Nov 2021 23:47:10 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;内存管理概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存管理概念&#34;&gt;#&lt;/a&gt; 内存管理概念&lt;/h2&gt;
&lt;h4 id=&#34;内存管理的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存管理的功能&#34;&gt;#&lt;/a&gt; 内存管理的功能&lt;/h4&gt;
&lt;p&gt;（1）内存空间的分配与回收。&lt;br&gt;
（2）地址转换。&lt;br&gt;
（3）内存空间的扩充。&lt;br&gt;
（4）存储保护。&lt;/p&gt;
&lt;p&gt;（1）编译。由编译程序将用户源代码变异成若干目标模块。&lt;br&gt;
（2）链接（&lt;strong&gt;生成逻辑地址&lt;/strong&gt;）。由链接程序将编译后形成的一组目标模块及所需的库函数链接在一起，形成一个完成的装入模块。&lt;br&gt;
（3）装入。由装入程序将装入模块装入内存中运行。&lt;br&gt;
程序的链接有以下三种方式：&lt;br&gt;
（1）静态链接。&lt;br&gt;
（2）装入时动态链接。&lt;br&gt;
（3）运行时动态链接。其优点是便于修改和更新，便于实现对目标模块的共享。&lt;br&gt;
内存的装入模块在装入内存时，同样有以下三种方式：&lt;br&gt;
（1）绝对装入。只适用于单道程序环境。&lt;br&gt;
（2）可重定位装入（静态重定位）。&lt;br&gt;
静态重定位的特点是：一个作业装入内存时，必须给它分配要求的全部内存空间，若没有足够的内存，则不能装入该作业，此外，作业一旦进入内存，整个运行期间就不能在内存中移动，也不能再申请内存空间。&lt;br&gt;
（3）动态运行时装入。也称动态重定位。&lt;br&gt;
动态重定位特点：需要重定位寄存器，可以将程序分配到不连续的存储区中，便于程序段的共享，可以向用户提供更大的地址空间（地址空间大于存储空间）。&lt;/p&gt;
&lt;h4 id=&#34;内存保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存保护&#34;&gt;#&lt;/a&gt; 内存保护&lt;/h4&gt;
&lt;p&gt;设置一对上、下限寄存器&lt;/p&gt;
&lt;p&gt;重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）&lt;/p&gt;
&lt;h4 id=&#34;连续分配管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连续分配管理&#34;&gt;#&lt;/a&gt; 连续分配管理&lt;/h4&gt;
&lt;h5 id=&#34;单一连续分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单一连续分配&#34;&gt;#&lt;/a&gt; 单一连续分配&lt;/h5&gt;
&lt;p&gt;内存分为系统区和用户区&lt;/p&gt;
&lt;p&gt;优点是简单、无外部碎片，可以采用覆盖技术，不需要额外的技术支持。缺点是只能用于单用户、单任务的操作系统中，有内部碎片，存储器的利用率低。&lt;/p&gt;
&lt;h5 id=&#34;固定分区分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#固定分区分配&#34;&gt;#&lt;/a&gt; 固定分区分配&lt;/h5&gt;
&lt;p&gt;适用于多道程序的存储，无外部碎片；&lt;/p&gt;
&lt;p&gt;主存利用率第，有内部碎片，而且可能太大，放不进去&lt;/p&gt;
&lt;h5 id=&#34;动态分区分配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态分区分配&#34;&gt;#&lt;/a&gt; 动态分区分配&lt;/h5&gt;
&lt;p&gt;1）首次适用算法：最简单，最快，最好&lt;br&gt;
（2）最佳适应算法：性能差，会产生很多小内部碎片&lt;br&gt;
（3）最坏适应算法：性能差，很容易导致大内存块没了&lt;br&gt;
（4）邻近适应算法：又称循环首次适应算法，性能比首次适应算法差&lt;/p&gt;
&lt;h4 id=&#34;非连续分配管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非连续分配管理&#34;&gt;#&lt;/a&gt; 非连续分配管理&lt;/h4&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/11/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
            <title>进程管理</title>
            <link>http://example.com/2021/11/04/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/" />
            <pubDate>Thu, 04 Nov 2021 23:06:40 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;进程与线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程与线程&#34;&gt;#&lt;/a&gt; 进程与线程&lt;/h2&gt;
&lt;h5 id=&#34;进程的概念与特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的概念与特征&#34;&gt;#&lt;/a&gt; 进程的概念与特征&lt;/h5&gt;
&lt;p&gt;进程实现了操作系统的 并发性和共享性&lt;/p&gt;
&lt;p&gt;进程映像：程序段，数据段，PCB&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label primary&#34;&gt;创建进程实质上是创建 PCB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;进程是程序在数据集上的运行过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;进程特征：动态，并发，独立，异步，结构性&lt;/p&gt;
&lt;h5 id=&#34;进程的状态与转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的状态与转换&#34;&gt;#&lt;/a&gt; 进程的状态与转换&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211104232451442.png&#34; alt=&#34;image-20211104232451442&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label warning&#34;&gt;I/O 请求应改为事件等待，因为还有资源等待&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;每个状态主要是看 cpu 与其他资源是否齐全&lt;/p&gt;
&lt;p&gt;运行态 -&amp;gt; 阻塞态（主动）&lt;/p&gt;
&lt;p&gt;阻塞态 -&amp;gt; 就绪态（被动）&lt;/p&gt;
&lt;h5 id=&#34;进程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程控制&#34;&gt;#&lt;/a&gt; 进程控制&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;label primary&#34;&gt;关中断，开中断实现原语的一气呵成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一般把进程控制用的程序段称为原语&lt;/p&gt;
&lt;p&gt;用户 登录系统，作业调度，系统提供服务，用户程序的应用请求都会引起进程的创建&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label primary&#34;&gt;PCB 申请失败则进程创建失败，若资源不足，不是创建失败，而是处于阻塞态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;进程的终止：正常结束，异常结束，外界干预&lt;/p&gt;
&lt;p&gt;对于普通的进程而言，其创建，撤销及要求由系统设备完成的 I/O 操作，都是利用系统调用进入内核，再由内核程序处理&lt;/p&gt;
&lt;p&gt;进程切换要保存处机上下文（程序计数器和其他寄存器）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label warning&#34;&gt;注意进程切换和处理机模式切换时不同的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;调度和切换的区别：调度是决策行为，切换是执行行为&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;h5 id=&#34;进程的组织&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的组织&#34;&gt;#&lt;/a&gt; 进程的组织&lt;/h5&gt;
&lt;p&gt;进程控制块：&lt;/p&gt;
&lt;p&gt;​	进程描述信息：进程标识符，用户标识符&lt;/p&gt;
&lt;p&gt;​	进程管理信息：进程状态，优先级，首地址等&lt;/p&gt;
&lt;p&gt;​	资源分配清单：代码段制作，数据段指针，堆栈段指针&lt;/p&gt;
&lt;p&gt;​	处理及相关信息：各寄存器&lt;/p&gt;
&lt;p&gt;PCB 组织方式：链接方式，索引方式&lt;/p&gt;
&lt;h5 id=&#34;进程的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程的通信&#34;&gt;#&lt;/a&gt; 进程的通信&lt;/h5&gt;
&lt;p&gt;PV 操作是低级通信方式&lt;/p&gt;
&lt;p&gt;共享存储：低级方式的共享基于数据结构的共享，高级方式的共享基于存储区的共享&lt;/p&gt;
&lt;p&gt;消息传递：直接通信方式（挂在消息队列上），间接通信方式（放在邮箱）&lt;/p&gt;
&lt;p&gt;管道通信：共享文件（pipe 文件或管道）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;半双工通信，从管道读取数据时一次性操作，数据一旦被读取，就被抛弃&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;线程概念和多线程模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程概念和多线程模型&#34;&gt;#&lt;/a&gt; 线程概念和多线程模型&lt;/h5&gt;
&lt;p&gt;线程 ：轻量级进程，是一个基本的 cpu 执行单元，也是程序执行流的最小单元，由线程 id，程序计数器，寄存器集合，堆栈组成&lt;/p&gt;
&lt;p&gt;线程是独立调度的基本单位，进程是资源调度的基本单位&lt;/p&gt;
&lt;p&gt;线程可提高系统的并发性&lt;/p&gt;
&lt;p&gt;线程切换比进程切换的开销更小&lt;/p&gt;
&lt;p&gt;进程通信需要同步互斥手段辅佐，线程可直接读写进程数据段进行通信&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;用户级线程：线程管理工作都由应用系统完成，应用程序可以通过线程库设计成多线程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;内核级线程：线程管理工作都由内核完成&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;多对一模型：效率高，各线程不能并行，一旦阻塞整个进程会被阻塞&lt;/p&gt;
&lt;p&gt;一对一模型：并发能力强，用户态和内核态的切换开销大 &lt;span class=&#34;rainbow&#34;&gt;操作系统为每个用户级线程建立一个线程控制块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;多对多模型&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;2 进制代码和常量放在正文段，动态分配的存储区在数据堆段，临时使用的变量在数据栈段&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;同一进程或不同进程的线程都能并发执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;父进程与子进程不共享虚拟地址空间&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;系统动态 DLL 库中的系统线程，被不同的进程调用，它们是 [] 的进程 {.gap} 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;不同&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;相同&lt;/li&gt;
&lt;li&gt;可能相同，不同&lt;/li&gt;
&lt;li&gt;不能被调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;以下描述中，不是多线程系统的特长的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;利用线程并行的执行矩阵乘法运算&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;键盘驱动程序为每个正在运行的应用配备一个线程，用以响应键盘输入&lt;/li&gt;
&lt;li&gt;web 服务器利用线程响应 HTTP 请求&lt;/li&gt;
&lt;li&gt;基于 GUI 的调式程序用不同的线程分别处理用户输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;以下关于线程的描述错误的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;内核级线程的调度由操作系统来完成&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;操作系统为每个用户级线程创建一个线程控制块&lt;/li&gt;
&lt;li&gt;用户级线程间的切换比内核级切换效率高&lt;/li&gt;
&lt;li&gt;用户级线程可以在不支持内核级线程的操作系统上实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;以下关于管道通信的描述正确的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;一个管道可以实现双向数据传输&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;进程堆管道进行读操作和写操作都有可能被阻塞&lt;/li&gt;
&lt;li&gt;管道容量只受到磁盘容量大小限制&lt;/li&gt;
&lt;li&gt;一个管道只能由一个读进程或一个写进程对其操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;处理机调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理机调度&#34;&gt;#&lt;/a&gt; 处理机调度&lt;/h2&gt;
&lt;h5 id=&#34;调度的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度的概念&#34;&gt;#&lt;/a&gt; 调度的概念&lt;/h5&gt;
&lt;p&gt;作业调度 （高级调度）：每个作业只调入调出一次  次数少&lt;/p&gt;
&lt;p&gt;内存调度（中级调度） ：进程进入挂起态（提高内存利用率和系统吞吐量） 次数中&lt;/p&gt;
&lt;p&gt;进程调度（低级调度） ：次数多&lt;/p&gt;
&lt;h5 id=&#34;调度的时机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度的时机&#34;&gt;#&lt;/a&gt; 调度的时机&lt;/h5&gt;
&lt;p&gt;不能进行进程调度的情况&lt;/p&gt;
&lt;p&gt;1. 在处理中断的过程中&lt;/p&gt;
&lt;p&gt;2. 进程在操作系统内核临界区&lt;/p&gt;
&lt;p&gt;3. 其他需要完全屏蔽中断的原子操作过程中&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;进程处于临界区可以进行处理机调度&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;进程调度方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程调度方式&#34;&gt;#&lt;/a&gt; 进程调度方式&lt;/h5&gt;
&lt;p&gt;非剥夺式（适用于大多批处理系统，不适合分时系统和实时系统）&lt;/p&gt;
&lt;p&gt;剥夺式&lt;/p&gt;
&lt;h5 id=&#34;调度的性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度的性能&#34;&gt;#&lt;/a&gt; 调度的性能&lt;/h5&gt;
&lt;p&gt;cpu 利用率&lt;/p&gt;
&lt;p&gt;系统吞吐量：单位时间的作业完成数&lt;/p&gt;
&lt;p&gt;周转时间：作业完成时间 - 作业提交时间&lt;/p&gt;
&lt;p&gt;带权周转时间：作业周转时间 / 作业运行时间&lt;/p&gt;
&lt;p&gt;等待时间&lt;/p&gt;
&lt;p&gt;响应时间&lt;/p&gt;
&lt;h5 id=&#34;调度算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度算法&#34;&gt;#&lt;/a&gt; 调度算法&lt;/h5&gt;
&lt;p&gt;先来先服务（FCFS）：算法简单，但是效率低，对长作业比较有利，但对短作业不利，有利于 CPU 繁忙型作业，不利于 I/O 繁忙型作业。&lt;/p&gt;
&lt;p&gt;短作业优先（SJF）（可抢，可不抢）：1）对长作业不利，造成&lt;strong&gt;饥饿现象&lt;/strong&gt;（2）没有考虑作业的紧迫性，因而不能保证紧迫性作业会被及时处理。（3）作业长短是由用户提供的预估时间而定的，因而无法做到真正的短作业优先。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;在所有进程都几乎同时到达或者是抢占式时，平均等待时间和周转时间最小&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;优先级调度算法（可抢，可不抢）&lt;strong&gt;饥饿&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1. 系统进程 &amp;gt; 用户进程&lt;br&gt;
 2. 交互型进程 &amp;gt; 非交互型进程&lt;br&gt;
 3.I/O 进程 &amp;gt; 计算型进程（CPU 繁忙型）&lt;/p&gt;
&lt;p&gt;高响应比优先（非抢）： &lt;strong&gt;响应比 =（等待时间 + 要求服务时间）/ 要求服务时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时间片轮转（RR）(抢占式算法): 默认新到达的进程先进入队列，刚完成时间片的进程后进入队列&lt;/p&gt;
&lt;p&gt;多级反馈队列调度（抢占）：&lt;/p&gt;
&lt;p&gt;（1）终端型作业用户，短作业优先。&lt;br&gt;
（2）短批处理作业用户，周转时间短。&lt;br&gt;
（3）长批处理作业用户：不会长期得不到处理 **（但是会导致饥饿）**。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231028476.png&#34; alt=&#34;image-20211106231028476&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231047537.png&#34; alt=&#34;image-20211106231047537&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211106231123597.png&#34; alt=&#34;image-20211106231123597&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;进程同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程同步&#34;&gt;#&lt;/a&gt; 进程同步&lt;/h2&gt;
&lt;h4 id=&#34;进程同步的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程同步的概念&#34;&gt;#&lt;/a&gt; 进程同步的概念&lt;/h4&gt;
&lt;p&gt;（1）进入区：进程是否可以进入临界区，若能进入临界区则设置正在访问临界区的标志。&lt;br&gt;
（2）临界区：可以访问临界资源的代码。&lt;br&gt;
（3）退出区：将正在访问临界区的标志清除。&lt;br&gt;
（4）剩余区：代码中的其余部分。&lt;/p&gt;
&lt;p&gt;为禁止两个进程同时进入临界区，同步机制应该遵循以下规则：&lt;br&gt;
（1）空闲让进。&lt;br&gt;
（2）忙则等待。&lt;br&gt;
（3）有限等待。&lt;br&gt;
（4）让权等待。&lt;/p&gt;
&lt;h4 id=&#34;实现临界区互斥的基本方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现临界区互斥的基本方法&#34;&gt;#&lt;/a&gt; 实现临界区互斥的基本方法&lt;/h4&gt;
&lt;h5 id=&#34;软件方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件方法&#34;&gt;#&lt;/a&gt; 软件方法&lt;/h5&gt;
&lt;p&gt;单标志检查法：只能交替进入，违背空闲让进&lt;/p&gt;
&lt;p&gt;双标志先检查法：可能同时进入临界区，违背忙则等待&lt;/p&gt;
&lt;p&gt;双标志后检查法：可能相互谦让，造成饥饿&lt;/p&gt;
&lt;p&gt;Peterson：未解决让权等待&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//Pi 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 临界区操作 j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 剩余区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//Pj 进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;true&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;turn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 临界区操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	flag&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;false&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 剩余区&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;硬件方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件方式&#34;&gt;#&lt;/a&gt; 硬件方式&lt;/h5&gt;
&lt;p&gt;中断屏蔽&lt;/p&gt;
&lt;p&gt;TestAndSet 指令&lt;/p&gt;
&lt;p&gt;Swap 指令&lt;/p&gt;
&lt;h5 id=&#34;信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信号量&#34;&gt;#&lt;/a&gt; 信号量&lt;/h5&gt;
&lt;p&gt;整形信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;S&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;记录信号量&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 注意 &amp; lt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 阻塞&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 注意 &amp; lt;=0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        S&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;wakeup&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;P&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;管程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管程&#34;&gt;#&lt;/a&gt; 管程&lt;/h4&gt;
&lt;p&gt;（1）管程的名称。&lt;br&gt;
（2）局部于管程的共享结构数据说明。&lt;br&gt;
（3）对该数据结构进行操作的一组过程 (函数)。&lt;br&gt;
（4）对局部于管程内部的共享数据设置初始值的语句。&lt;/p&gt;
&lt;p&gt;管程把对共享资源的操作封装起来，管程内的共享数据结构只能被管程内的过程所访问。&lt;/p&gt;
&lt;p&gt;每次仅允许一个进程进入管程，从而实现进程互斥。&lt;/p&gt;
&lt;h5 id=&#34;条件变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件变量&#34;&gt;#&lt;/a&gt; 条件变量&lt;/h5&gt;
&lt;p&gt;x.wait：当 x 对应的条件不满足时，正在调用管程的进程调用 x.wait 将自己插入到 x 条件的等待队列，并释放管程，此时其他进程可以使用该管程。&lt;br&gt;
x.signal：x 对应的条件发生了变化，则调用 x.signal，唤醒了一个因 x 条件而阻塞的进程。&lt;br&gt;
条件变量与信号量的比较：&lt;br&gt;
相似点：条件变量的 wait/signal 操作类似于信号量的 P/V 操作，可以实现进程的阻塞和唤醒。&lt;br&gt;
不同点：条件变量是 “没有值的”，仅实现了 “排队等待” 的功能；而信号量是 “有值的”，信号量反映了剩余资源的数目，而在管程中剩余资源数用共享数据结构记录。&lt;/p&gt;
&lt;h4 id=&#34;经典同步问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经典同步问题&#34;&gt;#&lt;/a&gt; 经典同步问题&lt;/h4&gt;
&lt;h5 id=&#34;生产者与消费者模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生产者与消费者模型&#34;&gt;#&lt;/a&gt; 生产者与消费者模型&lt;/h5&gt;
&lt;p&gt;注意 mutex 和 empty（或 full）的先后顺序，会造成死锁&lt;/p&gt;
&lt;h5 id=&#34;读者与写者问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读者与写者问题&#34;&gt;#&lt;/a&gt; 读者与写者问题&lt;/h5&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;semaphore rmutex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; wmutex &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 互斥锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; readcount &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//P(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 关锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;readcount &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 把写操作锁住，只需要在第一次读时&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          readcount&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 读者数目 + 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 开锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//V(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 关锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          readcount&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 读者数目 - 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;readcount &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 没有读者，执行写操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 开锁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TRUE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//P(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rmutex&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token comment&#34;&gt;//V(w);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TRUE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;会造成饥饿问题，加上注释部分可实现&lt;strong&gt;相对公平&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;哲学家进餐问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#哲学家进餐问题&#34;&gt;#&lt;/a&gt; 哲学家进餐问题&lt;/h5&gt;
&lt;p&gt;会造成死锁&lt;/p&gt;
&lt;p&gt;解决方案：1. 同时拿起左右两根筷子&lt;/p&gt;
&lt;p&gt;2. 偶数哲学家先拿左筷子，奇数哲学家先拿右筷子&lt;/p&gt;
&lt;p&gt;3. 只允许 n-1 个人拿筷子&lt;/p&gt;
&lt;h5 id=&#34;吸烟者问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#吸烟者问题&#34;&gt;#&lt;/a&gt; 吸烟者问题&lt;/h5&gt;
&lt;p&gt;将不同材料整合为一个材料的思想&lt;/p&gt;
&lt;p&gt;其他实现比较简单&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107233843200.png&#34; alt=&#34;image-20211107233843200&#34;&gt;&lt;span class=&#34;rainbow&#34;&gt; 互斥信号量初值为 1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;多个进程在任意时刻可共享的代码为可重入代码（纯码）（不可修改的代码）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107233806315.png&#34; alt=&#34;image-20211107233806315&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234055791.png&#34; alt=&#34;image-20211107234055791&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234025816.png&#34; alt=&#34;image-20211107234025816&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234208255.png&#34; alt=&#34;image-20211107234208255&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234235556.png&#34; alt=&#34;image-20211107234235556&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234257386.png&#34; alt=&#34;image-20211107234257386&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234316820.png&#34; alt=&#34;image-20211107234316820&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211107234336105.png&#34; alt=&#34;image-20211107234336105&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;死锁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁&#34;&gt;#&lt;/a&gt; 死锁&lt;/h2&gt;
&lt;p&gt;死锁产生的原因有：1. 系统资源的竞争。2. 进程推进顺序非法。&lt;br&gt;
死锁产生的必要条件：1. 互斥条件：2. 不可剥夺条件 3. 请求并保持条件 4. 循环等待条件&lt;br&gt;
::info&lt;/p&gt;
&lt;p&gt;死锁检测，死锁避免，死锁预防&lt;/p&gt;
&lt;p&gt;对死锁的处理从宽到严，并发性从大到小&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;h4 id=&#34;死锁预防&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁预防&#34;&gt;#&lt;/a&gt; 死锁预防&lt;/h4&gt;
&lt;h5 id=&#34;破坏互斥条件使临界资源共享不现实&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏互斥条件使临界资源共享不现实&#34;&gt;#&lt;/a&gt; 破坏互斥条件 (使临界资源共享，不现实)&lt;/h5&gt;
&lt;h5 id=&#34;破坏不剥夺条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏不剥夺条件&#34;&gt;#&lt;/a&gt; 破坏不剥夺条件&lt;/h5&gt;
&lt;p&gt;实现比较复杂，反复剥夺会增加系统开销，降低系统吞吐量，适合 cpu，寄存器等容易回复的资源&lt;/p&gt;
&lt;h5 id=&#34;破坏请求并保持条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏请求并保持条件&#34;&gt;#&lt;/a&gt; 破坏请求并保持条件&lt;/h5&gt;
&lt;p&gt;采用预先静态分配方法，即进程在运行前就一次性申请完所有资源。&lt;br&gt;
特点：实现简单，但是资源被严重浪费，甚至可能导致进程饥饿。&lt;/p&gt;
&lt;h5 id=&#34;破坏循环等待条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#破坏循环等待条件&#34;&gt;#&lt;/a&gt; 破坏循环等待条件&lt;/h5&gt;
&lt;p&gt;采用顺序资源分配法，首先给系统资源进行编号，规定每个进程按照编号递增的顺序对资源进行申请，同类资源一次性申请完。&lt;/p&gt;
&lt;p&gt;当使用资源顺序和规定顺序不同，会造成浪费&lt;/p&gt;
&lt;h4 id=&#34;死锁避免&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁避免&#34;&gt;#&lt;/a&gt; 死锁避免&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;并非所有不安全状态都为死锁状态&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;银行家算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#银行家算法&#34;&gt;#&lt;/a&gt; 银行家算法&lt;/h5&gt;
&lt;p&gt;要注意先判断&lt;strong&gt;所需资源数&lt;/strong&gt;和&lt;strong&gt;申请资源数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有&lt;strong&gt;安全性算法&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;死锁检测和解除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁检测和解除&#34;&gt;#&lt;/a&gt; 死锁检测和解除&lt;/h4&gt;
&lt;h5 id=&#34;资源分配图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源分配图&#34;&gt;#&lt;/a&gt; 资源分配图&lt;/h5&gt;
&lt;p&gt;请求边，分配边&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108000010609.png&#34; alt=&#34;image-20211108000010609&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;死锁定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁定理&#34;&gt;#&lt;/a&gt; 死锁定理&lt;/h5&gt;
&lt;p&gt;在资源分配图中找到分配满足的进程，然后消去其请求边与分配边，如果最后所有边都可以被消除，那么就是可以简化的，不存在死锁，否则存在死锁。&lt;/p&gt;
&lt;h5 id=&#34;死锁解除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#死锁解除&#34;&gt;#&lt;/a&gt; 死锁解除&lt;/h5&gt;
&lt;p&gt;资源剥夺法：挂起某些死锁进程，抢占资源，将这些资源分配给其他死锁进程，但是要防止挂起时间过长。&lt;br&gt;
撤销进程法：强制撤销部分甚至全部死锁进程，并且剥夺他们的资源，撤销原则可以根据优先级和撤销进程的代价进行。&lt;br&gt;
进程回退法：让一个或者多个进程回退到足以回避死锁的地步，进程回退时，自动释放资源而非剥夺，要求系统保持进程历史信息，设置还原点。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;银行家算法不能检测死锁（哎）&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;引入多道程序技术的前提之一是系统具有 {.gap} 
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;多个 cpu&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;中断功能&lt;/li&gt;
&lt;li&gt;多个终端&lt;/li&gt;
&lt;li&gt;不分时功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001058938.png&#34; alt=&#34;image-20211108001058938&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001112463.png&#34; alt=&#34;image-20211108001112463&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001501032.png&#34; alt=&#34;image-20211108001501032&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001524691.png&#34; alt=&#34;image-20211108001524691&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211108001542686.png&#34; alt=&#34;image-20211108001542686&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/10/29/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/</guid>
            <title>统计量及其分布</title>
            <link>http://example.com/2021/10/29/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/</link>
            <pubDate>Fri, 29 Oct 2021 15:54:32 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/10/11/%E7%9B%B8%E4%BC%BC%E7%90%86%E8%AE%BA/</guid>
            <title>相似理论</title>
            <link>http://example.com/2021/10/11/%E7%9B%B8%E4%BC%BC%E7%90%86%E8%AE%BA/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/" />
            <pubDate>Mon, 11 Oct 2021 10:27:26 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211014141754934.png&#34; alt=&#34;image-20211014141754934&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;P 相当于列操作，P 的逆相当于同等操作的行操作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;一定要注意是不是单位向量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;实对乘矩阵不同特征值的特征向量相互正交&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;如果一个矩阵的特征值没有 0，则这个矩阵可逆&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;相似必有相同的特征值，反之则不然，因为可能不能相似对角化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011105111165.png&#34; alt=&#34;image-20211011105111165&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011105129684.png&#34; alt=&#34;image-20211011105129684&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;AP=PB，P 可逆，则 A,B 相似&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4 个性质&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011203108513.png&#34; alt=&#34;image-20211011203108513&#34;&gt;&lt;/p&gt;
&lt;p&gt;正交化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011210843148.png&#34; alt=&#34;image-20211011210843148&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011213003959.png&#34; alt=&#34;image-20211011213003959&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;任意实对称矩阵，都可由两个正交向量相乘的矩阵加上他的反制矩阵组成，所以必有特征值：k，-k，0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211011213559807.png&#34; alt=&#34;image-20211011213559807&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211012095208574.png&#34; alt=&#34;image-20211012095208574&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;方程组也可以特征值来求&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211012150502145.png&#34; alt=&#34;image-20211012150502145&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211012150426162.png&#34; alt=&#34;image-20211012150426162&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110405267.png&#34; alt=&#34;image-20211013110405267&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110624690.png&#34; alt=&#34;image-20211013110624690&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110647808.png&#34; alt=&#34;image-20211013110647808&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211013110722470.png&#34; alt=&#34;image-20211013110722470&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/26/%E8%A1%8C%E5%88%97%E5%BC%8F/</guid>
            <title>行列式</title>
            <link>http://example.com/2021/09/26/%E8%A1%8C%E5%88%97%E5%BC%8F/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="线性代数" scheme="http://example.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/" />
            <pubDate>Sun, 26 Sep 2021 10:42:42 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;image-20210926105834477.png&#34; alt=&#34;image-20210926105834477&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926110021570.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926134342100.png&#34; alt=&#34;image-20210926134342100&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926112731960.png&#34; alt=&#34;image-20210926112731960&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926114959041.png&#34; alt=&#34;image-20210926114959041&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926113931510.png&#34; alt=&#34;image-20210926113931510&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926112742335.png&#34; alt=&#34;image-20210926112742335&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;抽象行列式的计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象行列式的计算&#34;&gt;#&lt;/a&gt; 抽象行列式的计算&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926142715643.png&#34; alt=&#34;image-20210926142715643&#34;&gt;&lt;/p&gt;
&lt;p&gt;矩阵的性质，相似理论等&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;注意爪形的计算&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210926153823858.png&#34; alt=&#34;image-20210926153823858&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;代数余子式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代数余子式&#34;&gt;#&lt;/a&gt; 代数余子式&lt;/h2&gt;
&lt;p&gt;矩阵和特征值。。。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/26/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9B%BE%E5%BD%A2/</guid>
            <title>几种常见的空间图形</title>
            <link>http://example.com/2021/09/26/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A9%BA%E9%97%B4%E5%9B%BE%E5%BD%A2/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Sun, 26 Sep 2021 08:54:38 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926085928910.png&#34; alt=&#34;image-20210926085928910&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926090536981.png&#34; alt=&#34;image-20210926090536981&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210926090607583.png&#34; alt=&#34;image-20210926090607583&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/20/%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/</guid>
            <title>输入/输出系统</title>
            <link>http://example.com/2021/09/20/%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Mon, 20 Sep 2021 23:03:36 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;磁盘存储器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#磁盘存储器&#34;&gt;#&lt;/a&gt; 磁盘存储器&lt;/h3&gt;
&lt;p&gt;磁头数：记录面数&lt;/p&gt;
&lt;p&gt;柱面数：磁道数&lt;/p&gt;
&lt;p&gt;扇区数：磁盘读写的最小单位&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;磁盘容量：非格式化容量：磁化单元总数，由道密度和位密度计算 --- 格式化容量：按照特定格式存储，容量比非格式化小&lt;/p&gt;
&lt;p&gt;记录密度：道密度，位密度，面密度 = 道密度 * 位密度&lt;/p&gt;
&lt;p&gt;平均存取时间：寻道时间，旋转延迟时间（旋转一周时间的一半），传输时间（扫过扇区的时间）&lt;/p&gt;
&lt;p&gt;数据传输率：=rN，设磁盘转速为 r 转 / 秒，每条磁道容量为 N 字节&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;磁盘地址（驱动器号 -- 柱面 (磁道) 号 -- 盘面号 -- 扇区号）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;汉字内码在主存中占 2B&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;io接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口&#34;&gt;#&lt;/a&gt; I/O 接口&lt;/h2&gt;
&lt;h5 id=&#34;io接口的功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口的功能&#34;&gt;#&lt;/a&gt; I/O 接口的功能&lt;/h5&gt;
&lt;p&gt;进行地址译码和设备选择&lt;/p&gt;
&lt;p&gt;实现数据缓冲&lt;/p&gt;
&lt;p&gt;传送控制命令和状态信息&lt;/p&gt;
&lt;p&gt;信号格式的转换（主机与外设的电平，数据格式可能存在差异）&lt;/p&gt;
&lt;h5 id=&#34;io接口的基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口的基本结构&#34;&gt;#&lt;/a&gt; I/O 接口的基本结构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921110825448.png&#34; alt=&#34;image-20210921110825448&#34;&gt;&lt;/p&gt;
&lt;p&gt;地址线：用以选择和主机交换信息的 ++ 寄存器 ++&lt;/p&gt;
&lt;p&gt;控制线：传送 读 / 写信号 ，此外还会传送仲裁信号，握手信号&lt;/p&gt;
&lt;p&gt;I/O 控制逻辑：对控制寄存器的命令字进行译码，并通过外设界面控制逻辑送到外设 ---- 同时将数据缓冲寄存器的数据发到外设，或者反过来&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对数据缓冲寄存器，状态 / 控制寄存器的访问操作通过 ++ I/O 指令 &lt;ins&gt;完成，只能在操作系统内核的底层 I/O 软件中使用，是&lt;/ins&gt; 特权指令 ++&lt;/p&gt;
&lt;h5 id=&#34;io接口的类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io接口的类型&#34;&gt;#&lt;/a&gt; I/O 接口的类型&lt;/h5&gt;
&lt;p&gt;1. 按数据传送方式：并行接口（一个字节或字的所有位同时传输），串行接口&lt;/p&gt;
&lt;p&gt;（这里所说的数据传送方式指的是外设和接口一侧，主机和接口一侧数据总是并行传送）&lt;/p&gt;
&lt;p&gt;2. 按主机访问 I/O 设备的控制方式：程序查询接口，中断接口，DMA 接口&lt;/p&gt;
&lt;p&gt;3. 按功能的灵活性：可编程接口，不可&lt;/p&gt;
&lt;h5 id=&#34;io端口及其编址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io端口及其编址&#34;&gt;#&lt;/a&gt; I/O 端口及其编址&lt;/h5&gt;
&lt;p&gt;数据端口，状态端口，控制端口，若干端口加上相应的控制逻辑电路组成接口（通常 CPU 能对数据端口进行读写，对状态端口只读，对控制端口只写）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;统一编址：存储器映射方式&lt;/p&gt;
&lt;p&gt;优点：不需要专门的输入输出指令，使 cpu 访问 I/O 操作更灵活，有较大的编址空间&lt;/p&gt;
&lt;p&gt;缺点：占用存储器空间&lt;/p&gt;
&lt;p&gt;独立编址：I/O 映射方式（要设置专门的 I/O 指令来访问 I/O 端口）&lt;/p&gt;
&lt;p&gt;优点：与存储器指令区分，程序编制清晰&lt;/p&gt;
&lt;p&gt;缺点：增加控制的复杂性&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;I/O 总线的数据线上传送的信号包括&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li class=&#34;correct&#34;&gt;I/O 接口的命令字&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;I/O 接口的状态字&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;中断类型号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;磁盘驱动器向盘片磁道记录数据时采用串行方式写入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;程序员进行系统调用访问设备使用 ++ 逻辑地址 ++&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;io方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io方式&#34;&gt;#&lt;/a&gt; I/O 方式&lt;/h2&gt;
&lt;h5 id=&#34;程序查询方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序查询方式&#34;&gt;#&lt;/a&gt; 程序查询方式&lt;/h5&gt;
&lt;p&gt;信息交换完全由主机执行程序实现&lt;/p&gt;
&lt;p&gt;程序查询接口中设置一个数据缓冲寄存器和一个设备状态寄存器&lt;/p&gt;
&lt;h5 id=&#34;程序中断方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序中断方式&#34;&gt;#&lt;/a&gt; 程序中断方式&lt;/h5&gt;
&lt;h6 id=&#34;异常cpu内部中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常cpu内部中断&#34;&gt;#&lt;/a&gt; 异常（cpu 内部中断）：&lt;/h6&gt;
&lt;p&gt;硬故障中断，程序性异常（软中断）&lt;/p&gt;
&lt;p&gt;按发生异常的报告方式和返回方式不同分为：&lt;/p&gt;
&lt;p&gt;1.== 故障 ==（指在引起故障等指令启动后，执行结束前背检测到的异常事件）&lt;/p&gt;
&lt;p&gt;有些可回到发生故障的指令后继续执行，有些不行&lt;/p&gt;
&lt;p&gt;2.== 自陷 ==（发生后 cpu 将机内操作系统内核程序执行）&lt;/p&gt;
&lt;p&gt;自动根据不同陷阱类型进行相应处理，然后返回下一条指令执行，当自陷指令是转移指令是，则&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;== 终止 ==（在指令执行过程中发生了使计算机无法继续执行的硬件故障，如掉电）&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;外部中断狭义上称为中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#外部中断狭义上称为中断&#34;&gt;#&lt;/a&gt; 外部中断（狭义上称为中断）&lt;/h6&gt;
&lt;p&gt;I/O 中断（键盘输入，打印机缺纸），外部信号中断（用户按 Esc），各种定时器产生的时钟中断&lt;/p&gt;
&lt;h6 id=&#34;中断的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中断的基本概念&#34;&gt;#&lt;/a&gt; 中断的基本概念&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921135656166.png&#34; alt=&#34;image-20210921135656166&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210921135635992.png&#34; alt=&#34;image-20210921135635992&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;程序中断的基本流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序中断的基本流程&#34;&gt;#&lt;/a&gt; 程序中断的基本流程&lt;/h6&gt;
&lt;p&gt;中断请求&lt;/p&gt;
&lt;p&gt;对每个中断源的请求设置中断请求标记触发器 INTR，这些触发器组成中断请求标记寄存器（可集中在 cpu，也可分散在各中断源）&lt;/p&gt;
&lt;p&gt;++ 内中断皆为不可屏蔽中断 ++&lt;/p&gt;
&lt;p&gt;++ 通过 INTR 信号线发出的外中断是可屏蔽信号，可被关中断（IF=1）影响&lt;/p&gt;
&lt;p&gt;NMI 信号线上的是不可屏蔽中断 ++&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断判优&lt;/p&gt;
&lt;p&gt;硬件排队器，程序查询（软件实现）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;硬件故障中断属于最高级，其次是软件中断，不可屏蔽中断优于可屏蔽中断，DMA 请求优于 I/O 设备传送的中断请求，高速设备优于低速设备，实时设备优于普通设备&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断响应&lt;/p&gt;
&lt;p&gt;中断隐指令（硬件直接实现）&lt;/p&gt;
&lt;p&gt;​	1. 关中断&lt;/p&gt;
&lt;p&gt;​	2. 保存断点（PC,PSWR）&lt;/p&gt;
&lt;p&gt;​	3. 引出中断服务程序&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断向量&lt;/p&gt;
&lt;p&gt;cpu 响应中断后，中断硬件自动将中断向量地址传送到 cpu&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;​	中断向量是中断程序的入口地址，中断向量地址。。。&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中断处理过程&lt;/p&gt;
&lt;p&gt;图片&lt;/p&gt;
&lt;p&gt;保存断点：可压入栈中也可存入主存的特定单元中&lt;/p&gt;
&lt;p&gt;引出中断服务程序：硬件向量法（硬件产出中断类型号（指出中断向量地址）），软件查询法&lt;/p&gt;
&lt;p&gt;保存现场和屏蔽字：现场信息指的是用户可见的工作寄存器的内容&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;​	现场信息保存由软件实现，断点信息保存由硬件实现&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;h6 id=&#34;多重中断和中断屏蔽技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多重中断和中断屏蔽技术&#34;&gt;#&lt;/a&gt; 多重中断和中断屏蔽技术&lt;/h6&gt;
&lt;h5 id=&#34;dma方式直接存储器存取方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma方式直接存储器存取方式&#34;&gt;#&lt;/a&gt; DMA 方式（直接存储器存取方式）&lt;/h5&gt;
&lt;h6 id=&#34;dma控制器的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma控制器的组成&#34;&gt;#&lt;/a&gt; DMA 控制器的组成&lt;/h6&gt;
&lt;h6 id=&#34;dma传送方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma传送方式&#34;&gt;#&lt;/a&gt; DMA 传送方式&lt;/h6&gt;
&lt;p&gt;停止 cpu 访存，周期挪用（盗取），DMA 和 CPU 交替访存&lt;/p&gt;
&lt;h6 id=&#34;dma传送过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma传送过程&#34;&gt;#&lt;/a&gt; DMA 传送过程&lt;/h6&gt;
&lt;p&gt;1. 预处理&lt;/p&gt;
&lt;p&gt;（可以说设备驱动程序）向 DMA 控制器的有关寄存器设置初值，设置传送方向，启动该设备&lt;/p&gt;
&lt;p&gt;2. 数据传送（完全由 DMA 实现）&lt;/p&gt;
&lt;p&gt;可以以单字节位基本单位，也可以以数据块位基本单位，DMA 占据总线后数据输入输出通过循环实现&lt;/p&gt;
&lt;p&gt;3. 后处理&lt;/p&gt;
&lt;p&gt;DMA 向 cpu 发送终端请求，cpu 执行中断服务程序（校验送入主存的数据是否正确，测试传送过程中是否出错。。。）&lt;/p&gt;
&lt;h5 id=&#34;dma方式和中断方式的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dma方式和中断方式的区别&#34;&gt;#&lt;/a&gt; DMA 方式和中断方式的区别&lt;/h5&gt;
&lt;p&gt;DMA 请求的响应可以发生在每个机器周期结束（也可以说发生在总线周期结束，只要 cpu 不占总线资源）&lt;/p&gt;
&lt;p&gt;DMA 数据传输效率高，适合高速设备&lt;/p&gt;
&lt;p&gt;DMA 请求优先于中断请求&lt;/p&gt;
&lt;p&gt;中断方式具有对异常事件的处理能力，DMA 方式仅限于传送数据块的 I/O 操作&lt;/p&gt;
&lt;p&gt;从数据传输上看，中断方式靠程序传送，DMA 方式靠硬件传送&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;主存故障引起的中断是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;I/O 中断&lt;/li&gt;
&lt;li&gt;程序性中断&lt;/li&gt;
&lt;li&gt;外中断&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;机器校验中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;在配有通道的计算机系统中，用户程序需要输入输出时，引起的中断是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;I/O 中断&lt;/li&gt;
&lt;li&gt;程序性中断&lt;/li&gt;
&lt;li&gt;外中断&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;访管中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;设置中断屏蔽标志可以改变&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;多个中断源的中断请求优先级&lt;/li&gt;
&lt;li&gt;cpu 对多个中断请求响应的优先次序&lt;/li&gt;
&lt;li&gt;多个中断服务程序开始执行的顺序&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;多个中断服务程序执行完的次序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;在采用中断 I/O 方式控制打印输出的情况下，CPU 和打印控制接口中的 I/O 端口交换的信息不可能是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;打印字符&lt;/li&gt;
&lt;li&gt;设备状态&lt;/li&gt;
&lt;li&gt;控制命令&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;主存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;MIPS = 指令执行速度&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第 8 题&lt;/p&gt;
&lt;p&gt;第 10 题有疑问&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/20/%E6%80%BB%E7%BA%BF/</guid>
            <title>总线</title>
            <link>http://example.com/2021/09/20/%E6%80%BB%E7%BA%BF/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Mon, 20 Sep 2021 23:02:58 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;总线概叙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线概叙&#34;&gt;#&lt;/a&gt; 总线概叙&lt;/h2&gt;
&lt;p&gt;特点：分时，共享&lt;/p&gt;
&lt;p&gt;特性：机械特性，电气特性，功能特性，时间特性&lt;/p&gt;
&lt;p&gt;总线的猝发传送方式：在一个总线周期内传送地址连续的多个数据字&lt;/p&gt;
&lt;p&gt;总线分类：片选总线，系统总线，通信总线（外部总线）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;单总线&lt;/p&gt;
&lt;p&gt;双总线：主存总线，I/O 总线&lt;/p&gt;
&lt;p&gt;三总线：主存总线，I/O 总线，DMA（直接内存访问）总线&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总线周期：申请阶段，寻址阶段，传输阶段和结束阶段&lt;/p&gt;
&lt;p&gt;总线时钟周期 = 机器时钟周期&lt;/p&gt;
&lt;p&gt;总线工作频率：时钟频率 / N&lt;/p&gt;
&lt;p&gt;总线时钟频率&lt;/p&gt;
&lt;p&gt;信号线数：地址总线，数据总线，控制总线三种信号线的总和称为信号线数&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;并行总线传输比串行总线传输速度快&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;下列关于多总线结构的叙述中错误的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;靠近 cpu 的总线速度快&lt;/li&gt;
&lt;li&gt;存储器总线可支持突发传送方式&lt;/li&gt;
&lt;li&gt;总线之间通过桥接器相连&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;PCI-Express16 采用并行传输方式&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;$CABB%5BOFGCJ8$SUKJ%5D62K4V.jpg&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总线事务和定时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总线事务和定时&#34;&gt;#&lt;/a&gt; 总线事务和定时&lt;/h2&gt;
&lt;p&gt;申请分配阶段：总线主模块提出申请，经总线仲裁机构将下一传输周期的总线使用权授予某一申请者&lt;/p&gt;
&lt;p&gt;寻址阶段：主模块通过总线发出本次要访问的从模块的地址及有关命令&lt;/p&gt;
&lt;p&gt;传输阶段：主模块和从模块进行数据交换 (单向或双向)&lt;/p&gt;
&lt;p&gt;结束阶段&lt;/p&gt;
&lt;h5 id=&#34;同步定时方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步定时方式&#34;&gt;#&lt;/a&gt; 同步定时方式&lt;/h5&gt;
&lt;p&gt;采用统一时钟信号，在一个总线周期内，可以进行一次数据传送&lt;/p&gt;
&lt;p&gt;优点：传输速度快&lt;/p&gt;
&lt;p&gt;缺点：主从设备属于强制性同步，可靠性差&lt;/p&gt;
&lt;h5 id=&#34;异步定时方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步定时方式&#34;&gt;#&lt;/a&gt; 异步定时方式&lt;/h5&gt;
&lt;p&gt;没有统一的时钟信号，通过握手信号实现定时控制&lt;/p&gt;
&lt;p&gt;不互锁方式：&lt;/p&gt;
&lt;p&gt;半互锁方式&lt;/p&gt;
&lt;p&gt;全互锁方式：主设备发出 “请求” 信号后，必须在从设备 “回答” 后才撤销 “请求” 信号；从设备发出 “回答” 信号后，必须在获知主设备 “请求” 信号已撤销后，再撤销其 “回答” 信号&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210921103739428.png&#34; alt=&#34;image-20210921103739428&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/20/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%EF%BC%88%E4%BB%85%E6%95%B0%E4%B8%80%EF%BC%89/</guid>
            <title>多元函数积分学（仅数一）</title>
            <link>http://example.com/2021/09/20/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%EF%BC%88%E4%BB%85%E6%95%B0%E4%B8%80%EF%BC%89/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Mon, 20 Sep 2021 13:47:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;要使用好对称性和轮转对称性&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;球面坐标系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#球面坐标系&#34;&gt;#&lt;/a&gt; 球面坐标系&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210920145254164.png&#34; alt=&#34;image-20210920145254164&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922194113197.png&#34; alt=&#34;image-20210922194113197&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一型曲线积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一型曲线积分&#34;&gt;#&lt;/a&gt; 第一型曲线积分&lt;/h2&gt;
&lt;p&gt;有密度的曲线&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195230282.png&#34; alt=&#34;image-20210922195230282&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195644117.png&#34; alt=&#34;image-20210922195644117&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;遇到空间曲线，一般利用轮转对称性，对称性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195811310.png&#34; alt=&#34;image-20210922195811310&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922195825275.png&#34; alt=&#34;image-20210922195825275&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;第一型曲面积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一型曲面积分&#34;&gt;#&lt;/a&gt; 第一型曲面积分&lt;/h2&gt;
&lt;p&gt;带密度的曲面&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922201858567.png&#34; alt=&#34;image-20210922201858567&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;第二型曲线积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二型曲线积分&#34;&gt;#&lt;/a&gt; 第二型曲线积分&lt;/h2&gt;
&lt;p&gt;做功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922204243613.png&#34; alt=&#34;image-20210922204243613&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210922204302544.png&#34; alt=&#34;image-20210922204302544&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;2，3 都是路径无关&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923142155839.png&#34; alt=&#34;image-20210923142155839&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923142210976.png&#34; alt=&#34;image-20210923142210976&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923144555252.png&#34; alt=&#34;image-20210923144555252&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;摆线方程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#摆线方程&#34;&gt;#&lt;/a&gt; 摆线方程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923151541849.png&#34; alt=&#34;image-20210923151541849&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923194637283.png&#34; alt=&#34;image-20210923194637283&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923201337416.png&#34; alt=&#34;image-20210923201337416&#34;&gt;&lt;/p&gt;
&lt;p&gt;::info&lt;/p&gt;
&lt;p&gt;没有理解，henfan&lt;/p&gt;
&lt;p&gt;::&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923203524556.png&#34; alt=&#34;image-20210923203524556&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210923204806560.png&#34; alt=&#34;image-20210923204806560&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924092052207.png&#34; alt=&#34;image-20210924092052207&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924143010687.png&#34; alt=&#34;image-20210924143010687&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924154609155.png&#34; alt=&#34;image-20210924154609155&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924161815314.png&#34; alt=&#34;image-20210924161815314&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925210033435.png&#34; alt=&#34;image-20210925210033435&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第2型曲面积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第2型曲面积分&#34;&gt;#&lt;/a&gt; 第 2 型曲面积分&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924175335448.png&#34; alt=&#34;image-20210924175335448&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924181502402.png&#34; alt=&#34;image-20210924181502402&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210924183301980.png&#34; alt=&#34;image-20210924183301980&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925090027489.png&#34; alt=&#34;image-20210925090027489&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925091034432.png&#34; alt=&#34;image-20210925091034432&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925101735987.png&#34; alt=&#34;image-20210925101735987&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925102715791.png&#34; alt=&#34;image-20210925102715791&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925183232039.png&#34; alt=&#34;image-20210925183232039&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925183255492.png&#34; alt=&#34;image-20210925183255492&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925195126637.png&#34; alt=&#34;image-20210925195126637&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;转化为参数方程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925195158836.png&#34; alt=&#34;image-20210925195158836&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210925200545374.png&#34; alt=&#34;image-20210925200545374&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/18/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</guid>
            <title>多元函数积分学预备知识</title>
            <link>http://example.com/2021/09/18/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Sat, 18 Sep 2021 13:15:27 +0800</pubDate>
            <description><![CDATA[ &lt;h4 id=&#34;空间曲线的切线与法平面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲线的切线与法平面&#34;&gt;#&lt;/a&gt; 空间曲线的切线与法平面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918135647271.png&#34; alt=&#34;image-20210918135647271&#34;&gt;&lt;/p&gt;
&lt;p&gt;可直接转化为参数方程&lt;/p&gt;
&lt;h4 id=&#34;空间曲面的切平面和法向量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲面的切平面和法向量&#34;&gt;#&lt;/a&gt; 空间曲面的切平面和法向量&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918135837687.png&#34; alt=&#34;image-20210918135837687&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;2 维参数方程可直接转化为隐式方程&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;空间曲线在平面上的投影&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲线在平面上的投影&#34;&gt;#&lt;/a&gt; 空间曲线在平面上的投影&lt;/h4&gt;
&lt;p&gt;1. 在坐标面上：直接消去对应的值&lt;/p&gt;
&lt;p&gt;2. 在任意面上投影的方向向量：与投影平面的法向量做外积等&lt;/p&gt;
&lt;h4 id=&#34;旋转曲面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#旋转曲面&#34;&gt;#&lt;/a&gt; 旋转曲面&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140206768.png&#34; alt=&#34;image-20210918140206768&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;向量的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#向量的运算&#34;&gt;#&lt;/a&gt; 向量的运算&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140314286.png&#34; alt=&#34;image-20210918140314286&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;平面直线及位置关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平面直线及位置关系&#34;&gt;#&lt;/a&gt; 平面直线及位置关系&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140501959.png&#34; alt=&#34;image-20210918140501959&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140520685.png&#34; alt=&#34;image-20210918140520685&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140646053.png&#34; alt=&#34;image-20210918140646053&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;平面与直线的夹角小于 90°&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;场论初步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#场论初步&#34;&gt;#&lt;/a&gt; 场论初步&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140857494.png&#34; alt=&#34;image-20210918140857494&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918140913130.png&#34; alt=&#34;image-20210918140913130&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918141032116.png&#34; alt=&#34;image-20210918141032116&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;偏导与微分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143116391.png&#34; alt=&#34;image-20210918143116391&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143421790.png&#34; alt=&#34;image-20210918143421790&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;绕 x 轴旋转，y²=y²+z²&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143600498.png&#34; alt=&#34;image-20210918143600498&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210918143616611.png&#34; alt=&#34;image-20210918143616611&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;这样操作简化计算&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/07/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/</guid>
            <title>中央处理器</title>
            <link>http://example.com/2021/09/07/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" />
            <pubDate>Tue, 07 Sep 2021 09:16:53 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;cpu的功能和结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu的功能和结构&#34;&gt;#&lt;/a&gt; CPU 的功能和结构&lt;/h2&gt;
&lt;h5 id=&#34;运算器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算器&#34;&gt;#&lt;/a&gt; 运算器&lt;/h5&gt;
&lt;p&gt;算数逻辑单元&lt;/p&gt;
&lt;p&gt;暂存寄存器（对应用程序员透明）&lt;/p&gt;
&lt;p&gt;累加寄存器&lt;/p&gt;
&lt;p&gt;通用寄存器，程序状态字寄存器（用户可见）&lt;/p&gt;
&lt;p&gt;移位器，计数器&lt;/p&gt;
&lt;h5 id=&#34;控制器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器&#34;&gt;#&lt;/a&gt; 控制器&lt;/h5&gt;
&lt;p&gt;程序计数器（汇编语言程序员可见）&lt;/p&gt;
&lt;p&gt;指令寄存器，存储器地址寄存器，存储器数据寄存器（，用户汇编语言程序员不可见）&lt;/p&gt;
&lt;p&gt;指令译码器，时序系统，位操作控制信号发生器&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;n 位 cpu 是指数据总线 n 条&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;指令执行过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令执行过程&#34;&gt;#&lt;/a&gt; 指令执行过程&lt;/h2&gt;
&lt;p&gt;定长，不定长机器周期&lt;/p&gt;
&lt;p&gt;取值周期（包含对指令译码），间址周期，执行周期，中断周期&lt;/p&gt;
&lt;p&gt;4 个标志触发器 FE,IND,EX,INT（控制信号：1-&amp;gt;FE,1-&amp;gt;IND....）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;中断周期的进栈操作是将 sp-1&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;指令执行方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令执行方案&#34;&gt;#&lt;/a&gt; 指令执行方案&lt;/h5&gt;
&lt;p&gt;单指令周期，多指令周期，流水线方案&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;从时间上，cpu 通过指令周期的不同阶段区分指令与数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;从空间上，cpu 通过数据流向判断，指令从内存流向控制器，数据从内存流向运算器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210912102623183.png&#34; alt=&#34;image-20210912102623183&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;数据通路的功能和基本机构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据通路的功能和基本机构&#34;&gt;#&lt;/a&gt; 数据通路的功能和基本机构&lt;/h2&gt;
&lt;p&gt;单总线方式：结构简单，但数据传输存在较多的冲突问题，一个时钟周期内可以完成多个相兼容的位操作&lt;/p&gt;
&lt;p&gt;三总线方式&lt;/p&gt;
&lt;p&gt;专用数据通路方式&lt;/p&gt;
&lt;p&gt;cpu 内部总线：实现容易，内部简单，性能低，有交多冲突&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;使能状态 = 允许&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li class=&#34;quiz&#34;&gt;单周期处理器中所有的指令的指令周期位一个时钟周期，下列关于单周期处理器的叙述错误的是&lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;处理器时钟频率低&lt;/li&gt;
&lt;li&gt;在指令执行过程中控制信号不变&lt;/li&gt;
&lt;li&gt;每条指令的 cpi 为 1&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;可采用单总线结构数据通路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;。。题目&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;控制器的功能和原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器的功能和原理&#34;&gt;#&lt;/a&gt; 控制器的功能和原理&lt;/h2&gt;
&lt;h4 id=&#34;硬布线控制器一般用于risc执行速度快扩充指令困难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬布线控制器一般用于risc执行速度快扩充指令困难&#34;&gt;#&lt;/a&gt; 硬布线控制器（一般用于 RISC，执行速度快，扩充指令困难）&lt;/h4&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/09/05/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</guid>
            <title>微分方程</title>
            <link>http://example.com/2021/09/05/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Sun, 05 Sep 2021 16:43:36 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;重点是换元&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170302528.png&#34; alt=&#34;image-20210905170302528&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170313250.png&#34; alt=&#34;image-20210905170313250&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170341667.png&#34; alt=&#34;image-20210905170341667&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170453887.png&#34; alt=&#34;image-20210905170453887&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170515042.png&#34; alt=&#34;image-20210905170515042&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905170710011.png&#34; alt=&#34;image-20210905170710011&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;dy 前面有 x 的话，可以先解 dx/dy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905225645731.png&#34; alt=&#34;image-20210905225645731&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100113164.png&#34; alt=&#34;image-20210907100113164&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100124879.png&#34; alt=&#34;image-20210907100124879&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100135038.png&#34; alt=&#34;image-20210907100135038&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210907100956222.png&#34; alt=&#34;image-20210907100956222&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908134309483.png&#34; alt=&#34;image-20210908134309483&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908134436881.png&#34; alt=&#34;image-20210908134436881&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;没学明白&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908134558622.png&#34; alt=&#34;image-20210908134558622&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135134707.png&#34; alt=&#34;image-20210908135134707&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135151463.png&#34; alt=&#34;image-20210908135151463&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135829969.png&#34; alt=&#34;image-20210908135829969&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908135910159.png&#34; alt=&#34;image-20210908135910159&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908140053526.png&#34; alt=&#34;image-20210908140053526&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908140750330.png&#34; alt=&#34;image-20210908140750330&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908140824017.png&#34; alt=&#34;image-20210908140824017&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908144038903.png&#34; alt=&#34;image-20210908144038903&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210908144132513.png&#34; alt=&#34;image-20210908144132513&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;积分时别忘了 C&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/08/30/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/</guid>
            <title>多元函数微分学</title>
            <link>http://example.com/2021/08/30/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Mon, 30 Aug 2021 15:48:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;image-20211021092335232.png&#34; alt=&#34;image-20211021092335232&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5Czz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211021095258450.png&#34; alt=&#34;image-20211021095258450&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;第 2 问要有，凑导数的思想，之后将要求的值放在另一边，还有洛必达别忘了&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;主要可微的证明，偏导数的连续，链式求导法则，方程组求导，多元函数的极值，泰勒公式&lt;/p&gt;
&lt;p&gt;给出偏微分方程，求原函数，与一元函数微分方程类似&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210901160326160.png&#34; alt=&#34;image-20210901160326160&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210901160343851.png&#34; alt=&#34;image-20210901160343851&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;设 y=kx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830203707186.png&#34; alt=&#34;image-20210830203707186&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830203727627.png&#34; alt=&#34;image-20210830203727627&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830155251953.png&#34; alt=&#34;image-20210830155251953&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830155316602.png&#34; alt=&#34;image-20210830155316602&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830171807028.png&#34; alt=&#34;image-20210830171807028&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20211109153739130.png&#34; alt=&#34;image-20211109153739130&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830165709631.png&#34; alt=&#34;image-20210830165709631&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830180241718.png&#34; alt=&#34;image-20210830180241718&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830180251882.png&#34; alt=&#34;image-20210830180251882&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830200210184.png&#34; alt=&#34;image-20210830200210184&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210830235203627.png&#34; alt=&#34;image-20210830235203627&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/08/27/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6-%E7%A7%AF%E5%88%86%E7%AD%89%E5%BC%8F%E5%92%8C%E4%B8%8D%E7%AD%89%E5%BC%8F/</guid>
            <title>一元函数积分学-积分等式和不等式（包含物理应用）</title>
            <link>http://example.com/2021/08/27/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6-%E7%A7%AF%E5%88%86%E7%AD%89%E5%BC%8F%E5%92%8C%E4%B8%8D%E7%AD%89%E5%BC%8F/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Fri, 27 Aug 2021 16:38:53 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;image-20210903230400279.png&#34; alt=&#34;image-20210903230400279&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;作为结论&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210903230734498.png&#34; alt=&#34;image-20210903230734498&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;作为结论&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827181449923.png&#34; alt=&#34;image-20210827181449923&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827181506330.png&#34; alt=&#34;image-20210827181506330&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;可作为结论&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827181527508.png&#34; alt=&#34;image-20210827181527508&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827181304362.png&#34; alt=&#34;image-20210827181304362&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;数形结合，通过观察下图发现 f (x) 由两段组成，所以用两次拉格朗日&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827181718601.png&#34; alt=&#34;image-20210827181718601&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827201400634.png&#34; alt=&#34;image-20210827201400634&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827201537654.png&#34; alt=&#34;image-20210827201537654&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827204521432.png&#34; alt=&#34;image-20210827204521432&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827211231875.png&#34; alt=&#34;image-20210827211231875&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827211154379.png&#34; alt=&#34;image-20210827211154379&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210905111520124.png&#34; alt=&#34;image-20210905111520124&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827211204250.png&#34; alt=&#34;image-20210827211204250&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827232237114.png&#34; alt=&#34;image-20210827232237114&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210828145304265.png&#34; alt=&#34;image-20210828145304265&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;题解很 nt，根本不讲思路，令人望而却步，这题主要是找递推公式，想到这一点还要靠一点做题的经验&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;利用&lt;/mtext&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mtext&gt;将原式转化为&lt;/mtext&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mtext&gt;与&lt;/mtext&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mtext&gt;的递推式，然后进行放缩即可&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;利用sec^2x=tan^2x+1,将原式转化为f(n)与f(n-2)的递推式，然后进行放缩即可
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8641079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;利&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;用&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.9474379999999999em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8641079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.113em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;原&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;转&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;化&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;为&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;与&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10764em;&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;递&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;推&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;然&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;后&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;进&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;行&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;放&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;缩&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;即&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;可&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210828145320865.png&#34; alt=&#34;image-20210828145320865&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;注意数形结合&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210828145352590.png&#34; alt=&#34;image-20210828145352590&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一元函数积分学的物理应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一元函数积分学的物理应用&#34;&gt;#&lt;/a&gt; 一元函数积分学的物理应用&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210829215947489.png&#34; alt=&#34;image-20210829215947489&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/08/26/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/</guid>
            <title>一元函数积分学的几何应用</title>
            <link>http://example.com/2021/08/26/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E5%87%A0%E4%BD%95%E5%BA%94%E7%94%A8/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Thu, 26 Aug 2021 14:48:16 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;image-20210826201809901.png&#34; alt=&#34;image-20210826201809901&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210826201749474.png&#34; alt=&#34;image-20210826201749474&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210826220441204.png&#34; alt=&#34;image-20210826220441204&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210826225405872.png&#34; alt=&#34;image-20210826225405872&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210826231028169.png&#34; alt=&#34;image-20210826231028169&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210826234800740.png&#34; alt=&#34;image-20210826234800740&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827000702136.png&#34; alt=&#34;image-20210827000702136&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210827000742354.png&#34; alt=&#34;image-20210827000742354&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2021/08/24/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E8%AE%A1%E7%AE%97/</guid>
            <title>一元函数积分学的计算</title>
            <link>http://example.com/2021/08/24/%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6%E7%9A%84%E8%AE%A1%E7%AE%97/</link>
            <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/" />
            <category term="高等数学" scheme="http://example.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/" />
            <pubDate>Tue, 24 Aug 2021 22:29:06 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;image-20210824223158917.png&#34; alt=&#34;image-20210824223158917&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825223733318.png&#34; alt=&#34;image-20210825223733318&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825144019973.png&#34; alt=&#34;image-20210825144019973&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210824223307915.png&#34; alt=&#34;image-20210824223307915&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210824224426847.png&#34; alt=&#34;image-20210824224426847&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210824225229422.png&#34; alt=&#34;image-20210824225229422&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210824231104587.png&#34; alt=&#34;image-20210824231104587&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825003535421.png&#34; alt=&#34;image-20210825003535421&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;求原函数注意绝对值，如 1/x --&amp;gt; ln|x|&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825143818673.png&#34; alt=&#34;image-20210825143818673&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825011045536.png&#34; alt=&#34;image-20210825011045536&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210901232322790.png&#34; alt=&#34;image-20210901232322790&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210901232342204.png&#34; alt=&#34;image-20210901232342204&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210901232345457.png&#34; alt=&#34;image-20210901232345457&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825151404514.png&#34; alt=&#34;image-20210825151404514&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825153406349.png&#34; alt=&#34;image-20210825153406349&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;第一反应是用三角函数代换，如果积分范围比较难处理，应该想到对称性，区间化简公式&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825171209822.png&#34; alt=&#34;image-20210825171209822&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825193828987.png&#34; alt=&#34;image-20210825193828987&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210901231719829.png&#34; alt=&#34;image-20210901231719829&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210902104422418.png&#34; alt=&#34;image-20210902104422418&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825195747873.png&#34; alt=&#34;image-20210825195747873&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;一步到位&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825204231753.png&#34; alt=&#34;image-20210825204231753&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825233158242.png&#34; alt=&#34;image-20210825233158242&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210825233222761.png&#34; alt=&#34;image-20210825233222761&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210902131052228.png&#34; alt=&#34;image-20210902131052228&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20210902131505436.png&#34; alt=&#34;image-20210902131505436&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
